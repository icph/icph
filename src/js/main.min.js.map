{"version":3,"sources":["app.js","partials/hub.change.password.js","partials/hub.configure.proxy.js","partials/hub.confirm.restart.os.js","partials/hub.enable.https.js","config.sensor.js","partials/hub.launch.manager.js","directive/hub.dashboard.admin.js","directive/hub.dashboard.linegraph.js","directive/hub.dashboard.radialgraph.js","directive/hub.dashboard.sensor.js","directive/hub.loading.js","directive/hub.networksettings.js","directive/hub.showOemOnLoad.js","directive/ps.mouse.over.js","directive/shakethat.js","service/httpRequestsService.js","service/workerProcessRestService.js","service/utilityFunctionsService.js","state/state.error.js","state/state.hub.dashboard.cloudcmd.js","state/state.hub.dashboard.documentation.js","state/state.hub.dashboard.js","state/state.hub.dashboard.othertools.js","state/state.hub.dashboard.packages.js","state/state.hub.dashboard.referencesoftware.js","state/state.hub.dashboard.sensors.js","state/state.hub.dashboard.softsoc.js","state/state.hub.dashboard.tools.js","state/state.hub.js","state/state.hub.license.js","state/state.hub.networkcheck.js","state/state.hub.networkconnected.js","state/state.hub.networksettings.js","state/state.hub.nonetwork.js","state/state.hub.test.js","state/state.tutorial.js","state/state.welcome.js","state/state.welcome.login.js","state/state.welcome.privacy.js","state/state.hub/gatewayOperations.js","state/state.hub/osUpdate.js","state/state.hub/packages.js","state/state.hub/pro_upgrade.js","state/state.hub/proxy.js","state/state.hub/repositories.js","state/state.hub/save_image.js"],"names":["getCookie","cname","name","ca","document","cookie","split","i","length","c","charAt","substring","indexOf","acceptedPrivacy","authenticate","$q","$rootScope","$state","$timeout","bypass_auth","loggedin","when","go","reject","setupNoConnection","start","response_target_error_start_time","Date","setDate","getDate","start_trigger_no_connection","started_periodic_checking","setupPeriodicChecking","setResponseErrorTime","has_error","currentTime","diffTime","getTime","checkResponseErrorReport","diffTimeInSeconds","changePassword","$scope","update","username","password","newpassword","confirmnewpassword","error_message","_username","_password","_newpassword","_confirmnewpassword","$http","method","url","data","JSON","stringify","headers","Content-type","then","response","status","openConfirmChangePasswordModal","modalInstance","dismiss","error","configureProxy","$uibModal","getProxySettings","cancelText","isInsideModal","skipSettings","networkSettingsModal","doneSuccessCallback","open","templateUrl","gui_version","animation","size","scope","backdrop","modal_light_dismiss_enabled","closeModal","confirmRestartOS","controller","restarting_os","restarted_os","message","restartOS","rebootGateway","restart_welcome_latency_milliseconds","enableHttps","toggled_security","toggleSecurity","toggling_security","_enable","security_enabled","stopCheckingNetwork","tempURL","workerProcessRestService","performGeneralExecution","setTimeout","window","location","hostname","https_port","toggle_security_timeout_milliseconds","errorMessage","startCheckingNetwork","rest_check_interval_milliseconds","launchLaunchManager","launchQuickTools","config_sensor","broker","host","wssPort","wsPort","topic","reconnectTimeout","reconnectInterval","charts","title","chartType","units","min","max","targetLow","targetHigh","points","log_messages","log_message_json","license_duration_days","network_check_interval_milliseconds","rest_check_interval_milliseconds_s","rest_check_interval_milliseconds_m","rest_check_interval_milliseconds_l","rest_check_interval_milliseconds_ll","reboot_request_timeout_milliseconds","html_content_timeout_milliseconds","linger_info_timeout_milliseconds","factory_reset_welcome_latency_milliseconds","length_of_line_graph_history","simulate_network_failure","network_index","min_password_length","no_local_config_hosts","requested_url","hash","substr","quark_name_string","authorization","nc_count","ha1","cnonce","realm","nonce","opaque","qop","periodicCheckNetworkFunc","do_validate_session","oem_branding_logo_file","oem_branding_eulas","oem_branding_eulas_datetime","oem_branding_cookies_names","isLoadingErrorModalShown","iotgatewayhub","angular","module","config","$stateProvider","$urlRouterProvider","$httpProvider","accepted_privacy","otherwise","interceptors","push","factory","client","connect","get","run","$location","$window","httpRequestsService","resolveFromUrl","states","len","redirectState","path","$on","event","abortAllRequests","no_connection_template","template","clickRefresh","reload","directive","restrict","link","element","attr","$watch","getTemplateUrl","replace","latestData","scaleSteps","scaleStepWidth","scaleStartValue","pointsToShow","connected","$elem","attrs","setOptions","overrideScale","undefined","options","showScale","showTooltips","maintainAspectRatio","scaleOverride","parseInt","parseFloat","scaleFontColor","emptyDataMessage","scaleShowGridLines","scaleGridLineColor","scaleGridLineWidth","scaleShowHorizontalLines","scaleShowVerticalLines","scaleType","useUtc","scaleTimeFormat","bezierCurve","bezierCurveTension","pointDot","pointDotRadius","pointDotStrokeWidth","pointHitDetectionRadius","datasetStroke","datasetStrokeWidth","datasetFill","legendTemplate","trimHistory","scatterChart","datasets","removePoint","dataHistory","shift","label","strokeColor","x","y","chartCanvasFind","find","canvasContext","getContext","Chart","Scatter","addPoint","series","$watchGroup","destroy","upperRange","lowerRange","createDataPair","dataPair","segmentShowStroke","segmentStrokeColor","segmentStrokeWidth","percentageInnerCutout","animationSteps","animationEasing","animateRotate","animateScale","doughnutColors","labels","elem","loadMessage","showMessage","resolve","init","defaults","saveText","insideModal","hideTestSettings","maintainContextAfterSave","$","extend","isSaving","barMessage","isUpdatingChannelsFailed","showSaveResult","networkSettingsTest","running","result","success","isVisible","saveResult","tmpSettings","single_url","settings","proxy","single_port","http_url","http_port","https_url","ftp_url","ftp_port","socks_url","socks_port","no_proxy","onSaveSuccess","onSaveFail","$emit","nextAction","successApplyProxySettings","p_list","parse","setPackages","err","applyProxySettings","testProxySettingsCallback","testSettings","testProxySettings","bind","hideOEMBranding","e","stopPropagation","preventDefault","perfectScrollbar","$animate","require","submit","submitted","form","on","$apply","$valid","addClass","removeClass","service","customTimeout","newPromise","defer","toBeAbortedPromises","promise","forEach","eachPromise","isAbortedByUs","removeRequest","timeout","target_index","count","splice","request","responseError","rejection","to_report","$broadcast","utilityFunctionsService","isNumber","n","isNaN","isFinite","pad","width","z","Array","join","parse_digest","_header","ws","token","quotedString","tokenizer","RegExp","tokens","match","unq","setCookie","cvalue","exdays","d","setTime","expires","toUTCString","checkNetwork","_successCallback","_errorCallback","cache","createWorkID","randomNum","Math","random","toString","checkPeriodicCheckingResponseError","report","return_message","informGeneralError","titleMessage","descMessage","barBeforeMessage","title_message","description_message","bar_before_message","hasError","informGeneralChecking","httpMethod","httpURL","noParameter","httpJSON","httpBody","realSuccessCallback","checkPeriod","periodicChecking","http_call","id","workID","is_checking","in_progress","temp_error_message","work_type","passedSuccessCallback","passedErrorCallback","performGeneralExecutionOnlySubmit","state","viewTutorial","tutorial_html","isQuark","href","parameter","viewSensorSetupTutorial","viewSensorCloudTutorial","viewHelixTutorial","viewSaveDeployTutorial","state_chosen","abstract","timerExpired","chartMatch","isSensorPanelExpanded","checkElement","el","sensors_charted","charts_flat_list","dashboardToggle","carouselPrevious","carouselNext","setDashboard","onConnectionLost","responseObject","errorCode","countTabs","tab_count","device","sensor_config","softsoc_config","ref_sw_config","package_config","admin_config","documentation_config","shouldDisplay","whichTab","display","onMessageArrived","sensorMatch","entry","payloadString","_id","sensorMatches","grep","mostRecentValue","datum","priority","mostRecentUnits","mostRecentSource","dataSource","mostRecentTimestamp","chartMatches","parentSensorTitle","value","sourcePriority","stepWidth","timeToLive","ttl","timerExpiredPromise","cancel","mqttInit","loop","reconnect","_host","_useSSL","_port","protocol","_reconnectInterval","_reconnectTimeout","_topic","mqtt_client","Paho","MQTT","Client","useSSL","cleanSession","onSuccess","subscribe","qos","onFailure","initMqtt","num_to_show","gettingPackages","showLoadMore","sortType","totalDisplayed","loadMore","installed","params","packageUrl","packageName","$stateParams","doManageSensors","_cookie","openManageSensorsDialogModal","noreshow","viewVideo","openSensorTutorialModal","fpgaBuildAndReboot","cancelFPGA","fpga_num_comp","continueFPGA","showFpgaBuild","fpgaResetAndReboot","uninstallPackage","installedBitstream","showFpgaReboot","bar_after_message","setFPGAOption","option","enabled","fpga_options","fpgaValidateInput","gui_num_comp","pow","fpga_valid_num","fpga_package_install_position","show_close_button","installPackage","fpga_options_data","isFPGAImageInstalled","isBitstreamInstalled","updateSearchResults","search","results","input","searchTerm","toLowerCase","searchResults","Map","idx","navOptions","section","groups","jdx","kdx","set","result_code","extensions","showSection","whichButton","showSettings","each","index","this","navOptionId","navOption","selectedView","displayType","dynamicChangeViewPartial","htmlLink","javascriptFunction","selectedOption","shiftView","revert","searchOption","$sce","oem_branding_logo_full_file","temp_index","lastIndexOf","temp_logo_name","temp_logo_path","encodeURIComponent","oem_logo_file","dashboard","usb_devices","available","package_updates","updates","sensors","sensor_map","upgrades","mec","option_descriptions","humidity","temperature","pro","updating_package","updated_package","update_package_failed","update_package_fail_message","installing_package","uninstalling_package","package_activity","starting_package","stopping_package","enabling_package","installed_package","deleting_repository","noderedurl","trustAsResourceUrl","luciurl","httpurl","httpsurl","cloudcmdurl","foundOSUpdate","foundOSUpdate_Packages","OSUpdate_Packages","package_refresh","gotPackagesList","gotPackagesList_Error","isDashboard","hasUpdates","hasOSUpdate","updatePackageStatuses","_i","_len","packages","_package","_service","_all_services_running","_all_services_enabled","_num_services","_j","_service_sub","service_statuses","SUB","_service_state","State","package_statuses","autorun","setArrays","_set_services","filter","upgrade_version","curated","setServices","_toolname","win","navigator","userAgent","focus","setupPreventModalClosing","initHubTasks","initSetDevice","model","uptime","days","hours","minutes","milliseconds","upSince","deviceUpSince","initGetTutorials","initGetFPGA","initGetFPGABoardInfo","fpga_info","documentation","numComp","j","expandHub_proxy","expandHub_services","expandHub_save_image","expandHub_security","expandHub_repositories","expandHub_packages","expandHub_pro_upgrade","expandHub_openOSUpdate","expandHub_gatewayOperations","$watchCollection","blockUI","hide","listener","targetScope","reason","closed","show","accepted_license","findUnacceptedCookieIndex","all_accepted","checkEulaCookies","doApply","eula_index","eulaLoaded","temp_eula_full_name","temp_eula_name","temp_eula_path","current_eula_html_file","current_eula_cookie_name","agree","proceedToNetworkCheck","default_tab","configureNetwork","skipConfigureNetwork","authentication","broadcastFailure","bMessage","handleAuthenticated","credentials","checkAuth","_method","_uri","showLogin","continueWelcomeLogin","setOEMBrandingCookiesNames","temp_datetime","temp_cookiename","concat","checkOEMBrandingCookies","temp_accepted","getOEMBranding","logo_file","eula_files","eula_files_datetime","showGo","serverErrorMessage","keyPressed","$event","keyCode","login","internalAuthentication","firstTime","do_auth","init_in_progress","showAuthenticationError","showServerError","continueToLogin","_success","_error","timeout_value","_","isFunction","scanUSBDevices","scanning_usb","verifyFileExisted","file_path","getAccounts","logout","enterOSCredential","do_enter_credential","do_confirm_update","cancelOSUpdate","informOSUpdate_CancelWarning","continueChecking","checkOSUpdate","_credentials","content_body","type","informOSUpdateError","confirmOSUpdate","checkOSUpdate_Packages","package_update","confirmOSUpdatePackages","informOSUpdateNotAvailable","doOSUpdate","showOSUpdate","doOSUpdate_Packages","showOSUpdatePackages","performUpdateSequence","informOSUpdateRestart","show_bar","show_last_error","show_last_normal","show_close","show_warning_html","_error_message","informOSUpdateDone","basicInstallPackage","_name","_trust","successCallback","errorCallback","_untrusted_query","basicUninstallPackage","basicUpdatePackage","basicUpdateAllPackages","basicSelfUpgrade","changePackageState","blockSetArr","PACKAGE_STATE","INSTALLED","UNINSTALLED","remove","UPDATED","version","UPDATE_FAILED","update_message","PACKAGE_ACTIVITY_TYPE","INSTALL","UNINSTALL","UPDATE","UPDATE_ALL","SELF_UPDATE","opt","args","$s","currentScope","_type","installing_any_package","selfUpgrading","installing_all_package_updates","checkForPackageActivity","showPackageInfo","_details","attrname","openPackageInfoModal","openInstallPackageErrorModal","confirmUntrusted","launchPackage","_url","updatePackage","updateFailed","_version","openUpdateDevHubPackageModal","p_info","openUpdateUntrustedPackageModal","updateDevHub","updatePackagesIndividually","updateNextPackage","packagesToUpdate","selfUpgradeAvailable","updatePackages","_p","_pl","_packg","tempPackage","devHubPackage","openUpdateUntrustedPackagesModal","package_list","Number","getPackagesInstalled","service_error","displayed","checkbox","hasupgrade","closePackageInfo","toggleServiceState","_action","_services","service_error_message","doUpdate","_displayed","_message","modalInstance2","trustToUpdate","confirmUpdatePackages","doUpdatePackages","doSelfUpdate","startTrustedInstall","untrusted","openInstallUntrustedPackageModal","trustToInstall","_title","openServiceActivityPackageErrorModal","openAddPackagesModal","query","closeAddPackages","confirmOSUpgrade","callback","onSuppress","shouldSuppress","onNotNow","continueOSUpgrade","openOSUpgradeModal1b","openOSUpgradeModal2","openOSUpgradeModal3","in_pro_upgrade","before_bar_message","button_title","timeHours","responseData","rebooting","rebooted","goNextState","has_network","openErrorModal","opened","selectedItems","repo_status","repo_error","_https_conn","https_conn","_ok","clearInterval","setInterval","_fail","pro_status","repo_list","repositories","resultHandler","tempUrl","failCallback","_http_url","_http_port","_https_url","_https_port","_ftp_url","_ftp_port","_socks_url","_socks_port","_no_proxy","openCreateRepositoryModal","list","openCreateRepositoryModal_2","hideCancel","updated_repositories","updating_repositories","removeRepository","_repo","findRepository","source","updateRepos","deleting_any_repository","adding_repository","response_message","error_message_add","response_message_add","reponse_message","addRepo","_repository_name","newRepository","_repository_url","_repository_username","_repository_password","_existing","deleteRepo","_repository","_index","getDefaultConfigurationForSaveImage","openOSImageModal0","closeOSImageModal","continueOSImage1","openOSImageModal1","selected_device","setSelectedDevice","_device","continueOSImage2","openOSImageModal2","_usb_device","closeOSImageModal2","continueOSImage3","openOSImageModal3","from_custom","update_params","harden_type","usb_device","packages_removed","updaters","users","stig","new_admin_password","confirm_admin_password","new_mec_admin_password","confirm_mec_admin_password","enable_mec_whitelist","parseVersion","sysVersionSplit","system_version","rcplVersion","rcplLessThanEighteen","selection","closeOSImageModal3","openOSImageModal3_Standard","my_data","config_data","install_list","updaters_list","users_list","stig_list","openOSImageModal3_Custom_Packages","_update_params","hasMEC","closeOSImageModal3_Standard","continueOSImage4_FromStandard","openOSImageModal4","_data","save_image_has_error","save_image_error_message","custom_configuration_data","search_removed","search_packages","container","getElementById","scrollTop","custom_installed_list","processData","showError","key","bEnforce","bRemove","lowerName","remove_dict","key2","value2","enforce","err_message","clearSearchOSImageModal3_Custom","closeOSImageModal3_Custom","backOSImageModal3_Custom","continueOSImage3_Custom","temp_removed_packages","map","a","openOSImageModal3_Custom_MEC","updater_path","checkingFile","search_not_deleted","delete","custom_updaters_list","mec_updater","addSearchOSImageModal3_Custom","doesExist","temp_updaters","openOSImageModal3_Custom_User","gettingAccount","custom_users_list","sort_number","access","expanded","disable_toggle","new_password","confirm_password","accounts","allow_access","do_time_out","checkErrorMessage","temp_users","pw","openOSImageModal3_Custom_stig","custom_stig_list","temp_array","stig_all","k","el_return","ID","toInclude","Severity","Title","URL","included","temp_stig","closeOSImageModal4","continueOSImage5","openOSImageModal5","closeSaveImage","savedImage","saveImage","Device","admin_password","mec_password","openOSImageModal6","openOSImageModal6e","continueOSImage6","continueOSImage7","openOSImageModal7","html_page","openSaveDeployTutorial","openDocumentation","confirmToggleSecurity","serviceControl","_service_q","checkServiceStatuses","Object","keys","services","_service_calls","all","_len2","_result","_object","_num_serv","_k","_service_name","_service_status"],"mappings":"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","file":"main.min.js","sourcesContent":["var gui_version = '2.0.0';  // match this with index.html's version number\n\nvar bypass_auth                           = false;  //should be false for production\nvar log_messages                          = false;  //show notifications of mqtt messages\nvar log_message_json                      = false;  //show mqtt message received\nvar license_duration_days                 = 365*20; //20 years\nvar network_check_interval_milliseconds   = 1000*60*1;//1 minute\nvar rest_check_interval_milliseconds_s    = 1000*1; // 1 sec\nvar rest_check_interval_milliseconds      = 1000*2; // 2 sec\nvar rest_check_interval_milliseconds_m    = 1000*5; // 5 sec\nvar rest_check_interval_milliseconds_l    = 1000*10; // 10 sec\nvar rest_check_interval_milliseconds_ll   = 1000*60; // 60 sec\nvar reboot_request_timeout_milliseconds   = 1000*20; // 20 sec\nvar toggle_security_timeout_milliseconds  = 1000*35;\nvar html_content_timeout_milliseconds     = 1000*10; // 10 sec\nvar linger_info_timeout_milliseconds      = 1000*6; // 6 sec\nvar restart_welcome_latency_milliseconds  = 1000*13; // 13 sec\nvar factory_reset_welcome_latency_milliseconds = 1000*30; // 30 sec\nvar length_of_line_graph_history          = 30;\nvar simulate_network_failure              = false;\nvar network_index                         = 0;\nvar min_password_length                   = 3;\nvar no_local_config_hosts                 = ['golden']; //add your localhost here if you want to never use sensor dev configs\nvar requested_url                         = window.location.hash.substr(1);\nvar modal_light_dismiss_enabled           = 'static'; // determines if the angular modals can be dismissed by clicking outside the model (assigned to the 'backdrop' property of all angular bootstrap modals). Use 'static' for backdrop with no click handler, true for backdrop with click handler. See http://angular-ui.github.io/bootstrap/#/modal\nvar https_port                            = \"3092\";\nvar quark_name_string                     = \"Quark\";\nvar start_trigger_no_connection           = true;\nvar started_periodic_checking             = false;\nvar response_target_error_start_time      = new Date();\nvar authorization = {'nc_count':0, 'username':'', 'ha1':'', 'cnonce':'', 'realm':'', 'nonce':'','opaque':'','qop':''};\nvar periodicCheckNetworkFunc = null;\nvar do_validate_session = true;\nvar oem_branding_logo_file = '';\nvar oem_branding_eulas = [];\nvar oem_branding_eulas_datetime = [];\nvar oem_branding_cookies_names = [];\nvar isLoadingErrorModalShown              = false;\n\n//////////////////////////////\n// getCookie and acceptedPrivacy are used by .config, .run, controller.....\n//     Didn't find a way to define them in any kind of service (factory, provider, ...) yet.\n/////////////////////////////\nfunction getCookie(cname) {\n    var name = cname + \"=\";\n    var ca = document.cookie.split(';');\n    for (var i=0; i < ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0)==' ') {\n            c = c.substring(1);\n        }\n        if (c.indexOf(name) === 0) {\n            return c.substring(name.length,c.length);\n        }\n    }\n    return \"\";\n}\n\nfunction acceptedPrivacy(){\n    return getCookie('privacy');\n}\n\nfunction authenticate($q, $rootScope, $state, $timeout) {\n    if(bypass_auth){\n        return true;\n    }\n    if ($rootScope.loggedin) {\n        // Resolve the promise successfully\n        return $q.when();\n    } else {\n        // The next bit of code is asynchronously tricky.\n        $timeout(function() {\n            // This code runs after the authentication promise has been rejected.\n            // Go to the log-in page\n            console.log(\"unauthenticated request: routing to welcome page\");\n            $state.go('welcome.login');\n        });\n        return $q.reject();\n    }\n}\n\n////////////////////////\n// The following are for the case when the web response has status = -1 (no connection to gateway server), status = 408 (request timeout), or 401 (access denied)\n//      If we are in periodic checking to poll for work results, we will give it some grace period.\n///////////////////////\nfunction setupNoConnection(start) {\n    if (start) {\n        // make the initial time way in the future... 10 days in the future\n        response_target_error_start_time = new Date();\n        response_target_error_start_time.setDate(response_target_error_start_time.getDate() + 10);\n\n        start_trigger_no_connection = true;\n        started_periodic_checking = false;\n    } else {\n        start_trigger_no_connection = false;\n        started_periodic_checking = false;\n    }\n}\n\nfunction setupPeriodicChecking(start) {\n    started_periodic_checking = start;\n}\n\nfunction setResponseErrorTime(has_error) {\n    if (has_error) {\n        var currentTime = new Date();\n        var diffTime = currentTime.getTime() - response_target_error_start_time.getTime();\n        if (diffTime < 0) {\n            // This is the first error.\n            response_target_error_start_time = new Date();\n        } else {\n            // This is not the first error. Do nothing.\n        }\n    } else {\n        // make the initial time way in the future... 10 days in the future\n        response_target_error_start_time = new Date();\n        response_target_error_start_time.setDate(response_target_error_start_time.getDate() + 10);\n    }\n}\n\nfunction checkResponseErrorReport() {\n    var currentTime = new Date();\n    var diffTime = currentTime.getTime() - response_target_error_start_time.getTime();\n    var diffTimeInSeconds = diffTime / 1000;\n\n    if (started_periodic_checking) {\n        // This is in periodic checking to pull work result, we give it some grace period (3 min).\n        if (diffTimeInSeconds >= (60 * 3)) {\n            return true; // report yes error\n        } else {\n            return false; // report no error\n        }\n    } else {\n        // If this is not periodic checking to pull work result, report immediately\n        return true; // report yes error\n    }\n}\n\n\n////////////////////////\n//  The main module\n///////////////////////\n\nvar iotgatewayhub = angular.module(\"iotgatewayhub\",['ui.router','ui.bootstrap','ngPasswordStrength', 'chart.js', 'perfect_scrollbar', 'timer'])\n.config(function ($stateProvider, $urlRouterProvider, $httpProvider) {\n    var accepted_privacy = acceptedPrivacy();\n    if (accepted_privacy) {\n        $urlRouterProvider.otherwise(\"/welcome/login\");\n    } else {\n        $urlRouterProvider.otherwise(\"/welcome/privacy\"); //default is to redirect to login page\n    }\n\n    // provider needs to be inject into .config, not .run.\n    // This is global for all $http.\n    // httpRequestsInterceptor is a factory service.\n    $httpProvider.interceptors.push('httpRequestsInterceptor');\n})\n.factory('mqttClient',[function(){\n    var client =  {};\n    client.connect = function(){\n        console.log(\"CONNECTING\");\n    };\n    var factory = {};\n    factory.get = function(){\n        return client;\n    };\n    return factory;\n}])\n.run(function ($rootScope, $state, $location, $window, $uibModal, httpRequestsService) {\n    console.log('Intel IoT Gateway Development Hub');\n\n    function resolveFromUrl(url) {\n        var states = $state.get();\n        for(var i = 0, len = states.length; i< len; i++ ){\n            if(states[i] && states[i].url === url){\n                console.log(\"statename:\"+states[i].name);\n                return states[i].name;\n            }\n        }\n    }\n\n    var accepted_privacy = acceptedPrivacy();\n    if (accepted_privacy) {\n        if( requested_url && requested_url.indexOf('dashboard') > -1){\n            $rootScope.redirectState = resolveFromUrl(requested_url);\n        }\n    } else {\n        $location.path('/welcome/privacy');\n    }\n\n    $rootScope.$on('$locationChangeStart', function(event) {\n        if(!acceptedPrivacy()){\n            //event.preventDefault();\n            $location.path('/welcome/privacy');\n        }\n    });\n\n\n    $rootScope.$on(\"Gateway_Not_Reachable\", function (event) {\n        console.log(\"Get event: Gateway_Not_Reachable!\");\n\n        // Abort all requests\n        httpRequestsService.abortAllRequests();\n\n        var no_connection_template =\n            '<div class=\"admin-step\">' +\n                '<div class=\"row\">' +\n                    '<div class=\"col-md-12\">' +\n                        '<h1>Intel® IoT Gateway Developer Hub cannot reach the gateway!</h1>' +\n                    '</div>' +\n                '</div>' +\n                '<div class=\"row\">' +\n                    '<div class=\"col-md-12\">' +\n                        '<div class=\"description\">Please check gateway status, network connection, and then refresh or try again later. Warning: Your previous task may still be running on the gateway, and IoT Gateway Developer Hub may not reflect its running status.</div>' +\n                    '</div>' +\n                '</div><!-- .row -->' +\n                '<div class=\"row admin-modal-btn-row\">' +\n                    '<div class=\"col-md-12\">' +\n                        '<div class=\"row\">' +\n                            '<div class=\"blue-button-md admin-modal-btn center-button\" ng-click=\"clickRefresh()\">Refresh</div>' +\n                        '</div>' +\n                    '</div>' +\n                '</div><!-- .row -->' +\n            '</div>';\n\n        var modalInstance = $uibModal.open({\n            template: no_connection_template, // for offline, cannot use templateURL.\n            animation: true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function ($scope, $window) {\n                $scope.clickRefresh = function () {\n                    modalInstance.dismiss('cancel');\n                    $window.location.reload(); // refresh the current page.\n\n                    //$window.location.href = '/'; // this is for Firefox to work.\n\n                    // For Firefox,  $location.path or $window.location.href will not be done before $window.location.reload is run.\n                    // Therefore, $window.location.reload will reload the current URL.\n                    //$window.location.reload();\n                };\n            }\n        });\n\n        /* window alert is blocking the whole web browser (for all tabs).... This is not ideal.\n        $window.alert('Developer Hub cannot reach gateway!\\n\\nPlease check gateway status, network connection, and then refresh or try again later.\\n\\nWarning: The task you arer running may still be running on the gateway. However, Developer Hub may not be able to sync up to that status if the task is still running.');\n        */\n    });\n});\n","function changePassword($scope) {\n    $scope.update = {\n        username: null,\n        password: null,\n        newpassword: null,\n        confirmnewpassword: null\n    };\n\n    $scope.changePassword = function(){\n\n        $scope.error_message = null; //reset so error message goes away\n        console.log(\"hub changing password #2029a\");\n\n        var _username           = $scope.update.username;\n        var _password           = $scope.update.password;\n        var _newpassword        = $scope.update.newpassword;\n        var _confirmnewpassword = $scope.update.confirmnewpassword;\n\n        if(!_newpassword || _newpassword.length<3){\n            $scope.error_message = \"The new password must be at least 3 characters long.\";\n        }else if(_newpassword!==_confirmnewpassword){\n            $scope.error_message = \"The new passwords do not match.\";\n        }else{\n            $http({\n                method: 'PUT',\n                url:    '/api/auth',\n                data:  JSON.stringify({\"username\":_username,\"password\":_password,\"newpassword\":_newpassword}),\n                headers : {\n                    'Content-type' : 'application/json'\n                }\n            }).then(function successCallback(response) {\n\n            if(response.data.status==='success'){\n                console.log(\"hub change password succeded #2029b\");\n                $scope.openConfirmChangePasswordModal(_username);\n                modalInstance.dismiss('cancel');\n            }else{\n                console.log(\"hub change password failed #2029F\");\n                $scope.error_message = \"ERROR: \"+response.data.error;\n                //what to do if fails?\n                }\n            }, function errorCallback(response) {\n                console.log(\"hub change password failed #2029F\");\n                $scope.error_message = \"ERROR: \"+response;\n\n            });\n        }\n\n    };\n}","function configureProxy($scope,$uibModal){\n     $scope.getProxySettings(function(){\n         $scope.cancelText=\"Cancel\";\n         $scope.isInsideModal = true;\n\n         $scope.skipSettings = function(){\n             networkSettingsModal.dismiss();\n         };\n\n         $scope.doneSuccessCallback = function(){\n             networkSettingsModal.dismiss();\n         };\n\n         console.log(\"show network settings from dashboard\");\n         var networkSettingsModal = $uibModal.open({\n             templateUrl: '/partials/hub.networksettings.dashboard.ng.html?version=' + gui_version,\n             animation: true,\n             size: 'lg',\n             scope: $scope,\n             backdrop: modal_light_dismiss_enabled\n         });\n\n         $scope.closeModal = function(){\n             console.log(\"hub canceling os upgrade #9033b\");\n             networkSettingsModal.dismiss('cancel');\n         };\n     });\n }","function confirmRestartOS($scope,$uibModal){\n    var modalInstance = $uibModal.open({\n        templateUrl: 'partials/hub.confirm.restart.os.ng.html?version=' + gui_version,\n        animation:    true,\n        size: 'lg',\n        backdrop: modal_light_dismiss_enabled,\n        scope: $scope,\n        controller: function($scope,$state,$http,$rootScope,$timeout){\n            $scope.restarting_os     = false;\n            $scope.restarted_os      = false;\n            $scope.message           = '';\n            $scope.error_message     = '';\n\n            $scope.restartOS = function(){\n                if($scope.restarting_os){\n                    return;\n                }\n                $scope.error_message = '';\n                $scope.restarting_os = true;\n                $scope.restarted_os  = false;\n                $scope.rebootGateway(function successCallback(response) {\n                    //no defined return json for this. if 200 OK then assume success of call (according to Nick)\n                    console.log(\"reboot gateway process was successful  #1871b\");\n                    $scope.restarting_os = false;\n                    $scope.restarted_os  = true;\n                    $scope.message       = \"The reboot process was successful. Forwarding to login in 10 seconds...\";\n                },function errorCallback(response) {\n                    $scope.error_message = 'Rebooting gateway failed! Please manually reboot the gateway!';\n                    console.log(\"reboot gateway  process failed  #1871E\");\n                }, restart_welcome_latency_milliseconds);\n            };\n\n            $scope.closeModal = function(){\n                console.log(\"close confirm restart modal\");\n                modalInstance.dismiss('cancel');\n            };\n        }\n    });\n}","function enableHttps($scope,$uibModal){\n    var modalInstance = $uibModal.open({\n        templateUrl: 'partials/hub.confirm.toggle.security.ng.html?version=' + gui_version,\n        animation:    true,\n        size: 'lg',\n        backdrop: modal_light_dismiss_enabled,\n        scope: $scope,\n        controller: function($scope,$state,$http,$rootScope){\n            $scope.toggled_security = false;\n\n            $scope.closeModal = function(){\n                modalInstance.dismiss('cancel');\n            };\n\n            $scope.toggleSecurity = function(){\n                if($scope.toggling_security || $scope.toggled_security){\n                    return;\n                }\n\n                $scope.toggling_security = true;\n\n                var _enable = 'true';\n                if($scope.security_enabled){\n                    _enable = 'false';\n                }\n\n                // briefly cancel the network checking so that no connection error won't pop-up.\n                // When we go to state.hub again, it will be rescheduled.\n                $scope.stopCheckingNetwork();\n                tempURL = '/api/sa?enable=' + _enable;\n                workerProcessRestService.performGeneralExecution('PUT', tempURL, false, false, null,\n                    function successCallback(data) {\n                        $scope.toggling_security = false;\n                        $scope.toggled_security = true;\n                        setTimeout(function(){\n                            if(!$scope.security_enabled){\n                                window.location = 'https://'+window.location.hostname+\":\"+https_port;\n                            }else{\n                                window.location = 'http://'+window.location.hostname;\n                            }\n                        },toggle_security_timeout_milliseconds);\n                    }, function errorCallback(errorMessage) {\n                        $scope.toggling_security = false;\n                        $scope.error_message = errorMessage;\n                        $scope.startCheckingNetwork();\n                    }, rest_check_interval_milliseconds);\n            };\n        }\n    });\n}","config_sensor = {\n    broker: {\n\t\thost:    null, // was window.location.hostname, but set from $scope.device wan ip address (see $scope.mqttInit in app.js)\n\t\twssPort: 9002,\n\t\twsPort:  9001, \n\t\ttopic: \"/sensors\",\n\t\treconnectTimeout: 5000,\n\t\treconnectInterval: 3\n    },\n    charts: [\n\t{\n\t    title: \"Temperature\",\n\t    chartType: \"line\",\n\t    units: \"F\",\n\t    min: \"0\",\n\t    max: \"100\",\n\t    targetLow: \"30\",\n\t    targetHigh: \"60\",\n\t    points: \"50\"\n\t},\n\t{\n\t    title: \"Humidity\",\n\t    chartType: \"gauge\",\n\t    units: \"%\",\n\t    min: \"0\",\n\t    max: \"100\",\n\t    targetLow: \"30\",\n\t    targetHigh: \"60\",\n\t    points: \"1\"\n\t}\n    ]\n};\n","function launchLaunchManager($scope){\n    /* I know, I know. It conforms to all the other options in admin so I'll have to live with it. */\n    $scope.launchQuickTools('cloudcmd');\n}","iotgatewayhub.directive( 'dynamicContentLoad', function() {\n    return {\n        restrict: 'A',\n        template: '<ng-include src=\"getTemplateUrl()\"/>',\n        link: function(scope, element, attr) {\n            scope.$watch('dynamicChangeViewPartial', function(data) {\n                scope.getTemplateUrl = function () {\n                    return data ? data : null;\n                };\n            }, true);\n        }\n    };\n});\n","// Used in HTML as hub-dashboard-linegraph\niotgatewayhub.directive('hubDashboardLinegraph', function () {\n    return {\n        restrict: 'E',\n        templateUrl: 'partials/hub.dashboard.linegraph.ng.html?version=' + gui_version,\n        replace: true,\n        scope: {\n              latestData: '=',\n              scaleSteps: '=',\n              scaleStepWidth: '=',\n              scaleStartValue: '=',\n              pointsToShow: '=',\n              units: '=',\n              connected: '='\n        },\n        link: function ($scope, $elem, attrs) {\n            var datasets = {\n\n            };\n\n            $scope.connected = true;\n\n            var setOptions = function() {\n\n                var overrideScale = ($scope.scaleSteps !== null &&\n                            $scope.scaleSteps !== undefined &&\n                            $scope.scaleStepWidth !== null &&\n                            $scope.scaleStepWidth !== undefined &&\n                            $scope.scaleStartValue !== null &&\n                            $scope.scaleStartValue !== undefined);\n\n                $scope.options = {\n                    animation: false,\n                    showScale: true,\n                    showTooltips: false,\n                    maintainAspectRatio: false,\n\n                    scaleOverride: overrideScale,\n                    scaleSteps: parseInt($scope.scaleSteps),\n                    scaleStepWidth: parseFloat($scope.scaleStepWidth),\n                    scaleStartValue: parseFloat($scope.scaleStartValue),\n                    scaleFontColor: \"#ffffff\",\n\n                    // String - Message for empty data\n                    emptyDataMessage: \" \",\n\n                    ///Boolean - Whether grid lines are shown across the chart\n                    scaleShowGridLines : true,\n\n                    //String - Colour of the grid lines\n                    scaleGridLineColor : \"rgba(0,0,0,.05)\",\n\n                    //Number - Width of the grid lines\n                    scaleGridLineWidth : 1,\n\n                    //Boolean - Whether to show horizontal lines (except X axis)\n                    scaleShowHorizontalLines: true,\n\n                    //Boolean - Whether to show vertical lines (except Y axis)\n                    scaleShowVerticalLines: false,\n\n                    // String - scale type: \"number\" or \"date\"\n                    scaleType: \"date\",\n\n                    // Boolean - Whether to use UTC dates instead local\n                    useUtc: false,\n\n                    // String - short time format (used for scale labels)\n                    scaleTimeFormat: \" \",\n\n                    //Boolean - Whether the line is curved between points\n                    bezierCurve : true,\n\n                    //Number - Tension of the bezier curve between points\n                    bezierCurveTension : 0.4,\n\n                    //Boolean - Whether to show a dot for each point\n                    pointDot : false,\n\n                    //Number - Radius of each point dot in pixels\n                    pointDotRadius : 2,\n\n                    //Number - Pixel width of point dot stroke\n                    pointDotStrokeWidth : 1,\n\n                    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n                    pointHitDetectionRadius : 1,\n\n                    //Boolean - Whether to show a stroke for datasets\n                    datasetStroke : true,\n\n                    //Number - Pixel width of dataset stroke\n                    datasetStrokeWidth : 3,\n\n                    //Boolean - Whether to fill the dataset with a colour\n                    datasetFill : false,\n\n                    legendTemplate : \"<div></div>\"\n\n                };\n            };\n\n            var trimHistory = function () {\n                while ($scope.scatterChart.datasets[0].points.length > $scope.pointsToShow) {\n                    $scope.scatterChart.datasets[0].removePoint(0);\n                    $scope.dataHistory[0].data.shift();\n                }\n                // if ($scope.dataHistory[0].data) {\n                //     while ($scope.dataHistory[0].data.length > $scope.pointsToShow) {\n                //         $scope.dataHistory[0].data.shift();\n                //     }\n                // }\n            };\n\n            $scope.dataHistory = [\n                {\n                    label: '',\n                    strokeColor: '#ffffff',\n                    data: [\n                        {x: $scope.latestData.x, y: $scope.latestData.y}\n                    ]\n                }\n            ]; // must be 1 level deep to provide data in a series for chart.js\n\n            setOptions();\n            var chartCanvasFind = $elem.find(\"canvas\");\n            console.log(\"hub.dashboard.linegraph.js \", chartCanvasFind, chartCanvasFind.length);\n            var canvasContext = chartCanvasFind[0].getContext(\"2d\");\n            $scope.scatterChart = new Chart(canvasContext).Scatter($scope.dataHistory, $scope.options);\n\n            if ($scope.latestData !== null && $scope.latestData !== undefined) {\n                $scope.scatterChart.datasets[0].addPoint($scope.latestData.x, $scope.latestData.y);\n                $scope.dataHistory[0].data.push({x:$scope.latestData.x, y:$scope.latestData.y});\n            }\n\n            $scope.series = [\"\"];\n\n            $scope.$watchGroup(['scaleStepWidth', 'scaleStartValue', 'scaleSteps'], function() {\n\n                setOptions();\n                $scope.scatterChart.destroy();\n                $scope.scatterChart = new Chart(canvasContext).Scatter($scope.dataHistory, $scope.options);\n            });\n\n            $scope.$watch('latestData', function() {\n\n                if ($scope.latestData !== null && $scope.latestData !== undefined) {\n                   $scope.scatterChart.datasets[0].addPoint($scope.latestData.x,$scope.latestData.y);\n                   $scope.dataHistory[0].data.push({x:$scope.latestData.x, y:$scope.latestData.y});\n                }\n                trimHistory();\n\n                $scope.scatterChart.update();\n            });\n\n            $scope.$watch('pointsToShow', function() {\n               trimHistory();\n               $scope.scatterChart.update();\n            });\n\n            $scope.$watch('connected', function() {\n                if ($scope.connected) {\n                    $scope.dataHistory[0].strokeColor = \"#ffffff\";\n                } else {\n                    $scope.dataHistory[0].strokeColor = \"#7f868c\";\n                }\n                $scope.scatterChart.destroy();\n                $scope.scatterChart = new Chart(canvasContext).Scatter($scope.dataHistory, $scope.options);\n            });\n\n            setOptions();\n        }\n    };\n});","// Used in HTML as hub-dashboard-radial-graph\niotgatewayhub.directive('hubDashboardRadialGraph', function () {\n    return {\n        restrict: 'E',\n        templateUrl: 'partials/hub.dashboard.radialgraph.ng.html?version=' + gui_version,\n        replace: true,\n        scope: {\n              data: '=',\n              units: '=',\n              upperRange: '=',\n              lowerRange: '=',\n              connected: '=',\n        },\n        link: function ($scope, $elem, attrs) {\n            console.log($scope.scaleSteps);\n\n            function createDataPair() {\n                $scope.dataPair = [($scope.upperRange-$scope.lowerRange)-$scope.data, $scope.data];\n            }\n\n            $scope.$watch('data', function() {\n                createDataPair();\n            });\n\n            $scope.options = {\n                showTooltips: false,\n\n                //Boolean - Whether we should show a stroke on each segment\n                segmentShowStroke : true,\n\n                //String - The colour of each segment stroke\n                segmentStrokeColor : \"#003c71\",\n\n                //Number - The width of each segment stroke\n                segmentStrokeWidth : 4,\n\n                //Number - The percentage of the chart that we cut out of the middle\n                percentageInnerCutout : 80, // This is 0 for Pie charts\n\n                //Number - Amount of animation steps\n                animationSteps : 10,\n\n                //String - Animation easing effect\n                animationEasing : \"easeOutBounce\",\n\n                //Boolean - Whether we animate the rotation of the Doughnut\n                animateRotate : false,\n\n                //Boolean - Whether we animate scaling the Doughnut from the centre\n                animateScale : false,\n            };\n\n            $scope.doughnutColors = [\"#003c71\",\"#8DC449\"];\n            $scope.labels = [\"\",\"\"];\n\n            $scope.$watch('connected', function() {\n                if ($scope.connected) {\n                    $scope.doughnutColors = [\"#003c71\",\"#8DC449\"];\n                } else {\n                    $scope.doughnutColors = [\"#003c71\",\"#7f868c\"];\n                }\n            });\n        }\n    };\n});","// In HTML, this will be used as hub-dashboard-sensor.\niotgatewayhub.directive('hubDashboardSensor', function () {\n    return {\n        restrict: 'E',\n        templateUrl: 'partials/hub.dashboard.sensor.ng.html?version=' + gui_version,\n        link: function ($scope, elem, attrs) {\n            console.log(\"hubDashboardSensor \", $scope);\n        }\n    };\n});","// Used in HTML as hub-loading\niotgatewayhub.directive('hubLoading', function () {\n    return {\n        restrict : 'E',\n        templateUrl: 'partials/hub.loading.ng.html?version=' + gui_version,\n\n        controller: function ($scope, $http) {\n            $scope.loadMessage = \"Loading..\";\n            $scope.showMessage = true; // for modern browsers\n            console.log(\"hubLoading \", $scope);\n        }\n    };\n});","// Used in HTML as hub-network-settings\niotgatewayhub.directive('hubNetworkSettings',function(){\n    return {\n        url:         '/hub/networksettings', \n        templateUrl: '/partials/hub.networksettings.ng.html?version=' + gui_version,\n        resolve:     {},\n        controller: function($scope,$state,$http,$rootScope,$timeout,workerProcessRestService){\n\n            $scope.tmpSettings = {\n                single_url: $scope.settings.proxy.single_url,\n                single_port: $scope.settings.proxy.single_port,\n\n                http_url: $scope.settings.proxy.http_url,\n                http_port: $scope.settings.proxy.http_port,\n\n                https_url: $scope.settings.proxy.https_url,\n                https_port: $scope.settings.proxy.https_port,\n\n                ftp_url: $scope.settings.proxy.ftp_url,\n                ftp_port: $scope.settings.proxy.ftp_port,\n\n                socks_url: $scope.settings.proxy.socks_url,\n                socks_port: $scope.settings.proxy.socks_port,\n\n                no_proxy: $scope.settings.proxy.no_proxy\n            };\n\n            function init(){\n                if(!authorization.username){\n                   $state.go('welcome.login',{});\n                }\n\n                var defaults ={\n                    saveText: \"Ok\",\n                    cancelText: \"Cancel\",\n                    insideModal:false,\n                    hideTestSettings:true,\n                    maintainContextAfterSave: false\n                };\n\n                if ($scope.cancelText) defaults.cancelText = $scope.cancelText;\n\n                // JQuery's extend to add more properties to $scope object\n                $.extend($scope, defaults,{\n                    isSaving: false,\n                    barMessage: 'Saving network settings and adding Wind River repositories if needed. This may take a few minutes.',\n                    isUpdatingChannelsFailed: false,\n                    showSaveResult: false,\n                    networkSettingsTest: {\n                        running:false,\n                        status:\"Test settings\",\n                        result:\"\",\n                        success:null,\n                        isVisible:false\n                    },\n                    saveResult:{\n                        message:\"\",\n                        success:null,\n                        isVisible:false\n                    }\n                });\n            }\n\n            init();\n\n            $scope.onSaveSuccess = function(result){\n                $scope.isSaving = false;\n                $scope.saveResult.isVisible = true;\n                $scope.saveResult.success = true;\n                $scope.saveResult.message = \"Saved settings\";\n                $timeout(function(){\n                    $scope.saveResult.isVisible = false;\n                }, linger_info_timeout_milliseconds);\n            };\n\n            $scope.onSaveFail = function(result){\n                $scope.$emit(\"hub.unlockModal\");\n\n                $scope.isSaving = false;\n                $scope.saveResult.isVisible = true;\n                $scope.saveResult.success = false;\n                $scope.saveResult.message = result.message;\n                $timeout(function(){\n                    $scope.saveResult.isVisible = false;\n                }, linger_info_timeout_milliseconds);\n            };\n\n            $scope.nextAction = function(){\n                var blockUI = true;\n\n                $scope.$emit(\"hub.lockModal\", [$scope]);\n\n                $scope.isSaving =true;\n\n                // should ideally be passed to applyProxySettings as a model\n                $scope.settings.proxy = $scope.tmpSettings;\n\n                function successApplyProxySettings(response) {\n                    // update repos/channels\n                    $scope.barMessage = 'Refreshing the installed package list. This may take a few minutes.';\n                    tempURL = '/api/repository';\n                    workerProcessRestService.performGeneralExecution('PUT', tempURL, true, false, null,\n                        function successCallback(data) {\n                            try {\n                                var p_list = JSON.parse(data.p_list);\n                                if ($scope.connected){\n                                    $scope.setPackages('True', p_list);\n                                }\n                                else{\n                                    $scope.setPackages('False', p_list);\n                                }\n                            } catch(err) {\n                                // ignore error\n                                console.log(err.message);\n                            }\n\n                            $scope.$emit(\"hub.unlockModal\");\n\n                            if ($scope.maintainContextAfterSave) {\n                                $scope.onSaveSuccess(response);\n                            } else {\n                                $scope.doneSuccessCallback(response);\n                            }\n\n                        }, function errorCallback(errorMessage) {\n                            $scope.$emit(\"hub.unlockModal\");\n\n                            $scope.barMessage = errorMessage;\n                            $scope.isUpdatingChannelsFailed = true;\n                        }, rest_check_interval_milliseconds_m);\n                }\n\n                $scope.applyProxySettings(successApplyProxySettings,  $scope.onSaveFail);\n            };\n\n            //$scope.networkSettingsTest = {running:true,status:'fail'};\n\n            $scope.testProxySettingsCallback = function(result){\n                $scope.networkSettingsTest.result = result ? \"Connection established!\": \"Connection failed.\";\n                $scope.networkSettingsTest.success = !!result;\n\n                $scope.networkSettingsTest.running=false;\n\n                $timeout(function(){\n                     $scope.networkSettingsTest.isVisible = false;\n                    $scope.networkSettingsTest.success =false;\n                },linger_info_timeout_milliseconds);\n            };\n\n            $scope.testSettings = function(){\n                $scope.networkSettingsTest.isVisible = true;\n                $scope.networkSettingsTest.running=true;\n                $scope.networkSettingsTest.result=\"Testing..\";\n                $scope.testProxySettings(\n                    function(){$scope.testProxySettingsCallback(true);},\n                    function(){$scope.testProxySettingsCallback(false);});\n            };\n        }\n    };\n});","// Used in HTML as show-oem-on-load\niotgatewayhub.directive('showOemOnLoad', function() {\n    return {\n        restrict: 'A',\n        link: function(scope, element, attrs) {\n            element.bind('load', function() {\n                scope.hideOEMBranding = false;\n            });\n        }\n    };\n});\n","// Used in HTML as ps-mouse-over\niotgatewayhub.directive('psMouseOver', function () {\n    return {       \n        link: function(scope, element) {\n            element.bind(\"mouseover\", function(e){\n            \tconsole.log( 'mousever');\n                e.stopPropagation();\n                e.preventDefault();    \n                element.perfectScrollbar('update');\n            });   \n        }\n    };\n});","/*angular.module('app', ['ngAnimate'])\n\n.controller('FormCtrl', ['$scope', function($scope) {\n  // hide error messages until 'submit' event\n  $scope.submitted = false;\n  // hide success message\n  $scope.showMessage = false;\n  // method called from shakeThat directive\n  $scope.submit = function() {\n    // show success message\n    $scope.showMessage = true;\n  };\n}])\n*/\n// Used in HTML as shake-that\niotgatewayhub.directive('shakeThat', ['$animate', function($animate) {\n\n    return {\n        require: '^form',\n        scope: {\n            submit: '&',\n            submitted: '='\n        },\n\n        link: function(scope, element, attrs, form) {\n\n            // listen on submit event\n            element.on('submit', function() {\n                // tell angular to update scope\n                scope.$apply(function() {\n                    // everything ok -> call submit fn from controller\n                    if (form.$valid) return scope.submit();\n\n                    // show error messages on submit\n                    scope.submitted = true;\n                    // shake that form\n                    $animate.addClass(element, 'shake', function() {\n                        $animate.removeClass(element, 'shake');\n                    });\n                });\n            });\n        }\n    };\n\n}]);","iotgatewayhub.service('httpRequestsService', function($q){\n\n    // We use service here because we need to keep track of this \"toBeAbortedPromises\" array.\n    // For Service, an object will be instantiated.\n    var toBeAbortedPromises = [];\n\n    function customTimeout() {\n        var newPromise = $q.defer();\n        toBeAbortedPromises.push(newPromise);\n        return newPromise.promise;\n    }\n\n    function abortAllRequests() {\n        angular.forEach(toBeAbortedPromises, function (eachPromise){\n            eachPromise.promise.isAbortedByUs = true;\n            eachPromise.resolve();\n        });\n        // clear the array, and still keep the array object\n        toBeAbortedPromises.length = 0;\n    }\n\n    function removeRequest(response) {\n        // Once the web request has a response, we should remove it from the tracking array.\n        try {\n            // skip is response.config.timeout is not a promise\n            if (typeof response.config.timeout === 'number') {\n                return;\n            } else if (response.config.timeout === undefined) {\n                return;\n            }\n\n            // try to find a match in the recorded array\n            var target_index = -1;\n            var count = 0;\n            angular.forEach(toBeAbortedPromises, function (eachPromise){\n                if (eachPromise.promise === response.config.timeout) {\n                    target_index = count;\n                }\n                count = count + 1;\n            });\n            if (target_index > -1) {\n                // found, so remove it\n                toBeAbortedPromises.splice(target_index, 1);\n            }\n        } catch (err) {\n            // ignore error\n        }\n    }\n\n    return {\n        customTimeout: customTimeout,\n        abortAllRequests: abortAllRequests,\n        removeRequest: removeRequest\n    };\n});\n\niotgatewayhub.factory('httpRequestsInterceptor', ['$rootScope', '$q', 'httpRequestsService', function($rootScope, $q, httpRequestsService){\n    return {\n        'request': function (config) {\n            //console.log('############### req s ####################');\n            config = config || {};\n            if (typeof config.url === 'string') {\n                if (config.url.indexOf('.ng.html') > -1) {\n                    // Note:  For Chrome, if there is no connection, it will immediately abort the request and returns status = -1.\n                    //      However, For Firefox, if there is no connection,it queues the request as pending request. For user, if the user\n                    //      wants to open a GUI, the GUI may appear in-responsive to the user.\n                    //      Therefore, we set some timeout for html request.\n                    //console.log('dealing with static content');\n                    config.timeout = html_content_timeout_milliseconds;\n                }\n            }\n            if (config.timeout === undefined) {\n              // If no specific timeout is assigned, we use our custom timeout.\n              //console.log('custom promise');\n              config.timeout = httpRequestsService.customTimeout();\n            }\n            return config;\n        },\n        //'requestError': function (rejection) {\n        //    console.log('############### resp f ####################');\n        //    console.log(rejection);\n        //    return $q.reject(rejection);\n        //},\n        'response': function (response) {\n            //console.log('############### resp s ####################');\n            setResponseErrorTime(false);\n            httpRequestsService.removeRequest(response);\n            return response;\n        },\n        'responseError': function (rejection) {\n            //console.log('############### resp f ####################');\n            //console.log(rejection);\n            if (rejection.config.timeout.isAbortedByUs) {\n                // In this case, this error is due to we aborting this request.... so we should not raise error again.\n                // return an never-resolving promise as we do not return success or error.\n                return $q.defer().promise;\n            }\n\n            httpRequestsService.removeRequest(rejection);\n\n            if ((rejection.status === -1) || (rejection.status === 401) || (rejection.status === 408)) {\n                setResponseErrorTime(true);\n            } else {\n                // not targeted error\n                setResponseErrorTime(false);\n            }\n\n            if (rejection.status === -1) {\n                // Check for IE, Firefox, and Chrome.\n                //\n                // This is due to not reaching the backend server.\n                // In this scenarios,\n                //      For all browsers, GET request should result in this right away.\n                //      For some browser, POST/PUT/DELETE request will result in this right away.\n                //      However, for some browser (Firefox, e.g.), POST/PUT/DELETE will be queued (and keep trying) until the timeout time is reached.\n                // We need to:\n                //      1. In the handler of \"Gateway_Not_Reachable\",  cancel/abort all pending/queued requests.\n                //      2. In uibModal.open or state (GET request with .ng.html url), we set timeout so that we can get response of status = -1.\n                if (start_trigger_no_connection) {\n                    var to_report = checkResponseErrorReport();\n                    if (to_report) {\n                        $rootScope.$broadcast(\"Gateway_Not_Reachable\");\n                    }\n                }\n            }\n\n            return $q.reject(rejection);\n        }\n    };\n}]);\n","iotgatewayhub.factory('workerProcessRestService', ['$http', '$uibModal', '$rootScope', function($http, $uibModal, $rootScope){\n    var workerProcessRestService = {};\n\n    function createWorkID() {\n        var randomNum = Math.random();\n        return randomNum.toString();\n    }\n\n    function checkPeriodicCheckingResponseError(response) {\n        var report = false;\n        var return_message = '';\n\n        if ((response.status === -1) || (response.status === 408) || (response.status === 401)) {\n            report = checkResponseErrorReport();\n            if (report) {\n                if (response.status === -1) {\n                    return_message = 'Cannot connect to the gateway server anymore!';\n                } else if (response.status === 408) {\n                    return_message = 'The request got timeout error: http status is 408!';\n                } else if (response.status === 401) {\n                    return_message = 'The request got access denied: http status is 401!';\n                } else {\n                    return_message = '';\n                }\n            } else {\n                return_message = '';\n            }\n        } else {\n            return_message = 'Something went wrong: HTTP response status is ' + response.status;\n        }\n\n        // empty string means : do not report\n        return return_message;\n    }\n\n    function informGeneralError(titleMessage, descMessage, barBeforeMessage) {\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.general.checking.inprogress.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.title_message = titleMessage;\n                $scope.description_message = descMessage;\n                $scope.bar_before_message = barBeforeMessage;\n                $scope.hasError = true;\n\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    }\n\n    workerProcessRestService.informGeneralChecking = function(httpMethod, httpURL, noParameter, httpJSON, httpBody, titleMessage, descMessage, barBeforeMessage, realSuccessCallback, checkPeriod) {\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.general.checking.inprogress.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function($scope,$state,$http,$rootScope){\n                console.log(\"hub controller: API call \" + httpMethod + \" \" + httpURL);\n\n                $scope.title_message = titleMessage;\n                $scope.description_message = descMessage;\n                $scope.bar_before_message = barBeforeMessage;\n                $scope.hasError = false;\n\n                var workID = createWorkID();\n\n                var http_call = {\n                    method: httpMethod\n                };\n\n                if (httpJSON === true) {\n                    // id and is_checking are inside the request body\n                    httpBody.id = workID;\n                    httpBody.is_checking = 'False';\n                    http_call.url = httpURL;\n                    http_call.headers = {'Content-type' : 'application/json'};\n                    http_call.data = JSON.stringify(httpBody);\n                } else {\n                    // id and is_checking are in the url directly\n                    if (httpMethod === 'GET') {\n                        if (noParameter === true) {\n                           http_call.url = httpURL + '?is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\n                        } else {\n                            http_call.url = httpURL + '&is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\n                        }\n                    } else {\n                        if (noParameter === true) {\n                            http_call.url = httpURL + '?is_checking=False&id=' + workID;\n                        } else {\n                            http_call.url = httpURL + '&is_checking=False&id=' + workID;\n                        }\n                    }\n                }\n\n                function periodicChecking() {\n                    var http_call = {\n                        method: httpMethod\n                    };\n\n                    if (httpJSON === true) {\n                        // id and is_checking are inside the request body\n                        httpBody.id = workID;\n                        httpBody.is_checking = 'True';\n                        http_call.url = httpURL;\n                        http_call.headers = {'Content-type' : 'application/json'};\n                        http_call.data = JSON.stringify(httpBody);\n                    } else {\n                        // id and is_checking are in the url directly\n                        if (httpMethod === 'GET') {\n                            if (noParameter === true) {\n                                http_call.url = httpURL + '?is_checking=True&id=' + workID + '&nocache=' + new Date().getTime();\n                            } else {\n                                http_call.url = httpURL + '&is_checking=True&id=' + workID + '&nocache=' + new Date().getTime();\n                            }\n                        } else {\n                            if (noParameter === true) {\n                                http_call.url = httpURL + '?is_checking=True&id=' + workID;\n                            } else {\n                                http_call.url = httpURL + '&is_checking=True&id=' + workID;\n                            }\n                        }\n                    }\n\n                    console.log(\"hub controller: API checking call \" + httpMethod + \" \" + http_call.url);\n                    $http(http_call).then(\n                        function successCheckingCallback(response) {\n                            if (response.data.status === 'success') {\n                                console.log(\"hub controller: got work results\");\n                                setupPeriodicChecking(false);\n                                realSuccessCallback(response.data);\n                                modalInstance.dismiss('cancel');\n                            } else if (response.data.status === 'untrusted') {\n                                console.log(\"hub controller: got work results - untrusted\");\n                                setupPeriodicChecking(false);\n                                realSuccessCallback(response.data);\n                                modalInstance.dismiss('cancel');\n                            } else {\n                                if (response.data.in_progress === true) {\n                                    // check again if needed.\n                                    console.log(\"hub controller: cannot check work, still in progress\");\n                                    setupPeriodicChecking(true);\n                                    setTimeout(periodicChecking, checkPeriod);\n                                } else {\n                                    console.log(\"hub controller: cannot check work, error\");\n                                    setupPeriodicChecking(false);\n                                    informGeneralError(titleMessage, descMessage, \"The operation failed! \" + response.data.message);\n                                    modalInstance.dismiss('cancel');\n                                }\n                            }\n                        }, function errorCheckingCallback(response) {\n                            console.log(\"hub controller: cannot check work, error\");\n                            var temp_error_message = checkPeriodicCheckingResponseError(response);\n                            if (temp_error_message) {\n                                setupPeriodicChecking(false);\n                                informGeneralError(titleMessage, descMessage, temp_error_message);\n                                modalInstance.dismiss('cancel');\n                            } else {\n                                // do not report, keep checking\n                                setupPeriodicChecking(true);\n                                setTimeout(periodicChecking, checkPeriod);\n                            }\n                        });\n                }\n\n                $http(http_call).then(\n                    function successCallback(response) {\n                        if (response.data.status === 'success') {\n\n                            // start checking after some delay\n                            setupPeriodicChecking(true);\n                            setTimeout(periodicChecking, checkPeriod);\n\n                            console.log(\"hub controller: successfully submitted work\");\n                        } else {\n                            if (response.data.in_progress === true) {\n                                console.log(\"hub controller: cannot submit work, other work in progress\");\n                                var error_message = response.data.work_type + ' (run by another user) is still in progress!';\n                                informGeneralError(titleMessage, descMessage, error_message);\n                                modalInstance.dismiss('cancel');\n                            } else {\n                                console.log(\"hub controller: cannot submit work, error\");\n                                informGeneralError(titleMessage, descMessage, \"The operation failed! \" + response.data.message);\n                                modalInstance.dismiss('cancel');\n                            }\n                        }\n                    },function errorCallback(response){\n                        console.log(\"hub controller: cannot submit work, error\");\n                        informGeneralError(titleMessage, descMessage, \"Something went wrong: HTTP status \" + response.status);\n                        modalInstance.dismiss('cancel');\n                    });\n            }\n        });\n    };\n\n    workerProcessRestService.performGeneralExecution = function(httpMethod, httpURL, noParameter, httpJSON, httpBody, passedSuccessCallback, passedErrorCallback, checkPeriod) {\n        var workID = createWorkID();\n\n        var http_call = {\n            method: httpMethod\n        };\n\n        if (httpJSON === true) {\n            // id and is_checking are inside the request body\n            httpBody.id = workID;\n            httpBody.is_checking = 'False';\n            http_call.url = httpURL;\n            http_call.headers = {'Content-type' : 'application/json'};\n            http_call.data = JSON.stringify(httpBody);\n        } else {\n            // id and is_checking are in the url directly\n            if (httpMethod === 'GET') {\n                if (noParameter === true) {\n                    http_call.url = httpURL + '?is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\n                } else {\n                    http_call.url = httpURL + '&is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\n                }\n            } else {\n                if (noParameter === true) {\n                    http_call.url = httpURL + '?is_checking=False&id=' + workID;\n                } else {\n                    http_call.url = httpURL + '&is_checking=False&id=' + workID;\n                }\n            }\n        }\n\n        function periodicChecking() {\n            var http_call = {\n                method: httpMethod\n            };\n\n            if (httpJSON === true) {\n                // id and is_checking are inside the request body\n                httpBody.id = workID;\n                httpBody.is_checking = 'True';\n                http_call.url = httpURL;\n                http_call.headers = {'Content-type' : 'application/json'};\n                http_call.data = JSON.stringify(httpBody);\n            } else {\n                // id and is_checking are in the url directly\n                if (httpMethod === 'GET') {\n                    if (noParameter === true) {\n                        http_call.url = httpURL + '?is_checking=True&id=' + workID + '&nocache=' + new Date().getTime();\n                    } else {\n                        http_call.url = httpURL + '&is_checking=True&id=' + workID + '&nocache=' + new Date().getTime();\n                    }\n                } else {\n                    if (noParameter === true) {\n                        http_call.url = httpURL + '?is_checking=True&id=' + workID;\n                    } else {\n                        http_call.url = httpURL + '&is_checking=True&id=' + workID;\n                    }\n                }\n            }\n\n            console.log(\"hub controller: API checking call \" + httpMethod + \" \" + http_call.url);\n            $http(http_call).then(\n                function successCheckingCallback(response) {\n                    if (response.data.status === 'success') {\n                        console.log(\"hub controller: got work results\");\n                        setupPeriodicChecking(false);\n                        passedSuccessCallback(response.data);\n                    } else if (response.data.status === 'untrusted') {\n                        console.log(\"hub controller: got work results - untrusted\");\n                        setupPeriodicChecking(false);\n                        passedSuccessCallback(response.data);\n                    } else {\n                        if (response.data.in_progress === true) {\n                            // check again if needed.\n                            console.log(\"hub controller: cannot check work, still in progress\");\n                            setupPeriodicChecking(true);\n                            setTimeout(periodicChecking, checkPeriod);\n                        } else {\n                            console.log(\"hub controller: cannot check work, error\");\n                            setupPeriodicChecking(false);\n                            var error_message = response.data.message;\n                            passedErrorCallback(error_message);\n                        }\n                    }\n                }, function errorCheckingCallback(response) {\n                    console.log(\"hub controller: cannot check work, error\");\n                    var temp_error_message = checkPeriodicCheckingResponseError(response);\n                    if (temp_error_message) {\n                        setupPeriodicChecking(false);\n                        passedErrorCallback(temp_error_message);\n                    } else {\n                        // do not report, keep checking\n                        setupPeriodicChecking(true);\n                        setTimeout(periodicChecking, checkPeriod);\n                    }\n                });\n        }\n\n        $http(http_call).then(\n            function successCallback(response) {\n                if (response.data.status === 'success') {\n\n                    // start checking after some delay\n                    setupPeriodicChecking(true);\n                    setTimeout(periodicChecking, checkPeriod);\n\n                    console.log(\"hub controller: successfully submitted work\");\n                } else {\n                    if (response.data.in_progress === true) {\n                        console.log(\"hub controller: cannot submit work, other work in progress\");\n                        setupPeriodicChecking(false);\n                        passedErrorCallback(response.data.work_type + ' (run by another user) is still in progress! Please try again later!');\n                    } else {\n                        console.log(\"hub controller: cannot submit work, error\");\n                        setupPeriodicChecking(false);\n                        passedErrorCallback(response.data.message);\n                    }\n                }\n            },function errorCallback(response){\n                console.log(\"hub controller: cannot submit work, error\");\n                setupPeriodicChecking(false);\n                passedErrorCallback(\"Something went wrong: HTTP status \" + response.status);\n            });\n    };\n\n    workerProcessRestService.performGeneralExecutionOnlySubmit = function(httpMethod, httpURL, noParameter, httpJSON, httpBody, passedSuccessCallback, passedErrorCallback) {\n        var workID = createWorkID();\n\n        var http_call = {\n            method: httpMethod\n        };\n\n        if (httpJSON === true) {\n            // id and is_checking are inside the request body\n            httpBody.id = workID;\n            httpBody.is_checking = 'False';\n            http_call.url = httpURL;\n            http_call.headers = {'Content-type' : 'application/json'};\n            http_call.data = JSON.stringify(httpBody);\n        } else {\n            // id and is_checking are in the url directly\n            if (httpMethod === 'GET') {\n                if (noParameter === true) {\n                    http_call.url = httpURL + '?is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\n                } else {\n                    http_call.url = httpURL + '&is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\n                }\n            } else {\n                if (noParameter === true) {\n                    http_call.url = httpURL + '?is_checking=False&id=' + workID;\n                } else {\n                    http_call.url = httpURL + '&is_checking=False&id=' + workID;\n                }\n            }\n        }\n\n        $http(http_call).then(\n            function successCallback(response) {\n                if (response.data.status === 'success') {\n                    setupPeriodicChecking(false);\n                    passedSuccessCallback(response.data);\n                    console.log(\"hub controller: successfully submitted work\");\n                } else {\n                    if (response.data.in_progress === true) {\n                        console.log(\"hub controller: cannot submit work, other work in progress\");\n                        setupPeriodicChecking(false);\n                        passedErrorCallback(response.data.work_type + ' (run by another user) is still in progress! Please try again later!');\n                    } else {\n                        console.log(\"hub controller: cannot submit work, error\");\n                        setupPeriodicChecking(false);\n                        passedErrorCallback(response.data.message);\n                    }\n                }\n            },function errorCallback(response){\n                console.log(\"hub controller: cannot submit work, error\");\n                setupPeriodicChecking(false);\n                passedErrorCallback(\"Something went wrong: HTTP status \" + response.status);\n            });\n    };\n\n    return workerProcessRestService;\n}]);\n","iotgatewayhub.factory('utilityFunctionsService', ['$http', function($http){\n    var utilityFunctionsService = {};\n\n    utilityFunctionsService.isNumber = function(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    };\n\n    utilityFunctionsService.pad = function(n, width, z) {\n        z = z || '0';\n        n = n + '';\n        return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n    };\n\n    utilityFunctionsService.parse_digest = function(_header) {\n        var ws = '(?:(?:\\\\r\\\\n)?[ \\\\t])+';\n        var token = '(?:[\\\\x21\\\\x23-\\\\x27\\\\x2A\\\\x2B\\\\x2D\\\\x2E\\\\x30-\\\\x39\\\\x3F\\\\x41-\\\\x5A\\\\x5E-\\\\x7A\\\\x7C\\\\x7E]+)';\n        var quotedString = '\"(?:[\\\\x00-\\\\x0B\\\\x0D-\\\\x21\\\\x23-\\\\x5B\\\\\\\\x5D-\\\\x7F]|'+ws+'|\\\\\\\\[\\\\x00-\\\\x7F])*\"';\n        var tokenizer = RegExp(token+'(?:=(?:'+quotedString+'|'+token+'))?', 'g');\n        var tokens = _header.match(tokenizer);\n        return tokens;\n    };\n\n    utilityFunctionsService.unq = function(quotedString) {\n        return quotedString.substr(1, quotedString.length-2).replace(/(?:(?:\\r\\n)?[ \\t])+/g, \" \");\n    };\n\n    utilityFunctionsService.setCookie = function(cname, cvalue, exdays) {\n        var d = new Date();\n        d.setTime(d.getTime() + (exdays*24*60*60*1000));\n        var expires = \"expires=\"+d.toUTCString();\n        document.cookie = cname + \"=\" + cvalue + \"; \" + expires;\n    };\n\n    utilityFunctionsService.checkNetwork = function(_successCallback,_errorCallback){\n        $http({\n            method: 'GET',\n            url:    '/api/proxy?request=test&nocache=' + new Date().getTime(),\n            cache:  false,\n        }).then(_successCallback,_errorCallback);\n    };\n\n    return utilityFunctionsService;\n}]);\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    $stateProvider.state(\"error\",{\n        url:         '/error',\n        templateUrl: '/partials/error.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope){\n\n        }\n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    $stateProvider.state('hub.dashboard.cloudcmd',{\n\n        url: '/cloudcmd',\n        templateUrl: '/partials/hub.cloudcmd.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope){\n\n        }\n\n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n\n    $stateProvider.state('hub.dashboard.documentation',{\n        url: '/dashboard/documentation',\n        templateUrl: '/partials/hub.dashboard.documentation.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope){\n\n            $scope.viewTutorial = function (tutorial_html) {\n                console.log('tutorial_html: ' + tutorial_html);\n                if ($scope.isQuark && tutorial_html == 'tutorial.savedeploy') {\n                    tutorial_html = 'tutorial.savedeploy_quark';\n                }\n                var url = $state.href(tutorial_html, {parameter: \"parameter\"});\n                window.open(url,'_blank');\n            };\n\n            $scope.viewSensorSetupTutorial = function () {\n                var url = $state.href('tutorial.sensorsetup', {parameter: \"parameter\"});\n                window.open(url,'_blank');\n            };\n            $scope.viewSensorCloudTutorial = function () {\n                var url = $state.href('tutorial.sensorcloud', {parameter: \"parameter\"});\n                window.open(url,'_blank');\n            };\n            $scope.viewHelixTutorial = function () {\n                var url = $state.href('tutorial.helixapp', {parameter: \"parameter\"});\n                window.open(url,'_blank');\n            };\n            $scope.viewSaveDeployTutorial = function () {\n                \n                console.log(\"Is this Quark? \" + $scope.isQuark);\n                var state_chosen = 'tutorial.savedeploy';\n                if ($scope.isQuark) {\n                    state_chosen = 'tutorial.savedeploy_quark';\n                }\n\n                var url = $state.href(state_chosen, { parameter: \"parameter\" });\n                console.log(\"URL is \" + url);\n                window.open(url,'_blank');\n            };\n\n        }\n    \n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    $stateProvider.state('hub.dashboard',{\n        url: '',\n        abstract: true,\n        templateUrl: '/partials/hub.dashboard.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope,$timeout){\n\n            $scope.timerExpired = function(chartMatch) {\n                console.log(\"timerExpired\", chartMatch);\n                chartMatch.connected = false;\n                $scope.$apply();\n            };\n            \n            $rootScope.isSensorPanelExpanded = true; // determines state of top bar: expanded or minimized, utilized by dashboardToggle()\n\n            $scope.checkElement = function(el){\n                //console.log(\"el: \" + el);\n                if (typeof el === \"undefined\" || el === null || el === ''){\n                    //console.log(\"returned FALSE\");\n                    return false;\n                }\n                else{\n                    //console.log(\"returned TRUE\");\n                    return true;\n                }\n            };\n          \n            $scope.sensors_charted = []; // Container for sensors. Sensors have a charts property that contain each chart\n            $scope.charts_flat_list = []; // Flat list of all charts, regardless of sensor parent\n\n            $scope.dashboardToggle = function(){\n                $rootScope.isSensorPanelExpanded = !$rootScope.isSensorPanelExpanded;\n                // console.log(\"dashboardToggle: \" + $rootScope.isSensorPanelExpanded);\n            };\n\n            $scope.carouselPrevious = function(){\n                console.log(\"carousel previous\");\n            };\n\n            $scope.carouselNext = function(){\n                console.log(\"carousel next\");\n            };\n\n            $scope.setDashboard();\n\n            // called when the client loses its connection\n            $scope.onConnectionLost = function(responseObject) {\n                if (responseObject.errorCode !== 0) {\n                    console.log(\"onConnectionLost:\"+responseObject.errorMessage);\n                }\n            };\n\n            $scope.countTabs = function(){\n                var tab_count = 0;\n                if ($scope.device.sensor_config == 'enabled'){\n                    tab_count++;\n                }\n                if ($scope.device.softsoc_config == 'enabled'){\n                    tab_count++;\n                }\n                if ($scope.device.ref_sw_config == 'enabled'){\n                    tab_count++;\n                }\n                if ($scope.device.package_config == 'enabled'){\n                    tab_count++;\n                }\n                if ($scope.device.admin_config == 'enabled'){\n                    tab_count++;\n                }\n                if ($scope.device.documentation_config == 'enabled'){\n                    tab_count++;\n                }\n                return tab_count;\n            };\n\n            $scope.shouldDisplay = function(whichTab){\n                display = false;\n\n                switch (whichTab) {\n                    case 'sensors-tab':\n                        display = $scope.device.sensor_config == 'enabled';\n                        break;\n                    case 'softsoc-tab':\n                        display = $scope.device.softsoc_config == 'enabled';\n                        break;\n                    case 'referencesoftware-tab':\n                        display = $scope.device.ref_sw_config == 'enabled';\n                        break;\n                    case 'packages-tab':\n                        display = $scope.device.package_config == 'enabled';\n                        break;\n                    case 'admin-tools-tab':\n                        display = $scope.device.admin_config == 'enabled';\n                        break;\n                    case 'documentation-tab':\n                        display = $scope.device.documentation_config == 'enabled';\n                        break;\n                    default:\n                        /* Do not display */\n                        break;\n                }\n\n                return display;\n            };\n\n            // called when a message arrives\n            $scope.onMessageArrived = function(message) {\n                //console.log(\"sensor data received\");\n                if(log_message_json){\n                     console.log(\"onMessageArrived:\"+message.payloadString);\n                }\n               \n                try{\n                    var entry = JSON.parse(message.payloadString);\n\n                    var  _id = entry.id;\n                    \n                    // New chart - sensor data model for the visualizers\n                    var sensorMatches = $.grep($scope.sensors_charted, function(e){ return e.id == _id; });\n                    var sensorMatch;\n                    if (sensorMatches.length > 1) {\n                        console.log(\"Error in state.hub.dashboard:: A sensor was added twice to the same array\", _id);\n                    } else {\n                        if (sensorMatches.length == 1) {\n                            // One match, let's now consider if there is already a chart added to it\n                            sensorMatch = sensorMatches[0];\n                        } else {\n                            // Zero matches. This sensor has not yet been added to the sensors list\n                            sensorMatch = { \n                            charts: [],\n                            id: _id, \n                            title: entry.title\n                            };\n                            $scope.sensors_charted.push(sensorMatch);\n                        }\n                        sensorMatch.mostRecentValue = entry.datum[1];\n                        sensorMatch.priority = parseInt(entry.priority);\n                        sensorMatch.mostRecentUnits = entry.units;\n                        sensorMatch.mostRecentSource = entry.dataSource;\n                        sensorMatch.mostRecentTimestamp = new Date(parseInt(entry.datum[0])); \n                    }\n\n                    var chartMatches = $.grep(sensorMatch.charts, function(e){ return e.dataSource == entry.dataSource; });\n                    var chartMatch;\n                    if (chartMatches.length > 1) {\n                        console.log(\"Error in state.hub.dashboard:: A chart was added twice to the same sensor\", _id, entry.dataSource);\n                    } else if (chartMatches.length == 1) {\n                        chartMatch = chartMatches[0];\n                    } else {\n                        // Zero matches. This chart has not yet been added to the sensor's chart list\n                        chartMatch = {};\n                        sensorMatch.charts.push(chartMatch);\n                        $scope.charts_flat_list.push(chartMatch);\n                    }\n                    \n                    chartMatch.parentSensorTitle = sensorMatch.title;\n                    chartMatch.chartType = entry.chartType;\n                    if (entry.chartType == \"line\") {\n                        chartMatch.value = { x: entry.datum[0], y: entry.datum[1]};\n                    } else {\n                        chartMatch.value = entry.datum[1];\n                    }\n                    chartMatch.mostRecentValue = entry.datum[1];\n                    chartMatch.sourcePriority = parseInt(entry.sourcePriority);\n                    chartMatch.dataSource = entry.dataSource;\n                    chartMatch.min = entry.min;\n                    chartMatch.max = entry.max;  \n                    chartMatch.stepWidth = (entry.max - entry.min) / 5;\n                    chartMatch.pointsToShow = parseInt(entry.points);     \n                    chartMatch.units = entry.units;   \n                    chartMatch.timeToLive = parseFloat(entry.ttl);\n                    chartMatch.connected = true;\n                    chartMatch.mostRecentTimestamp = new Date(parseInt(entry.datum[0])); \n                    if (chartMatch.timerExpiredPromise) $timeout.cancel(chartMatch.timerExpiredPromise);\n                    chartMatch.timerExpiredPromise = $timeout( function(){ $scope.timerExpired(chartMatch); }, chartMatch.timeToLive * 1000);  \n                    $scope.$apply();\n\n                }catch(err){\n                    //console.log(\"ERROR onMessageArrive \"+err);\n                }\n            };\n\n            $scope.mqttInit = function(){\n                console.log(\"hub dashboard mqttInit 150a\");\n                //MQTT\n                /**\n                var broker = {\n                  host: config.broker.host,\n                  port: config.broker.wssPort,    //default port is  WSS port:9001\n                  id: \"client_\" + parseInt(Math.random() * 100, 10),\n                  topic: config.broker.topic,\n                  reconnectTimeout: config.broker.reconnectTimeout,\n                  reconnectInterval: config.broker.reconnectInterval,\n                  protocol: window.location.protocol,\n                  path: \"/mqtt\"\n                };\n                **/\n                var loop = 0;\n                var reconnect = false; //this is how Rob had it configured. Maybe set this to true for production?\n\n                //var _host = window.location.hostname;\n                var _host = $window.config_sensor.broker.host !== null ? $window.config_sensor.broker.host : window.location.hostname;//$scope.device[\"lan\"][\"eth0\"];\n                if(no_local_config_hosts && (no_local_config_hosts.indexOf(window.location.hostname)!=-1)){\n                    _host = window.location.hostname;\n                }\n                var _useSSL = false;\n                var _port   = $window.config_sensor.broker.wsPort;\n                if(window.location.protocol==='https:'){\n                    _port = $window.config_sensor.broker.wssPort;\n                    _useSSL = true;\n                }\n\n                var _id  =  \"client_\" + parseInt(Math.random() * 100, 10);\n                var _reconnectInterval = $window.config_sensor.broker.reconnectInterval;\n                var _reconnectTimeout  = $window.config_sensor.broker.reconnectTimeout;\n                var _topic             = $window.config_sensor.broker.topic;\n                $scope.mqtt_client = new $window.Paho.MQTT.Client(_host, _port, _id);\n                $scope.mqtt_client.onConnectionLost = $scope.onConnectionLost;  \n                $scope.mqtt_client.onMessageArrived = $scope.onMessageArrived;\n\n                // connect the client\n                $scope.mqtt_client.connect({\n                    useSSL: _useSSL,\n                    timeout: 3,\n                    cleanSession: true,\n                    onSuccess: function () {\n                        console.log(\"hub dashboard MQTT connection succeeded to \"+_host+\":\"+_port+\" Subscribing to topic: \"+_topic);\n                        //$link.removeClass(\"disconnected\").addClass(\"connected\");                     \n                        $scope.mqtt_client.subscribe(_topic,{qos: 1});\n                    },\n                    onFailure: function (message) {\n\n                        function initMqtt() {$scope.mqttInit();  }\n\n                      if(reconnect) {\n                        console.log(\"MQTT connection failed. Retrying. Error Message -  \"+ message.errorMessage);\n\n                        while(loop < _reconnectInterval) {\n                              loop++;\n                                  setTimeout(initMqtt, _reconnectTimeout);\n                        } \n                        reconnect = false;\n                      }\n                      else {\n                        //$link.removeClass(\"connected\").addClass(\"disconnected\");\n                        console.log(\"MQTT connection failed. Please ensure the message broker is up. Error Message -  \"+ message.errorMessage);\n                      }\n                    }\n                });\n            };\n\n            $scope.mqttInit();\n        }\n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n\n    $stateProvider.state('hub.dashboard.nodered',{\n        url: '/nodered',\n        templateUrl: '/partials/hub.nodered.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope){\n        }\n    })\n    .state('hub.dashboard.helix',{\n        url: '/helix',\n        templateUrl: '/partials/hub.helix.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope){\n        }\n    })\n    .state('hub.dashboard.luci',{\n        url: '/luci',\n        templateUrl: '/partials/hub.luci.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope){\n        }\n    });\n});\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n\n    $stateProvider.state('hub.dashboard.packages',{\n        url: '/dashboard/packages',\n        templateUrl: '/partials/hub.dashboard.packages.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope,$uibModal){\n            var num_to_show = 100;\n            $scope.gettingPackages = true;\n            $scope.showLoadMore = false;\n            $scope.sortType = 'name';\n            $scope.totalDisplayed = num_to_show;\n\n            $scope.loadMore = function() {\n                $scope.totalDisplayed += num_to_show;\n                if ($scope.totalDisplayed >= $scope.installed.length) {\n                    $scope.showLoadMore = false;\n                }\n            };\n            if ($scope.device.package_config == \"enabled\"){\n                if ($scope.connected){\n                    $scope.setPackages('True','',\n                    function successCallback(data){\n                        $scope.gettingPackages = false;\n\n                        if ($scope.installed.length <= $scope.totalDisplayed) {\n                            $scope.showLoadMore = false;\n                        } else {\n                            $scope.showLoadMore = true;\n                        }\n                    }, function errorCallback(response) {\n                        $scope.gettingPackages = false;\n                    });\n                }\n                else{\n                    $scope.setPackages('False','',\n                    function successCallback(data){\n                        $scope.gettingPackages = false;\n\n                        if ($scope.installed.length <= $scope.totalDisplayed) {\n                            $scope.showLoadMore = false;\n                        } else {\n                            $scope.showLoadMore = true;\n                        }\n                    }, function errorCallback(response) {\n                        $scope.gettingPackages = false;\n                    });\n                }\n            }\n\n        }\n    })\n    .state('hub.dashboard.package',{\n        url: '/package',\n        templateUrl: '/partials/hub.package.ng.html?version=' + gui_version,\n        params: { packageUrl : null, packageName:null},\n        controller: function($window,$scope,$state,$rootScope,$stateParams){\n            console.log(\"launching package at url:\"+$stateParams.packageUrl);\n            $scope.packageUrl = $stateParams.packageUrl;\n            $scope.packageName =  $stateParams.packageName;\n            if(!$scope.packageUrl){\n                $state.go(\"hub.dashboard.packages\");\n            }\n        }\n    });\n});\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n\n    $stateProvider.state('hub.dashboard.referencesoftware',{\n        url: '/dashboard/referencesoftware',\n        templateUrl: '/partials/hub.dashboard.referencesoftware.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope,$uibModal){\n            var num_to_show = 500;\n            $scope.gettingPackages = true;\n            $scope.showLoadMore = false;\n            $scope.sortType = 'name';\n            $scope.totalDisplayed = num_to_show;\n\n            $scope.loadMore = function() {\n                $scope.totalDisplayed += num_to_show;\n                if ($scope.totalDisplayed >= $scope.installed.length) {\n                    $scope.showLoadMore = false;\n                }\n            };\n            if($scope.device.ref_sw_config == \"enabled\"){\n                if ($scope.connected){\n                    $scope.setPackages('True','',\n                    function successCallback(data){\n                        $scope.gettingPackages = false;\n\n                        if ($scope.installed.length <= $scope.totalDisplayed) {\n                            $scope.showLoadMore = false;\n                        } else {\n                            $scope.showLoadMore = true;\n                        }\n                    }, function errorCallback(response) {\n                        $scope.gettingPackages = false;\n                    });\n                }\n                else{\n                    $scope.setPackages('False','',\n                    function successCallback(data){\n                        $scope.gettingPackages = false;\n\n                        if ($scope.installed.length <= $scope.totalDisplayed) {\n                            $scope.showLoadMore = false;\n                        } else {\n                            $scope.showLoadMore = true;\n                        }\n                    }, function errorCallback(response) {\n                        $scope.gettingPackages = false;\n                    });\n                }\n            }\n\n\n        }\n    })\n    .state('hub.dashboard.ref',{\n        url: '/ref',\n        templateUrl: '/partials/hub.ref.ng.html?version=' + gui_version,\n        params: { packageUrl : null, packageName:null},\n        controller: function($window,$scope,$state,$rootScope,$stateParams){\n            console.log(\"launching package at url:\"+$stateParams.packageUrl);\n            $scope.packageUrl = $stateParams.packageUrl;\n            $scope.packageName =  $stateParams.packageName;\n            if(!$scope.packageUrl){\n                $state.go(\"hub.dashboard.referencesoftware\");\n            }\n        }\n    });\n});\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    $stateProvider.state('hub.dashboard.sensors',{\n        url: '/dashboard/sensors',\n        templateUrl: '/partials/hub.dashboard.sensors.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope,$uibModal,utilityFunctionsService){\n            $scope.sortType = 'parentSensorTitle';\n\n            $scope.doManageSensors = function(){\n                var _cookie     = getCookie(\"noreshow\");\n                console.log(\"hub control found noreshow cookie as \"+_cookie+\" #8910a\");\n                if(_cookie){\n                    $scope.launchQuickTools('nodered');\n                }else{\n                    $scope.openManageSensorsDialogModal();\n                }\n            };\n\n            $scope.openManageSensorsDialogModal = function(){\n\n                console.log(\"hub control opening MANAGE SENSORS dialog modal #073a\");\n                var modalInstance = $uibModal.open({\n                    templateUrl: 'partials/hub.manage.sensors.dialog.ng.html?version=' + gui_version,\n                    animation:    true,\n                    size: 'lg',\n                    backdrop: modal_light_dismiss_enabled,\n                    scope: $scope,\n                    controller: function($scope,$state,$http,$rootScope){\n                        $scope.noreshow = true;\n\n                        $scope.closeModal = function(){\n                            if($scope.noreshow){\n                                console.log(\"hub control setting noreshow cookie true #8910\");\n                                utilityFunctionsService.setCookie(\"noreshow\",true,license_duration_days);\n                            }\n                            console.log(\"hub control closing manage sensors dialog modal 0 #073c\");\n                            modalInstance.dismiss('cancel');\n                            $scope.launchQuickTools('nodered');\n                        };\n                        $scope.viewTutorial = function(){\n                            //console.log(\"continuing to sensors tutorial #073dx\");\n                            //modalInstance.dismiss('cancel');\n                            //$state.go(\"hub.dashboard.tutorial.sensor\");\n                            if($scope.noreshow){\n                                console.log(\"hub control setting noreshow cookie true #8910\");\n                                utilityFunctionsService.setCookie(\"noreshow\",true,license_duration_days);\n                            }\n                            var url = $state.href('tutorial.sensorsetup', {parameter: \"parameter\"});\n                            window.open(url,'_blank');\n                        };\n                        $scope.viewVideo = function(){\n                            if($scope.noreshow){\n                                console.log(\"hub control setting noreshow cookie true #8910\");\n                                utilityFunctionsService.setCookie(\"noreshow\",true,license_duration_days);\n                            }\n                            var url = \"https://software.intel.com/en-us/videos/iot-dev-hub-setup-sensor-in-node-red\";\n                            window.open(url,'_blank');\n                        };\n\n                    }\n\n                });\n\n            };\n\n            $scope.openSensorTutorialModal = function(){\n                var url = $state.href('tutorial.sensorsetup', {parameter: \"parameter\"});\n                window.open(url,'_blank');\n            };\n        }\n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    $stateProvider.state('hub.dashboard.softsoc',{\n        url: '/dashboard/softsoc',\n        templateUrl: '/partials/hub.dashboard.softsoc.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope,$timeout,$uibModal,utilityFunctionsService){\n            $scope.sortType = 'parentSensorTitle';\n\n            $scope.fpgaBuildAndReboot = function(){\n                console.log(\"hub entering FPGA reboot\");\n                var modalInstance = $uibModal.open({\n                templateUrl: 'partials/hub.confirm.fpga.reboot.ng.html?version=' + gui_version,\n                animation:    true,\n                size: 'lg',\n                backdrop: modal_light_dismiss_enabled,\n                scope: $scope,\n                controller: function($scope,$state,$http,$rootScope){\n\n                    $scope.cancelFPGA = function(){\n                        console.log(\"hub canceling FPGA build and reboot\");\n                        $scope.fpga_num_comp = 0;\n                        modalInstance.dismiss('cancel');\n                    };\n\n                    $scope.continueFPGA = function(){\n                        $scope.showFpgaBuild();\n                        modalInstance.dismiss('cancel');\n\n                    };\n\n                    }\n                });\n            };\n\n            $scope.fpgaResetAndReboot = function(){\n                console.log(\"hub entering FPGA reset and reboot\");\n                var modalInstance = $uibModal.open({\n                templateUrl: 'partials/hub.confirm.fpga.reset.ng.html?version=' + gui_version,\n                animation:    true,\n                size: 'lg',\n                backdrop: modal_light_dismiss_enabled,\n                scope: $scope,\n                controller: function($scope,$state,$http,$rootScope){\n\n                    $scope.cancelFPGA = function(){\n                        console.log(\"hub canceling FPGA reset and reboot\");\n                        $scope.fpga_num_comp = 0;\n                        modalInstance.dismiss('cancel');\n                    };\n\n                    $scope.continueFPGA = function(){\n                        console.log(\"hub in FPGA reset and reboot\");\n                        console.log(\"Uninstalling: \" + $scope.installedBitstream.name);\n                        $scope.uninstallPackage($scope.installedBitstream);\n                        $scope.showFpgaReboot();\n                        $scope.rebootGateway(\n                                    function successCallback(response) {\n                                    $scope.fpga_num_comp = 0;\n                                    console.log(\"rebooted gateway: \" + response.data.status);\n                                    $timeout(function(){\n                                        modalInstance.dismiss('cancel');\n                                    }, restart_welcome_latency_milliseconds - 1000);\n                                    }, function errorCallback(response) {\n                                    console.log(\"gateway reboot failed\");\n                                    $scope.bar_after_message = \"Rebooting gateway failed! Please manually restart the gateway!\";\n                                    }, restart_welcome_latency_milliseconds);\n                        modalInstance.dismiss('cancel');\n\n                    };\n\n                    }\n                });\n            };\n\n            $scope.setFPGAOption = function(option,enabled){\n                for(var i = 0; i < $scope.fpga_num_comp.length; i++){\n                    if (option == $scope.fpga_options[i]){\n                        if (enabled === true){\n                            $scope.fpga_num_comp[i] = 1;\n                        }\n                        else{\n                            $scope.fpga_num_comp[i] = 0;\n                        }\n                    }\n                }\n            };\n\n            $scope.fpgaValidateInput = function(){\n                //calculate what options were selected through the UI\n                for(var i = 0,gui_num_comp = 0; i < $scope.fpga_num_comp.length; i++){\n                    if($scope.fpga_num_comp[i]){\n                        gui_num_comp += Math.pow(2,i);\n                    }\n                }\n\n                //compare UI selection with valid bitstream options\n                for(i = 0; i < $scope.fpga_valid_num.length; i++){\n                    if (gui_num_comp == $scope.fpga_valid_num[i]){\n                        //save position in array that contains information on what package to install\n                        $scope.fpga_package_install_position = i;\n                        return true;\n                    }\n                }\n                return false;\n            };\n\n            $scope.showFpgaBuild = function(){\n                 var modalInstance = $uibModal.open({\n                 templateUrl: 'partials/hub.inform.fpga.build.inprogress.ng.html?version=' + gui_version,\n                 animation:    true,\n                 size: 'lg',\n                 backdrop: modal_light_dismiss_enabled,\n                 scope: $scope,\n                     controller: function($scope,$state,$http,$rootScope,$timeout){\n                         $scope.bar_before_message = \"Building FPGA image\";\n                         $scope.bar_after_message = \"Building the FPGA image. Please wait...\";\n                         $scope.error_message = null;\n                         $scope.show_close_button = false;\n\n                         console.log('In build modal!');\n\n                         $scope.installPackage($scope.fpga_options_data[$scope.fpga_package_install_position],\n                            function successCallback(response) {\n                                $scope.fpga_num_comp = 0;\n                                $scope.showFpgaReboot();\n                                $scope.rebootGateway(\n                                    function successCallback(response) {\n                                    console.log(\"rebooted gateway: \" + response.data.status);\n                                    $timeout(function(){\n                                        modalInstance.dismiss('cancel');\n                                    }, restart_welcome_latency_milliseconds - 1000);\n                                    }, function errorCallback(response) {\n                                    console.log(\"gateway reboot failed\");\n                                    $scope.bar_after_message = \"Rebooting gateway failed! Please manually restart the gateway!\";\n                                    }, restart_welcome_latency_milliseconds);\n\n                            $scope.message       = \"The install was successful. Forwarding to login in 10 seconds...\";\n                            $timeout(function(){\n                                        modalInstance.dismiss('cancel');\n                                    }, restart_welcome_latency_milliseconds - 1000);\n\n                            },\n                            function errorCallback(response){\n                                console.log(\"error installing fpga package\");\n                                modalInstance.dismiss('cancel');\n                            },true);\n\n                         $scope.closeModal = function(){\n                             modalInstance.dismiss('cancel');\n                         };\n                     }\n                  });\n             };\n\n             $scope.showFpgaReboot = function(){\n                 var modalInstance = $uibModal.open({\n                 templateUrl: 'partials/hub.inform.fpga.reboot.inprogress.ng.html?version=' + gui_version,\n                 animation:    true,\n                 size: 'lg',\n                 backdrop: modal_light_dismiss_enabled,\n                 scope: $scope,\n                     controller: function($scope,$state,$http,$rootScope,$timeout){\n                         $scope.bar_before_message = \"System Reboot\";\n                         $scope.bar_after_message = \"Rebooting system. Please wait...\";\n                         $scope.error_message = null;\n                         $scope.show_close_button = false;\n\n                         console.log('In reboot modal!');\n                         $scope.closeModal = function(){\n                             modalInstance.dismiss('cancel');\n                         };\n                     }\n                  });\n             };\n\n            /*\n            This function is called in an ng-repeat block to determine which package is installed\n            and return what IP blocks will get installed from the package to display the checkmarks in the UI.\n            */\n            $scope.isFPGAImageInstalled = function(option){\n                for(i = 0; i < $scope.fpga_options_data.length; i++){\n                    if ($scope.fpga_options_data[i].installed === true){\n                        $scope.installedBitstream = $scope.fpga_options_data[i];\n                        if($scope.fpga_options_data[i][option] > 0){\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            };\n\n            $scope.isBitstreamInstalled = function(){\n                for(i = 0; i < $scope.fpga_options_data.length; i++){\n                    if ($scope.fpga_options_data[i].installed === true){\n                        $scope.installedBitstream = $scope.fpga_options_data[i];\n                        return true;\n                    }\n                }\n                return false;\n            };\n\n        }\n    });\n});","iotgatewayhub.config(function($stateProvider){\n    $stateProvider.state('hub.dashboard.tools',{\n        url: '/dashboard/tools',\n        templateUrl: '/partials/hub.dashboard.admin.ng.html?version=' + gui_version,\n        controller: function($scope,$http,$uibModal){\n\n            $http.get('api/tutorials?conf=admin').success(function(response) {\n                if (response.result_code === 0) {\n                    $scope.navOptions = response.data;\n                } else {\n                    //TODO:  Show Error!\n                }\n            });\n\n            $scope.extensions = [];\n            $scope.search = {};\n            $scope.search.input = '';\n            $scope.search.results = [];\n\n            $scope.showSection = function (whichButton) {\n                if (!whichButton) {\n                    return true;\n                }\n\n                $scope.showSettings();\n\n                $( \".admin-section-option-selected\" ).each(function( index ) {\n                    $(this).removeClass( \"admin-section-option-selected\" );\n                });\n\n                $(\"#\" + whichButton.id).addClass( \"admin-section-option-selected\" );\n\n                for (var navOptionId in $scope.navOptions) {\n                    navOption = $scope.navOptions[navOptionId];\n                    if (navOption.id === whichButton.id) {\n                        $scope.selectedView = whichButton;\n                        return true;\n                    }\n                }\n\n                return false;\n            };\n\n            $scope.showSettings = function(option) {\n                if (option) {\n                    if (option.displayType === 'popup') {\n                        if (option) {\n                            $scope.dynamicChangeViewPartial = option.htmlLink;\n                            window[option.javascriptFunction]($scope,$uibModal);\n                        } else {\n                            $scope.dynamicChangeViewPartial = null;\n                        }\n                    } else {\n                        $scope.selectedOption = option;\n\n                        if (option && option.htmlLink) {\n                            $scope.dynamicChangeViewPartial = option.htmlLink;\n                            window[option.javascriptFunction]($scope);\n                        } else {\n                            $scope.dynamicChangeViewPartial = null;\n                        }\n                    }\n                } else {\n                    $scope.selectedOption = null;\n                }\n            };\n\n            $scope.shiftView = function(revert) {\n                return $scope.selectedView && (revert ? $scope.selectedOption : !$scope.selectedOption);\n            };\n\n            $scope.searchOption = function(option) {\n                if($scope.search.input.toLowerCase() && option.name.toLowerCase().indexOf($scope.search.input.toLowerCase()) > -1) {\n                    return \"admin-search-selection-right-arrow\";\n                }\n\n                return \"\";\n            };\n\n            function updateSearchResults() {\n                $scope.search.results.splice(0, $scope.search.results.length);\n\n                if (!$scope.search.input) {\n                    return;\n                }\n\n                var searchTerm = $scope.search.input.toLowerCase();\n                var searchResults = new Map();\n\n                for (var idx in $scope.navOptions) {\n                    var section = $scope.navOptions[idx].name;\n                    var groups = $scope.navOptions[idx].groups;\n\n                    for (var jdx in groups) {\n                        var options = groups[jdx].options;\n\n                        for (var kdx in options) {\n                            if (options[kdx].name.toLowerCase().indexOf(searchTerm) > -1) {\n                                searchResults.set(section,$scope.navOptions[idx]);\n                            }\n                        }\n                    }\n                }\n\n                if (searchResults.size > 0) {\n                    searchResults.forEach(function(value) {\n                        $scope.search.results.push(value);\n                    });\n                } else {\n                    $scope.search.results = [{name:\"No Search Results\"}];\n                }\n            }\n\n            $scope.$watch('search.input', function() {updateSearchResults();}, true);\n        }\n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n\n    $stateProvider.state('hub',{ //parent state of all of the logged-in parts of the app. it loads the package library when user logs in\n        url: '',\n        abstract: true,\n        templateUrl: '/partials/hub.ng.html?version=' + gui_version,\n        resolve: {\n              authenticate: authenticate\n        },\n        controller: function ($window, $scope, $state, $location, $rootScope, $http, $uibModal, $q, $sce, $timeout, workerProcessRestService, utilityFunctionsService) {\n            console.log(\"hub controller: starting #001\");\n\n            setupNoConnection(false);\n\n            $scope.security_enabled   = window.location.protocol === 'https:';\n\n            if (oem_branding_logo_file) {\n                // encode the file name (only the file name, not the path)\n                var oem_branding_logo_full_file = oem_branding_logo_file;\n                var temp_index = oem_branding_logo_full_file.lastIndexOf(\"/\");\n                var temp_logo_name = oem_branding_logo_full_file.substring(temp_index + 1);\n                var temp_logo_path = oem_branding_logo_full_file.substring(0, temp_index + 1);\n                console.log(temp_logo_name);\n                temp_logo_name = encodeURIComponent(temp_logo_name);\n                console.log(temp_logo_name);\n                oem_branding_logo_full_file = temp_logo_path + temp_logo_name;\n                console.log(\"###########current logo##############\");\n                console.log(oem_branding_logo_full_file);\n\n                $scope.oem_logo_file = oem_branding_logo_full_file;\n                $scope.hideOEMBranding = false;\n            } else {\n                $scope.hideOEMBranding = true;\n            }\n\n            $scope.dashboard        = false;\n            $scope.usb_devices      = [];\n            $scope.available        = [];\n            $scope.installed        = [];\n            $scope.package_updates  = [];\n            $scope.updates          = 0;\n            $scope.sensors          = [];\n            $scope.sensor_map       = {};\n            $scope.upgrades         = 0;\n            $scope.mec              = false;\n            $scope.isQuark          = true;\n            $scope.fpga_valid_num = [];\n            $scope.fpga_num_comp = [];\n            $scope.fpga_package_install_position = null;\n            $scope.option_descriptions = [];\n\n            $scope.humidity     = \"\";\n            $scope.temperature  = \"\";\n\n            $scope.connected  = false;\n            $scope.pro = false;\n\n            $scope.https_port   = https_port;\n\n            $scope.updating_package     = {};\n            $scope.updated_package      = {};\n            $scope.update_package_failed = {};\n            $scope.update_package_fail_message = {};\n            $scope.installing_package   = {};\n            $scope.uninstalling_package = {};\n            $scope.package_activity     = false;\n            $scope.starting_package     = {};\n            $scope.stopping_package     = {};\n            $scope.enabling_package     = {};\n            $scope.installed_package    = {};\n\n            $scope.deleting_repository  = {};\n\n            $scope.noderedurl  = $sce.trustAsResourceUrl(window.location.protocol + \"//\" + window.location.hostname + \":1880\");\n\n            $scope.luciurl     = $sce.trustAsResourceUrl(\"https://\" + window.location.hostname + \":443\");\n\n            $scope.httpurl     = $sce.trustAsResourceUrl(\"http://\" + window.location.hostname + \"\");\n            \n            $scope.httpsurl    = $sce.trustAsResourceUrl(\"https://\" + window.location.hostname + \":3092\");\n            \n            $scope.cloudcmdurl = $sce.trustAsResourceUrl(window.location.protocol + \"//\" +  window.location.hostname + \":8000\");\n\n            $scope.foundOSUpdate = false;\n            $scope.foundOSUpdate_Packages = false;\n            $scope.OSUpdate_Packages =[];\n\n            $scope.package_refresh    = 0; //if package list is reloaded from server, increment this by one to force update\n            $scope.gotPackagesList = true;\n            $scope.gotPackagesList_Error = false;\n\n\n            $scope.setDashboard = function(){\n                $scope.dashboard        = true;\n            };\n            $scope.isDashboard  = function(){\n                return $scope.dashboard;\n            };\n            $scope.hasUpdates = function(){\n                return $scope.updates>0;\n            };\n            $scope.hasOSUpdate = function(){\n                // always return true\n                return true;\n            };\n\n            $scope.updatePackageStatuses   = function(){\n                console.log(\"hub control updating package statuses #720a\");\n\n                if($scope.package_activity) return;\n                $scope.package_activity = true;\n\n                for(var _i=0,_len=$scope.packages.length;_i<_len;_i++){\n                    console.log(\"hub control updating package statuses #720a1: \");\n                    var _package = $scope.packages[_i];\n                    console.log(\"hub control updating package statuses #720a2: \"+_package.name);\n                    var _service = _package.service;\n                    if(_service && _service[0]){\n\n                        var _all_services_running = true;\n                        var _all_services_enabled = true;\n                        var _num_services         = _service.length;\n\n                        for(var _j=0;_j<_num_services;_j++){\n                            var _service_sub   = $scope.service_statuses[_service[_j]].SUB;\n                            var _service_state = $scope.service_statuses[_service[_j]].State;\n                            console.log(\"hub control updating package statuses #720a2 \"+_package.name+\" looking up status of service \"+_j+\" \"+_service[_j]+\" SUB=\"+_service_sub+\" State=\"+_service_state);\n                            if(_service_sub  !=='Running'){\n                                console.log(\"setting running to FALSE\");\n                                _all_services_running = false;\n                            }\n                            if(_service_state !=='enabled'){\n                                console.log(\"setting autorun to FALSE\");\n                                _all_services_enabled = false;\n                            }\n                        }\n                        console.log(\"hub control updating package statuses #720d \"+_package.name+\" setting statuses as \"+_all_services_running+\" \"+_all_services_enabled );\n                        //var _service_status = $scope.service_statuses[_service[0]]; //just one service for now. Must ask Nick what he wants to do for more than one\n                        $scope.package_statuses[_package.name] = {\n                            'running': _all_services_running ,\n                            'autorun': _all_services_enabled };\n                        _package.running = _all_services_running; // Directly on package for sorting reasons in the Installed Packages table\n                        _package.autorun = _all_services_enabled; // Directly on package for sorting reasons in the Installed Packages table\n\n                        console.log(\"hub control updating package statuses #720b \"+_package.name +\n                                  \" running: \"+$scope.package_statuses[_package.name].Running +\n                                  \" autorun: \"+$scope.package_statuses[_package.name].autorun);\n                        //$scope.$apply();\n\n                    }\n                }\n\n                $scope.package_activity = false;\n            };\n\n            $scope.setArrays = function(_set_services){\n                //$scope.featured   = $scope.packages.filter(function(_package){\n                  //return !_package.installed && _package.curated;\n                //});\n                console.log(\"hub controller: setting available packages #009a\");\n                // only update list when it is not empty\n                if ($scope.packages) {\n                    $scope.available  = $scope.packages.filter(function(_package){\n                        return !_package.installed;\n                    });\n                    console.log(\"hub control setting installed packages #009b\");\n                    $scope.installed  = $scope.packages.filter(function(_package){\n                        return _package.installed;\n                    });\n                    console.log(\"hub control setting package_updates #009c\");\n                    $scope.package_updates = $scope.installed.filter(function(_package){\n                        return _package.upgrade_version && _package.upgrade_version !==\"\";\n                    });\n                    console.log(\"hub control setting (os) updates #009d\");\n                    //$scope.updates = ($scope.hasOSUpdate() ? 1 : 0) + $scope.package_updates.length;\n                    $scope.updates = $scope.package_updates.length;\n\n                    $scope.curated =  $scope.available.filter(function(_package){\n                        return _package.curated;\n                    });\n\n                    if(_set_services){\n                       $scope.setServices();\n                    }\n                }\n            };\n\n            $scope.launchQuickTools = function(_toolname) {\n                var win = null;\n                if (_toolname==='nodered') {\n                    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n                        //Firefox has to open this in a new tab\n                        win = window.open($scope.noderedurl, '_blank');\n                        win.focus();\n                    } else {\n                        $state.go(\"hub.dashboard.nodered\");\n                        $rootScope.isSensorPanelExpanded = false;\n                    }\n                    //var _url = \"<gateway ip>:1880\";\n                    //console.log(\"Launching Node Red in iframe with url \"+_url);\n                } else if (_toolname==='helix') {\n                    //var _url = \"TBD\";\n                    //console.log(\"Launching Helix in iframe with url \"+_url);\n\n                    $state.go(\"hub.dashboard.helix\");\n                    $rootScope.isSensorPanelExpanded = false;\n                } else if (_toolname==='luci') {\n                    //var _url = \"https://<gateway ip>\";\n                    //console.log(\"Launching LuCl in iframe with url \"+_url);\n\n                    win = window.open($scope.luciurl, '_blank');\n                    win.focus();\n                } else if(_toolname==='cloudcmd'){\n                    if (window.location.protocol==='https:') {\n                        win = window.open($scope.cloudcmdurl, '_blank');\n                        win.focus();\n                    } else {\n                        if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n                            //Firefox has to open this in a new tab\n                            win = window.open($scope.cloudcmdurl, '_blank');\n                            win.focus();\n                        } else {\n                            $state.go(\"hub.dashboard.cloudcmd\");\n                            $rootScope.isSensorPanelExpanded = false;\n                        }\n                    }\n                }\n            };\n\n            $scope.setupPreventModalClosing = function(){\n\n                var blockUI = false;\n                var listener = function(){};\n            };\n\n            $scope.initHubTasks = function(update) {\n                // We are doing this at hub load time, so that e can get the available update count to display.\n                function initSetPackages(update) {\n                    console.log(\"hub controller: getting packages #005a\");\n                    $http({\n                        method : 'GET',\n                        url    : '/api/packages?update=' + update + '&nocache=' + new Date().getTime()\n                    }).then(\n                        function successCallback(response) {\n                            $scope.packages = response.data;\n                            console.log(\"hub controller: found packages by API call 005b\");\n                            // do not need and do not refresh service at this time.\n                            $scope.setArrays(false);\n                        },function errorCallback(response) {\n                            console.log(\"error getting packages 005E\");\n                        });\n                }\n\n                function initScanUSBDevices(){\n                    $scope.scanning_usb = true;\n                    console.log(\"hub controller: scanning usb devices\");\n                    $http({\n                        method: 'GET',\n                        url:    '/api/usb?nocache=' + new Date().getTime()\n                    }).then(function successCallback(response) {\n                        $scope.usb_devices = response.data;\n                        $scope.scanning_usb = false;\n                        console.log(\"hub controller: scanUSBdevices found \"+$scope.usb_devices.length+\" usb devices\");\n                    },function errorCallback(response) {\n                        console.log(\"error scanning usb devices\");\n                        $scope.scanning_usb = true;\n                    });\n                }\n\n                function initSetDevice(update){\n                    console.log(\"hub controller: getting device 006a\");\n                    $http({\n                        method : 'GET',\n                        url    : '/api/osc?nocache=' + new Date().getTime()\n                    }).then(\n                        function successCallback(response) {\n                            $scope.device = response.data;\n\n                            // Note: For string, it is indexOf not indexof\n                            if ($scope.device.model.indexOf(quark_name_string) <= -1) {\n                                $scope.isQuark = false;\n                            } else {\n                                $scope.isQuark = true;\n                            }\n\n                            //get device uptime, ideally use a timestamp on server start from server instead\n                            var uptime = $scope.device.uptime.split(' '); // format: 0d 1h 2m\n                            var days = uptime[0].substr(0,uptime[0].length-1);\n                            var hours = uptime[1].substr(0,uptime[1].length-1);\n                            var minutes = uptime[2].substr(0,uptime[2].length-1);\n                            var milliseconds = (days*60*60*24*1000)+(hours*60*60*1000)+(minutes*60*1000);\n                            var upSince = new Date( new Date() - milliseconds);\n                            $scope.deviceUpSince = upSince.getTime();\n                            console.log(\"hub controller: found device by API call 006b\");\n\n                            if ($scope.device.documentation_config == 'enabled'){\n                                $scope.initGetTutorials(update);\n                            }\n                            if ($scope.device.softsoc_config == 'enabled'){\n                                $scope.initGetFPGA(update);\n                            }\n\n                        },function errorCallback(response) {\n                            console.log(\"error scanning usb devices\");\n                        });\n                }\n\n                function initGetFPGABoardInfo(update){\n                    $http({\n                        method: 'GET',\n                        url:    '/api/fpgainfo?nocache=' + new Date().getTime()\n                    }).then(function successCallback(response) {\n\n                        $scope.fpga_info = response.data;\n                    }, function errorCallback(response) {\n                        //this only happens for server error\n                        console.log(\"errorCallback with HTTP status \"+response.status);\n                    });\n                }\n\n                // run this first, so that the GUI can show the gateway info fast enough\n                if ($scope.connected){\n                    initSetDevice('True');\n                }\n                else{\n                    initSetDevice('False');\n                }\n                initGetFPGABoardInfo();\n            };\n\n            //Grab tutorial info here for now\n             $scope.initGetTutorials = function(update){\n                    $http({\n                        method: 'GET',\n                        url:    '/api/tutorials?update=' + update + '&nocache=' + new Date().getTime()\n                    }).then(function successCallback(response) {\n\n                        $scope.documentation = response.data;\n                    }, function errorCallback(response) {\n                        //this only happens for server error\n                        console.log(\"errorCallback with HTTP status \"+response.status);\n                    });\n                };\n\n                //Grab fpga info here for now\n                $scope.initGetFPGA = function(update){\n                    $http({\n                        method: 'GET',\n                        url:    '/api/softsoc?update=' + update + '&nocache=' + new Date().getTime()\n                    }).then(function successCallback(response) {\n                        //save available I/O options\n                        $scope.fpga_options = response.data[0];\n\n                        //save I/O option data\n                        $scope.fpga_options_data = response.data[1];\n\n                        //save I/O option descriptions\n                        $scope.option_descriptions = response.data[2];\n\n                        for(var i = 0,numComp = 0; i < $scope.fpga_options_data.length; i++){\n                            //initialize values to zero at start\n                            $scope.fpga_num_comp[i] = 0;\n                            /*\n                            Generate values for table lookup\n                            Note: the IP block in the nth position of the array represents adding the value 2^n\n                            */\n                            for(var j = 0; j < $scope.fpga_options.length; j++){\n                                if ($scope.fpga_options_data[i][$scope.fpga_options[j]] > 0){\n                                    numComp += Math.pow(2,j);\n                                }\n                            }\n                            //save bitstream value for comparison later\n                            $scope.fpga_valid_num[i] = numComp;\n\n                            //reset counter (table value) for each bitstream\n                            numComp = 0;\n                        }\n\n                    }, function errorCallback(response) {\n                        //this only happens for server error\n                        console.log(\"errorCallback with HTTP status \"+response.status);\n                    });\n                };\n\n            iotgatewayhub.expandHub_proxy($scope,$uibModal,$http,$rootScope,$state,workerProcessRestService,utilityFunctionsService);\n\n            iotgatewayhub.expandHub_services($scope,$http,$q,workerProcessRestService);\n\n            iotgatewayhub.expandHub_save_image($scope,$http,$uibModal,workerProcessRestService);\n\n            iotgatewayhub.expandHub_security($scope,$http,$uibModal,workerProcessRestService);\n\n            iotgatewayhub.expandHub_repositories($scope,$http,$state,$uibModal,workerProcessRestService);\n\n            iotgatewayhub.expandHub_packages($scope,$state,$http,$rootScope,$uibModal,$timeout,workerProcessRestService);\n\n            iotgatewayhub.expandHub_pro_upgrade($scope,$http,$state,$uibModal,$timeout,workerProcessRestService,utilityFunctionsService);\n\n            iotgatewayhub.expandHub_openOSUpdate($scope,$uibModal,$http,workerProcessRestService);\n\n            iotgatewayhub.expandHub_gatewayOperations($scope,$http,$state,$timeout,$window);\n\n            $scope.$watchCollection('package_refresh',function(){ $scope.setArrays(true); });\n\n            $scope.$on('hub.lockModal', function(scope){\n                blockUI = true;\n\n                $('.close-admin-modal').hide();\n\n                listener = scope.targetScope.$on('modal.closing', function(event, reason, closed) {\n                    //console.log(prefix + 'modal.closing: ' + (closed ? 'close' : 'dismiss') + '(' + reason + ')');\n                    if (!blockUI) return;\n\n                    //console.log('\\t' + prefix + 'veto (interactive)');\n                    event.preventDefault();\n                });\n\n            });\n\n            $scope.$on('hub.unlockModal', function turnOffListener(){\n\n                $('.close-admin-modal').show();\n                listener();// weird angular-ism\n            });\n\n            $rootScope.$on('$locationChangeStart', function(event) {\n                if(!$rootScope.accepted_license){\n                    $state.go('hub.license',{});\n                }\n            });\n\n            $scope.setupPreventModalClosing();\n\n            // Note: we cannot start a lot of http request at this point.\n            // On slow systems, if there are too many pending requests, new request will be aborted!\n            // So for new request, add it into initHubTasks functions after other requests are done.\n            if ($scope.connected){\n                $scope.initHubTasks('True');\n            }\n            else{\n                $scope.initHubTasks('False');\n            }\n\n            // Other tasks are done when we enter network check state.\n\n            console.log(\"hub controller: EXITING #999z\");\n        }\n    });\n});\n\n\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    $stateProvider.state('hub.license',{ \n        url:         '/hub/license',\n        templateUrl: '/partials/hub.license.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope,utilityFunctionsService){\n\n            // If we are here, then oem_branding_cookies_names's length is > 0\n            var eula_index  = -1;\n            $scope.eulaLoaded = false;\n\n            function findUnacceptedCookieIndex() {\n                var temp_index = -1;\n                for (i = 0; i < oem_branding_cookies_names.length; i++) {\n                    if (!getCookie(oem_branding_cookies_names[i])) {\n                        temp_index = i;\n                        all_accepted = false;\n                        break;\n                    }\n                }\n                return temp_index;\n            }\n\n            function checkEulaCookies(doApply) {\n                eula_index = findUnacceptedCookieIndex();\n                if (eula_index === -1) {\n                    // all accepted\n                    $rootScope.accepted_license = true;\n                    $state.go(\"hub.networkcheck\");\n                } else {\n                    // still has not accepted one\n                    $scope.eulaLoaded = false;\n                    setTimeout(function() {\n                        // encode the file name (only the file name, not the path)\n                        var temp_eula_full_name = oem_branding_eulas[eula_index];\n                        var temp_index = temp_eula_full_name.lastIndexOf(\"/\");\n                        var temp_eula_name = temp_eula_full_name.substring(temp_index + 1);\n                        var temp_eula_path = temp_eula_full_name.substring(0, temp_index + 1);\n                        temp_eula_name = encodeURIComponent(temp_eula_name);\n                        temp_eula_full_name = temp_eula_path + temp_eula_name;\n                        $scope.current_eula_html_file = temp_eula_full_name;\n                        $scope.current_eula_cookie_name = oem_branding_cookies_names[eula_index];\n                        console.log(\"###########current eula##############\");\n                        console.log(oem_branding_eulas);\n                        console.log($scope.current_eula_html_file);\n                        console.log($scope.current_eula_cookie_name);\n                        if (doApply) {\n                            $scope.$apply();\n                        }\n                    }, 1500);\n                }\n            }\n\n            $scope.cancel = function(){\n                authorization = {};\n                $rootScope.loggedin =  false;\n                $state.go('welcome.login',{});\n            };\n\n            $scope.agree = function(){\n                // set this eula as accepted\n                utilityFunctionsService.setCookie($scope.current_eula_cookie_name,\"true\",license_duration_days);\n\n                // continue checking\n                checkEulaCookies(true);\n            };\n\n            if(!authorization.username){\n                console.log(\"auth failed in hub license 001b\");\n                $state.go('welcome.login',{});\n            }\n\n            // initial checking\n            checkEulaCookies(true);\n        }\n    });\n});"," iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    $stateProvider.state('hub.networkcheck',{ \n        url:         '/hub/networkcheck',\n        //template:\"<div>&nbsp;</div>\",\n        templateUrl:    'partials/hub.loading.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope){\n            if(!authorization.username){\n                $state.go('welcome.login',{});\n            }\n\n            setupNoConnection(true);\n            $scope.loadMessage = \"Checking network connection, and if needed, adding repositories and building packages list. This may take a few minutes.\";\n            $scope.showMessage = true;\n\n            // run this later so that GUI has a chance to refresh\n            setTimeout(function() {\n                    $scope.proceedToNetworkCheck();\n                }, 1000);\n        }\n    });\n });\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    $stateProvider.state('hub.networkconnected',{ \n        url:         '/hub/networkconnected', \n        templateUrl: '/partials/hub.networkconnected.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope){\n            if(!authorization.username){\n                $state.go('welcome.login',{});\n            }\n\n            $scope.dashboard = function(){\n                if ($scope.connected){\n                    if ($scope.device.documentation_config == 'enabled'){\n                        $scope.initGetTutorials('True');\n                    }\n                    if ($scope.device.softsoc_config == 'enabled'){\n                        $scope.initGetFPGA('True');\n                    }\n\n                    $scope.initHubTasks('True');\n                }\n                else{\n                    if ($scope.device.documentation_config == 'enabled'){\n                        $scope.initGetTutorials('False');\n                    }\n                    if ($scope.device.softsoc_config == 'enabled'){\n                        $scope.initGetFPGA('False');\n                    }\n\n                    $scope.initHubTasks('False');\n                }\n                $state.go('hub.dashboard.' + $scope.device.default_tab,{});\n            };\n        }\n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    /* NOTE: this state uses the networksettings DIRECTIVE */\n\n    $stateProvider.state('hub.networksettings',{\n        url:         '/hub/networksettings',\n        templateUrl: '/partials/hub.networksettings.main.ng.html?version=' + gui_version,\n        scope:false,\n        controller: function($scope,$state,$http,$rootScope){\n            $scope.cancelText=\"Skip\";\n            $scope.hideTestSettings=true;\n            $scope.maintainContextAfterSave = false;\n\n            $scope.skipSettings = function(){\n                $state.go('hub.dashboard.' + $scope.device.default_tab,{});\n            };\n\n            $scope.doneSuccessCallback = function(){\n                $state.go('hub.networkconnected',{});\n            };\n        }\n    });\n});\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    $stateProvider.state('hub.nonetwork',{ \n        url:         '/hub/nonetwork', \n        templateUrl: '/partials/hub.nonetwork.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope){\n            if(!authorization.username){\n                $state.go('welcome.login',{});\n            }\n\n            $scope.configureNetwork = function(){\n                $scope.getProxySettings(function() {\n                    $state.go('hub.networksettings',{});\n                });\n            };\n\n            $scope.skipConfigureNetwork = function(){\n                $rootScope.loggedin = true;\n                $state.go('hub.dashboard.' + $scope.device.default_tab,{});\n            };\n\n        }\n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    $stateProvider.state(\"hub.test\",{\n        url:         '/hub/test', \n        templateUrl: '/partials/hub.test.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope){\n            if(!bypass_auth && !authorization.username){\n               $state.go('welcome.login',{}); \n            }\n        }\n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n\n    $stateProvider.state('tutorial',{ // only state that is not a descendant of hub. this presents the login page and background image\n        url: '',\n        abstract:    true,\n        templateUrl: '/partials/hub.tutorial.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope,$uibModal){\n            setupNoConnection(true);\n        }\n    })\n    .state('tutorial.sensorsetup',{\n        url: '/tutorial/sensorsetup',\n        templateUrl: '/partials/tutorial.sensorsetup.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope){\n            authorization = {};\n        }\n    })\n    .state('tutorial.sensorcloud',{\n        url: '/tutorial/sensorcloud',\n        templateUrl: '/partials/tutorial.sensorcloud.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope){\n            authorization = {};\n        }\n    })\n    .state('tutorial.helixapp',{\n        url: '/tutorial/helixapp',\n        templateUrl: '/partials/tutorial.helixapp.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope){\n            authorization = {};\n        }\n    })\n    .state('tutorial.savedeploy',{\n        url: '/tutorial/savedeploy',\n        templateUrl: '/partials/tutorial.savedeploy.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope){\n            authorization = {};\n        }\n    })\n    .state('tutorial.savedeploy_quark', {\n        url: '/tutorial/savedeploy_quark',\n        templateUrl: '/partials/tutorial.savedeploy_quark.ng.html?version=' + gui_version,\n        controller: function ($window, $scope, $state, $rootScope) {\n            authorization = {};\n        }\n    });\n});\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    $stateProvider.state('welcome',{ //only state that is not a descendant of hub. this presents the login page and background image\n        url: '', \n        abstract:    true,\n        templateUrl: '/partials/welcome.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope,$uibModal){\n            setupNoConnection(false);\n\n            $rootScope.loggedin = false;\n            $scope.authentication = {};\n            $scope.connected = false;\n\n            $scope.broadcastFailure = function(bMessage) {\n                $scope.$broadcast(bMessage);\n            };\n\n            $scope.handleAuthenticated = function() {\n                authorization = {\"username\": $scope.authentication.username};\n                $rootScope.loggedin    = true;\n\n                //so we have to save these in scope to check against upgrade to pro.\n                //don't quite like this idea security-wise but it is only way to pre-check auth before sending call,\n                //if that is what they want.\n                $rootScope.credentials = {\"username\": $scope.authentication.username, \"password\": $scope.authentication.password};\n\n                if (!$rootScope.accepted_license) {\n                    $state.go('hub.license',{});\n                } else {\n                    $state.go('hub.networkcheck',{});\n                }\n            };\n\n            $scope.checkAuth = function(){\n                var _datatype = \"json\";\n                var _method   = \"POST\";\n                var _uri      = '/api/validate_session';\n\n                $http({\n                    method: _method,\n                    url: _uri,\n                    data: JSON.stringify(),\n                    headers: {\n                        'Content-type' : 'application/json'\n                    }\n                }).then(function successCallback(response){\n                    if(response.data.status===\"success\"){\n                        authorization = {\"username\": \"preauthed\"};\n                        $rootScope.loggedin = true;\n\n                        if (!$rootScope.accepted_license) {\n                            $state.go('hub.license',{});\n                        } else {\n                            $state.go('hub.networkcheck',{});\n                        }\n                    } else {\n                        // should not be reached\n                        $scope.showLogin = true;\n                    }\n                }, function errorCallback(response){\n                    $scope.showLogin = true;\n                });\n            };\n\n            $scope.continueWelcomeLogin = function() {\n                if (do_validate_session) {\n                    $scope.checkAuth();\n                } else {\n                    // force to show login\n                    $scope.showLogin = true;\n                }\n                do_validate_session = true;\n            };\n\n            $scope.setOEMBrandingCookiesNames = function() {\n                oem_branding_cookies_names.length = 0;\n                for (i = 0; i < oem_branding_eulas.length; i++) {\n                    var temp_datetime = '';\n                    if (i < oem_branding_eulas_datetime.length) {\n                        temp_datetime = oem_branding_eulas_datetime[i];\n                    }\n                    var temp_cookiename = oem_branding_eulas[i].concat(temp_datetime);\n                    // \\s is regex for whitespace. g is global flag.\n                    // temp_cookiename = temp_cookiename.replace(/\\s+/g, '');\n                    // keep only a-Z and 0 - 9\n                    temp_cookiename = temp_cookiename.toLowerCase().replace(/[^a-zA-Z0-9]+/g, '');\n                    oem_branding_cookies_names.push(temp_cookiename);\n                }\n                console.log(\"#############oem cookies names#################\");\n                console.log(oem_branding_cookies_names);\n            };\n\n            $scope.checkOEMBrandingCookies = function() {\n                var temp_accepted = true;\n                for (i = 0; i < oem_branding_cookies_names.length; i++) {\n                    if (!getCookie(oem_branding_cookies_names[i])) {\n                        temp_accepted = false;\n                        break;\n                    }\n                }\n                $rootScope.accepted_license = temp_accepted;\n                console.log(\"accepted all licenses? \"+$rootScope.accepted_license);\n            };\n\n            $scope.getOEMBranding = function(){\n                $http({\n                    method: 'GET',\n                    url:    '/api/oembranding?nocache=' + new Date().getTime()\n                }).then(function successCallback(response) {\n                    console.log(\"got oem branding\");\n\n                    try {\n                        if (response.data.status === 'success') {\n                            // set the oem branding config\n                            oem_branding_logo_file = response.data.result.logo_file;\n                            oem_branding_eulas = response.data.result.eula_files;\n                            oem_branding_eulas_datetime = response.data.result.eula_files_datetime;\n                            $scope.setOEMBrandingCookiesNames();\n                            $scope.checkOEMBrandingCookies();\n                        }\n                    } catch(err){\n                    }\n\n                    $scope.continueWelcomeLogin();\n                },function errorCallback(response) {\n                    console.log(\"error getting oem branding\");\n                    console.log(response);\n                    $scope.continueWelcomeLogin();\n                });\n            };\n\n            $scope.getOEMBranding();\n        }\n    });\n});\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    $stateProvider.state('welcome.login',{ \n        url:         '/welcome/login', \n        templateUrl: '/partials/welcome.login.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope,$timeout,$window){\n            authorization = {};\n            // hide error messages until 'submit' event\n            $scope.submitted = false;\n            // hide success message\n            $scope.showMessage = false;\n            // show go button\n            $scope.showGo = true;\n            // status message\n            $scope.barMessage = 'Authenticating...';\n            // server error message\n            $scope.serverErrorMessage = 'A server error occurred! Refresh page and try again!';\n            // method called from shakeThat directive\n            $scope.keyPressed = function($event) {\n                if($event.keyCode != 13) return;\n                if ($scope.login.username && $scope.login.password) $scope.login();\n            };\n\n            $scope.login = function() {\n                // hide go button and show status bar\n                $scope.showGo = false;\n\n                var internalAuthentication = function(firstTime) {\n                    $scope.authentication = { \"username\": $scope.login.username, \"password\": $scope.login.password };\n                    var _username = $scope.authentication.username;\n                    var _password = $scope.authentication.password;\n\n                    var do_auth = 'False';\n                    if (firstTime) {\n                        do_auth = 'True';\n                    }\n\n                    $http({\n                        method: 'POST',\n                        url: '/api/auth',\n                        data:  JSON.stringify({\"username\":_username,\"password\":_password, \"do_auth\": do_auth}),\n                        headers : {\n                            'Content-type' : 'application/json'\n                        }\n                    }).then(function successCallback(response) {\n                        //check result of login, set username in session if success\n                        //should not succeed for HTTP DIGEST on first call (since no Authorization header provided)\n                        //can be used for old style simple login\n                        if (response.data.status === 'success') {\n                            if (response.data.init_in_progress === false) {\n                                ////////////////////////////////\n                                // Authentication worked, and server initialization is done.\n                                ////////////////////////////////\n                                // done\n                                $scope.showGo = true;\n                                $scope.handleAuthenticated();\n                            } else {\n                                ////////////////////////////////\n                                // Authentication worked, and server initialization is not done.\n                                ////////////////////////////////\n                                // start checking after some delay (larger delay than the authentication part)\n                                setTimeout(function() {\n                                        internalAuthentication(false);\n                                    }, rest_check_interval_milliseconds_m);\n                                $scope.barMessage = 'Waiting for server setup...';\n                            }\n                        } else {\n                            ////////////////////////////////\n                            // Authentication call went through, but authentication failed.\n                            ////////////////////////////////\n                            $scope.broadcastFailure(\"welcome.loginFailed\");\n                        }\n                    }, function errorCallback(response) {\n                        ////////////////////////////////\n                        // Authentication call failed\n                        ////////////////////////////////\n                        if (response.status == 401) {\n                            $scope.broadcastFailure(\"welcome.loginFailed\");\n                        } else if (response.status === 408) {\n                            // request timeout\n                            // ignore and continue checking\n                            // start checking after some delay (larger delay than the init authentication part)\n                            setTimeout(function() {\n                                        internalAuthentication(false);\n                                    }, rest_check_interval_milliseconds_m);\n                            // do not change message.\n                        } else if (response.status === -1) {\n                            $scope.serverErrorMessage = 'Cannot connect to the gateway yet! Try again after page is refreshed.';\n                            $scope.broadcastFailure(\"welcome.loginServerError\");\n                            console.log(\"ERROR response status=\"+response.status);\n\n                            // refresh the web page to get the index.html from server\n                            setTimeout(function() {\n                                    $window.location.reload();\n                                }, 4000);\n                        } else {\n                            $scope.serverErrorMessage = 'A server error occurred! Try again after page is refreshed! ';\n                            $scope.broadcastFailure(\"welcome.loginServerError\");\n                            console.log(\"ERROR response status=\"+response.status);\n\n                            // refresh the web page to get the index.html from server\n                            setTimeout(function() {\n                                    $window.location.reload();\n                                }, 4000);\n                        }\n                    });\n                };\n\n                internalAuthentication(true);\n            };\n\n            $scope.submit = function() {\n                // show success message\n                $scope.showMessage = true;\n            };\n            \n            $scope.$on(\"welcome.loginFailed\", function(){\n                // show go\n                $scope.showGo = true;\n\n                $scope.showAuthenticationError = true;\n\n                var $animate = $('.container div div');\n                $animate.addClass( 'shake');\n                setTimeout(function() {\n                    $animate.removeClass('shake');\n                }, 100);\n\n                $scope.login.password=null;\n\n                $animate.addClass(\"invalid\");\n\n                $animate.find('input').on(\"click\", function(){\n                    $animate.removeClass(\"invalid\");\n                    $scope.showAuthenticationError = false;\n                });\n            });\n\n            $scope.$on(\"welcome.loginServerError\", function(){\n                // show go\n                $scope.showGo = true;\n\n                $scope.showServerError = true;\n\n                $timeout(function(){\n                    $scope.showServerError = false;\n                },8000);\n\n                $('.login-form').find('input').on(\"click\",\n                    function() {\n                        $scope.$apply(function () {\n                            $scope.showServerError = false;\n                        });\n                    }\n                );\n            });\n        }\n    });\n});\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    $stateProvider.state('welcome.privacy',{\n        url:         '/welcome/privacy', \n        templateUrl: '/partials/welcome.privacy.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope,$uibModal,utilityFunctionsService){\n             console.log(\"welcome privacy statement #01003a\");\n             $scope.continueToLogin = function(){\n                  console.log(\"welcome agreed to privacy statement #01003b\");\n                  utilityFunctionsService.setCookie(\"privacy\",true,license_duration_days);\n                  $state.go('welcome.login');\n             };\n        }\n    });\n});","// These are general functions used in several states.\niotgatewayhub.expandHub_gatewayOperations = function($scope,$http,$state,$timeout,$window) {\n\n    $scope.rebootGateway = function(_success, _error, timeout_value){\n        // briefly cancel the network checking so that no connection error won't pop-up.\n        // When we go to state.hub again, it will be rescheduled.\n        $scope.stopCheckingNetwork();\n\n        // We give reboot gateway a timeout, so that we will get some response back.\n        $http({\n            method: 'PUT',\n            url:    '/api/osc',\n            timeout: reboot_request_timeout_milliseconds\n        }).then(function successCallback(response) {\n            $timeout(function () {\n                // do not validate session so that we can show login.\n                do_validate_session = false;\n                //$window.location.href = '/';\n                $state.go('welcome.login');\n            }, timeout_value);\n            if(_.isFunction(_success)){ _success(response); }\n        }, function errorCallback(response) {\n            $scope.startCheckingNetwork();\n            if(_.isFunction(_error)){ _error(response); }\n        });\n    };\n\n    $scope.scanUSBDevices = function(){\n        $scope.scanning_usb = true;\n        console.log(\"hub controller: scanning usb devices\");\n        $http({\n            method: 'GET',\n            url:    '/api/usb?nocache=' + new Date().getTime()\n        }).then(function successCallback(response) {\n            $scope.usb_devices = response.data;\n            $scope.scanning_usb = false;\n            console.log(\"hub controller: scanUSBdevices found \"+$scope.usb_devices.length+\" usb devices\");\n        },function errorCallback(response) {\n            console.log(\"error scanning usb devices\");\n            $scope.scanning_usb = true;\n        });\n    };\n\n    $scope.verifyFileExisted = function(file_path, passedSuccessCallback, passedErrorCallback){\n        $http({\n            method : 'GET',\n            url    : '/api/file?path=' + encodeURIComponent(file_path) +'&nocache=' + new Date().getTime()\n        }).then(\n            function successCallback(response) {\n                if(_.isFunction(passedSuccessCallback)){ passedSuccessCallback(response.data); }\n            },function errorCallback(response) {\n                if(_.isFunction(passedErrorCallback)){ passedErrorCallback(response); }\n            });\n    };\n\n    $scope.getAccounts = function(passedSuccessCallback, passedErrorCallback){\n        $http({\n            method : 'GET',\n            url    : '/api/accounts?nocache=' + new Date().getTime()\n        }).then(\n            function successCallback(response) {\n                if(_.isFunction(passedSuccessCallback)){ passedSuccessCallback(response.data); }\n            },function errorCallback(response) {\n                if(_.isFunction(passedErrorCallback)){ passedErrorCallback(response); }\n            });\n    };\n\n\n    $scope.logout = function(){\n        var _method   = \"GET\";\n        var _uri      = '/api/auth?nocache=' + new Date().getTime();\n\n        $http({\n            method: _method,\n            url:    _uri,\n            headers : {'Content-type' : 'application/json'}\n        }).then(function successCallback(response) {\n            $state.go('welcome.login');\n        }, function errorCallback(response) {\n            $state.go('welcome.login');\n        });\n    };\n\n};\n","// These are general functions used in several states.\niotgatewayhub.expandHub_openOSUpdate = function($scope,$uibModal,$http,workerProcessRestService) {\n\n    ///////////////////////////////////////\n    // GUI Modals\n    //////////////////////////////////////\n\n    $scope.enterOSCredential = function(){\n        console.log(\"hub entering OS credential\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.confirm.os.update.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.do_enter_credential = true;\n                $scope.do_confirm_update = false;\n\n                $scope.credentials = {username: null, password: null};\n                $scope.cancelOSUpdate = function(){\n                    console.log(\"hub canceling OS credential\");\n                    $scope.informOSUpdate_CancelWarning();\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueChecking = function(){\n                    $scope.checkOSUpdate($scope.credentials);\n                    modalInstance.dismiss('cancel');\n                };\n\n            }\n\n        });\n    };\n\n    $scope.checkOSUpdate = function(_credentials) {\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.os.update.inprogress.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                console.log(\"hub controller: getting osupdate 007a\");\n\n                $scope.title_message = \"OS Update: Checking in Progress\";\n                $scope.description_message = \"Please do not power-down the gateway. Will be auto-redirected to another page once checking is complete.\";\n                $scope.bar_before_message = \"Checking update availability...\";\n                $scope.bar_after_message = null;\n                $scope.error_message = null;\n                $scope.show_close_button = false;\n\n                // prepare for body data\n                if (typeof _credentials === \"undefined\") {\n                    content_body = {type: \"check\", request: \"rcpl\"};\n                } else {\n                    content_body = _credentials;\n                    content_body.type = \"check\";\n                    content_body.request = \"rcpl\";\n                }\n\n                // make the POST call\n                tempURL = '/api/osup';\n                workerProcessRestService.performGeneralExecution('POST', tempURL, false, true, content_body,\n                    function successCallback(data) {\n                        if (data.status === 'failure') {\n                            $scope.informOSUpdateError(data.message);\n                            modalInstance.dismiss('cancel');\n                        } else {\n                            $scope.foundOSUpdate = data.update;\n                            if($scope.foundOSUpdate){\n                                $scope.confirmOSUpdate(_credentials);\n                                modalInstance.dismiss('cancel');\n                            }else{\n                                $scope.checkOSUpdate_Packages(modalInstance);\n                            }\n                        }\n                    }, function errorCallback(errorMessage){\n                        $scope.informOSUpdateError(errorMessage);\n                        modalInstance.dismiss('cancel');\n                    }, rest_check_interval_milliseconds);\n            }\n        });\n    };\n\n    $scope.checkOSUpdate_Packages = function(modalInstance) {\n        console.log(\"hub controller: getting osupdate_package\");\n\n        // prepare for body data\n        content_body = {type: \"check\", request: \"package\"};\n\n        // make the POST call\n        tempURL = '/api/osup';\n        workerProcessRestService.performGeneralExecution('POST', tempURL, false, true, content_body,\n            function successCallback(data) {\n                if (data.status === 'failure') {\n                    $scope.informOSUpdateError(data.message);\n                    modalInstance.dismiss('cancel');\n                } else {\n                    $scope.foundOSUpdate_Packages = data.package_update;\n                    if($scope.foundOSUpdate_Packages){\n                        $scope.OSUpdate_Packages = data.packages;\n                        $scope.confirmOSUpdatePackages();\n                        modalInstance.dismiss('cancel');\n                    }else{\n                        $scope.informOSUpdateNotAvailable();\n                        modalInstance.dismiss('cancel');\n                    }\n                }\n            }, function errorCallback(errorMessage) {\n                $scope.informOSUpdateError(errorMessage);\n                modalInstance.dismiss('cancel');\n            }, rest_check_interval_milliseconds);\n    };\n\n    $scope.confirmOSUpdate = function(_credentials){\n        console.log(\"hub confirming os update\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.confirm.os.update.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.do_enter_credential = false;\n                $scope.do_confirm_update = true;\n\n                $scope.cancelOSUpdate = function(){\n                    console.log(\"hub canceling os update\");\n                    $scope.informOSUpdate_CancelWarning();\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.doOSUpdate = function(){\n                    $scope.showOSUpdate(_credentials);\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.confirmOSUpdatePackages = function(){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.confirm.os.update.package.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.cancelOSUpdate = function(){\n                    $scope.informOSUpdate_CancelWarning();\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.doOSUpdate_Packages = function(){\n                    $scope.showOSUpdatePackages();\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.showOSUpdate = function(_credentials){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.os.update.inprogress.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.title_message = \"OS Update: Installation in Progress\";\n                if ($scope.isQuark === true) {\n                    $scope.description_message = \"Please do not power-down the gateway. The OS update is in progress, downloading updates and installing onto this gateway. The update takes several hours in most network conditions.\";\n                } else {\n                    $scope.description_message = \"Please do not power-down the gateway. The OS update is in progress, downloading updates and installing onto this gateway. The update takes up to an hour in most network conditions.\";\n                }\n                $scope.bar_before_message = \"\";\n                $scope.bar_after_message = \"The gateway will automatically restart once update is complete.\";\n                $scope.error_message = null;\n                $scope.show_close_button = false;\n\n                console.log(\"performing os update\");\n\n                $scope.performUpdateSequence = function(){\n                    $scope.bar_before_message = 'Update in Progress...';\n                    $scope.error_message  = null;\n\n                    // prepare for body data\n                    content_body = _credentials;\n                    content_body.type = \"update_rcpl\";\n\n                    // make the POST call\n                    tempURL = '/api/osup';\n                    workerProcessRestService.performGeneralExecution('POST', tempURL, false, true, content_body,\n                        function successCallback(data) {\n                            if (data.status === 'success'){\n                                $scope.informOSUpdateRestart();\n                                modalInstance.dismiss('cancel');\n                            } else {\n                                $scope.informOSUpdateError(data.message);\n                                modalInstance.dismiss('cancel');\n                            }\n                        }, function errorCallback(errorMessage) {\n                            $scope.informOSUpdateError(errorMessage);\n                            modalInstance.dismiss('cancel');\n                        }, rest_check_interval_milliseconds_ll);\n                };\n\n                $scope.performUpdateSequence();\n            }\n        });\n    };\n\n    $scope.showOSUpdatePackages = function(){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.os.update.inprogress.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.title_message = \"OS Update: Installation in Progress\";\n                $scope.description_message = \"Please do not power-down the gateway. The OS update is in progress, downloading updates and installing onto this gateway. The updating time depends on the number of packages that need to be updated.\";\n                $scope.bar_before_message = \"\";\n                $scope.bar_after_message = \"The gateway will automatically restart once update is complete.\";\n                $scope.error_message = null;\n                $scope.show_close_button = false;\n\n                console.log(\"hub controller: updating OS packages\");\n\n                // prepare for body data\n                content_body = {type: \"update_packages\"};\n\n                // make the POST call\n                tempURL = '/api/osup';\n                workerProcessRestService.performGeneralExecution('POST', tempURL, false, true, content_body,\n                    function successCallback(data) {\n                        if (data.status === 'success') {\n                            // so that we can get the available update count to display.\n                            try {\n                                var p_list = JSON.parse(data.p_list);\n                                if ($scope.connected){\n                                    $scope.setPackages('True', p_list);\n                                }\n                                else{\n                                    $scope.setPackages('False', p_list);\n                                }\n                            } catch(e) {\n                                // ignore error\n                            }\n\n                            $scope.informOSUpdateRestart();\n                            modalInstance.dismiss('cancel');\n                        }else{\n                            console.log(\"error updating OS packages.\");\n                            $scope.informOSUpdateError(response.data.message);\n                            modalInstance.dismiss('cancel');\n                        }\n                    }, function errorCallback(errorMessage) {\n                        $scope.informOSUpdateError(errorMessage);\n                        modalInstance.dismiss('cancel');\n                    }, rest_check_interval_milliseconds_l);\n            }\n        });\n    };\n\n    $scope.informOSUpdateRestart = function(){\n        console.log(\"inform os update restart\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.os.update.end.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n                $scope.title_message = \"OS Update: Installation Complete\";\n                $scope.description_message = \"\";\n                $scope.show_bar = true;\n                $scope.bar_before_message = \"Update Installed!\";\n                $scope.bar_after_message = \"The gateway will automatically restart in 10 seconds.\";\n                $scope.show_last_error = false;\n                $scope.show_last_normal = true;\n                $scope.show_close = true;\n                $scope.show_close_button = false;\n                $scope.show_warning_html = false;\n\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.rebootGateway(\n                    function successCallback(response) {\n                        console.log(\"rebooted gateway: \" + response.data.status);\n                        $timeout(function(){\n                            modalInstance.dismiss('cancel');\n                        }, restart_welcome_latency_milliseconds - 1000);\n                    }, function errorCallback(response) {\n                        console.log(\"gateway reboot failed\");\n                        $scope.bar_after_message = \"Rebooting gateway failed! Please manually restart the gateway!\";\n                        $scope.show_last_error = true;\n                        $scope.show_last_normal = false;\n                    }, restart_welcome_latency_milliseconds);\n            }\n        });\n    };\n\n    $scope.informOSUpdateError = function(_error_message){\n        console.log(\"inform os update error\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.os.update.end.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.title_message = \"OS Update: Installation Error\";\n                $scope.description_message = \"\";\n                $scope.show_bar = true;\n                $scope.bar_before_message = \"Update Failed!\";\n                $scope.bar_after_message = _error_message;\n                $scope.show_last_error = true;\n                $scope.show_last_normal = false;\n                $scope.show_close = true;\n                $scope.show_close_button = false;\n                $scope.show_warning_html = false;\n\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.informOSUpdateNotAvailable = function(){\n        console.log(\"hub confirming os update #8490a\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.os.update.end.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.title_message = \"OS Update: No Update\";\n                $scope.description_message = \"\";\n                $scope.show_bar = true;\n                $scope.bar_before_message = \"Update Not Available!\";\n                $scope.bar_after_message = \"\";\n                $scope.show_last_error = false;\n                $scope.show_last_normal = true;\n                $scope.show_close = false;\n                $scope.show_close_button = true;\n                $scope.show_warning_html = false;\n\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.informOSUpdateDone = function(){\n        console.log(\"inform os update done\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.os.update.end.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n                $scope.title_message = \"OS Update: Installation Complete\";\n                $scope.description_message = \"\";\n                $scope.show_bar = true;\n                $scope.bar_before_message = \"Update Installed!\";\n                $scope.bar_after_message = \"\";\n                $scope.show_last_error = false;\n                $scope.show_last_normal = true;\n                $scope.show_close = false;\n                $scope.show_close_button = true;\n                $scope.show_warning_html = false;\n\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n            }\n\n        });\n    };\n\n    $scope.informOSUpdate_CancelWarning = function(){\n        // disable this for now\n\n        /*\n        console.log(\"inform os update cancel warning\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.os.update.end.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n                $scope.title_message = \"OS Update: Update Cancelled\";\n                $scope.description_message = '';\n                $scope.show_bar = false;\n                $scope.bar_before_message = \"\";\n                $scope.bar_after_message = \"\";\n                $scope.show_last_error = false;\n                $scope.show_last_normal = false;\n                $scope.show_close = false;\n                $scope.show_close_button = true;\n                $scope.show_warning_html = true;\n\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n            }\n\n        });\n        */\n    };\n};","// These are general functions used in several states.\niotgatewayhub.expandHub_packages = function($scope,$state,$http,$rootScope,$uibModal,$timeout,workerProcessRestService) {\n\n    var PACKAGE_ACTIVITY_TYPE = {\n        INSTALL: \"INSTALL\",\n        UNINSTALL: \"UNINSTALL\",\n        UPDATE: \"UPDATE\",\n        UPDATE_ALL: \"UPDATE_ALL\",\n        SELF_UPDATE: \"SELF_UPDATE\"\n    };\n\n    var PACKAGE_STATE = {\n        INSTALLED: \"INSTALLED\",\n        UNINSTALLED: \"UNINSTALLED\",\n        UPDATED:\"UPDATED\",\n        UPDATE_FAILED:\"UPDATE_FAILED\"\n    };\n\n    // The Global State //\n    $scope.$on('packageActivityStart', function(opt, args){\n        var $s = opt.currentScope;\n        var _type = \"NA\";\n        var _name = \"NA\";\n        if(args){\n            _name = args[0] ?  args[0] : '';\n            _type= args[1] ?  args[1] : '';\n        }\n\n        $s.package_activity = true;\n\n        switch(_type){\n            case PACKAGE_ACTIVITY_TYPE.INSTALL:\n                $s.installing_package[_name] = true;\n                $s.installing_any_package     = true;\n                break;\n\n            case PACKAGE_ACTIVITY_TYPE.UNINSTALL:\n                $s.uninstalling_package[_name] = true;\n                break;\n\n            case PACKAGE_ACTIVITY_TYPE.UPDATE:\n                $s.updating_package[_name] = true;\n                break;\n\n            case PACKAGE_ACTIVITY_TYPE.SELF_UPDATE:\n                $s.selfUpgrading = true;\n                $s.updating_package[_name] = true;\n                break;\n\n            case PACKAGE_ACTIVITY_TYPE.UPDATE_ALL:\n                $s.installing_all_package_updates = true;\n                break;\n\n        }\n    });\n\n    $scope.$on('packageActivityStop', function(opt, args){\n        var $s = opt.currentScope;\n        var _type = \"NA\";\n        var _name = \"NA\";\n        if(args){\n            _name = args[0] ?  args[0] : '';\n            _type= args[1] ?  args[1] : '';\n        }\n        // manages package activity states, regardless of success/failure\n\n        $s.package_activity = false;\n\n        switch(_type){\n            case PACKAGE_ACTIVITY_TYPE.INSTALL:\n                $s.installing_package[_name] = false;\n                $s.installing_any_package     = false;\n                break;\n\n            case PACKAGE_ACTIVITY_TYPE.UNINSTALL:\n                $s.uninstalling_package[_name] = false;\n                break;\n\n            case PACKAGE_ACTIVITY_TYPE.UPDATE:\n                $s.updating_package[_name] = false;\n                break;\n\n            case PACKAGE_ACTIVITY_TYPE.SELF_UPDATE:\n                $s.selfUpgrading = false;\n                $s.updating_package[_name] = false;\n                break;\n\n            case PACKAGE_ACTIVITY_TYPE.UPDATE_ALL:\n                $s.installing_all_package_updates = false;\n        }\n    });\n\n    ///////////////////////////////////////\n    // Package functions - basic ops\n    //////////////////////////////////////\n\n    function basicInstallPackage(_name,_trust, successCallback, errorCallback) {\n        var _untrusted_query = \"&rpm=untrusted\";\n        tempURL = '/api/packages?package='+encodeURIComponent(_name)+(_trust?_untrusted_query:'');\n        workerProcessRestService.performGeneralExecution('POST', tempURL, false, false, null,\n            successCallback, errorCallback, rest_check_interval_milliseconds_m);\n    }\n\n    function basicUninstallPackage(_name, successCallback, errorCallback) {\n        tempURL = '/api/packages?package='+encodeURIComponent(_name);\n        workerProcessRestService.performGeneralExecution('DELETE', tempURL, false, false, null,\n            successCallback, errorCallback, rest_check_interval_milliseconds_m);\n    }\n\n    function basicUpdatePackage(_name, _trust, successCallback, errorCallback) {\n        var _untrusted_query = \"&rpm=untrusted\";\n        tempURL = '/api/packages?package='+encodeURIComponent(_name)+(_trust?_untrusted_query:'');\n        workerProcessRestService.performGeneralExecution('PUT', tempURL, false, false, null,\n            successCallback, errorCallback, rest_check_interval_milliseconds_m);\n    }\n\n    function basicUpdateAllPackages(_trust, successCallback, errorCallback) {\n        var _untrusted_query = \"&rpm=untrusted\";\n        tempURL = '/api/packages?package=all'+(_trust?_untrusted_query:'');\n        workerProcessRestService.performGeneralExecution('PUT', tempURL, false, false, null,\n            successCallback, errorCallback, rest_check_interval_milliseconds_l);\n    }\n\n    function basicSelfUpgrade(successCallback, errorCallback) {\n        tempURL = '/api/selfupgrade';\n        workerProcessRestService.performGeneralExecutionOnlySubmit('PUT', tempURL, true, false, null,\n            successCallback, errorCallback);\n    }\n\n    ///////////////////////////////////////\n    // Package functions\n    //////////////////////////////////////\n\n    $scope.checkForPackageActivity = function(){\n        return $scope.package_activity || $scope.installing_any_package; // true value means block IO\n    };\n\n    function changePackageState(_package, state, blockSetArr, message ){\n\n        // Modifies the models\n\n        switch(state){\n            case PACKAGE_STATE.INSTALLED:\n                _package.installed = true;\n                $scope.installed_package[_package.name] = true;\n                break;\n\n            case PACKAGE_STATE.UNINSTALLED:\n                _package.installed = false;\n                $scope.installed_package[_package.name]  = false;\n                _.remove($scope.installed, { 'name': _package.name });\n                if(!blockSetArr) $scope.setArrays(true);\n                break;\n\n            case PACKAGE_STATE.UPDATED:\n                $scope.updating_package[_package.name] = false;\n                _package.version        =_package.upgrade_version;\n                _package.upgrade_version= null;\n                $scope.updated_package[_package.name] = true;\n                if(!blockSetArr) $scope.setArrays(false);\n                break;\n\n            case PACKAGE_STATE.UPDATE_FAILED:\n                if (typeof message === \"undefined\") {\n                    update_message = '';\n                } else {\n                    update_message = message;\n                }\n                $scope.updating_package[_package.name] = false;\n                $scope.update_package_failed[_package.name] = true;\n                $scope.update_package_fail_message[_package.name] = update_message;\n                break;\n        }\n    }\n\n    $scope.showPackageInfo = function(_package){\n        tempURL = '/api/packageinfo?name='+_package.name;\n        workerProcessRestService.informGeneralChecking('GET', tempURL, false, false, null,\n            _package.name, '', 'Getting Package Information...',\n             function successCallback(data) {\n                var _details = data;\n                for (var attrname in _details) { _package[attrname] = _details[attrname]; }\n                $scope.openPackageInfoModal(_package);\n             }, rest_check_interval_milliseconds_m);\n    };\n\n    $scope.installPackage = function(_package,_success,_error,_trust){\n        var _name = _package.name;\n        $scope.message = '';\n\n        // Check for blockers\n        if(_package.installed){\n            console.log(\"hub control not installing package \"+_name+ \" because it is already installed #9033z\");\n            return;\n        }\n\n        if($scope.checkForPackageActivity()){\n            console.log(\"hub control not installing package \"+_name+ \" because package activity in progress #9033q\");\n            return;\n        }\n\n        // Start install\n        $rootScope.$broadcast('packageActivityStart', [_name, PACKAGE_ACTIVITY_TYPE.INSTALL]);\n        basicInstallPackage(_name, _trust,\n            function successCallback(data) {\n                $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.INSTALL]);\n                if (data.status===\"success\") {\n                    changePackageState(_package, PACKAGE_STATE.INSTALLED);\n\n                    try {\n                        var p_list = JSON.parse(data.p_list);\n                        if ($scope.connected){\n                            $scope.setPackages('True', p_list);\n                        }\n                        else{\n                            $scope.setPackages('False', p_list);\n                        }\n                    } catch(e) {\n                        // ignore error\n                    }\n\n                    $timeout(function(){\n                        $scope.setArrays(true);\n                        if(_.isFunction(_success)){ _success(); }\n                    },1500);\n                } else if (data.status==='untrusted' && !_trust){\n                    //$scope.openInstallUntrustedPackageModal(_package, data.error)\n                    _package.confirmUntrusted = true;\n                } else {\n                    $scope.openInstallPackageErrorModal('Package Install Error', _package, data.message);\n                    if(_.isFunction(_error)){_error();}\n                }\n            }, function errorCallback(errorMessage) {\n                $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.INSTALL]);\n                $scope.openInstallPackageErrorModal('Package Install Error', _package, errorMessage);\n                if(_.isFunction(_error)){_error();}\n            });\n    };\n\n    $scope.uninstallPackage = function(_package){\n        var _name = _package.name;\n        $scope.message = '';\n        if($scope.uninstalling_package[_package.name]){\n            return;\n        }\n\n        $rootScope.$broadcast('packageActivityStart', [_name, PACKAGE_ACTIVITY_TYPE.UNINSTALL]);\n\n        basicUninstallPackage(_package.name,\n            function successCallback(data) {\n                $scope.package_activity = false;\n                $scope.uninstalling_package[_package.name] = false;\n                changePackageState(_package, PACKAGE_STATE.UNINSTALLED);\n                $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.UNINSTALL]);\n\n                try {\n                    var p_list = JSON.parse(data.p_list);\n                    if ($scope.connected){\n                        $scope.setPackages('True', p_list);\n                    }\n                    else{\n                        $scope.setPackages('False', p_list);\n                    }\n                } catch(e) {\n                    // ignore error\n                }\n\n            }, function errorCallback(errorMessage) {\n                $scope.package_activity = false;\n                $scope.uninstalling_package[_package.name] = false;\n                $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.UNINSTALL]);\n                $scope.message = errorMessage;\n                $scope.openInstallPackageErrorModal('Package Uninstall Error', _package, errorMessage);\n            });\n    };\n\n    $scope.launchPackage = function(_name,_url){\n        console.log(\"launching package \"+_name+\" at url:\"+_url+\" #003v\");\n        //if($scope.checkForPackageActivity()){\n        //    return;\n        //}\n\n        var win = window.open(window.location.protocol + \"//\" + window.location.hostname + _url, '_blank');\n        win.focus();\n    };\n\n    $scope.updatePackage = function(_package,_success,_error,_trust){\n\n        var _name    = _package.name;\n        var _version = _package.upgrade_version;\n        if(_version===''){\n            console.log(\"hub control NOT updating package \"+_name+\" because upgrade_version is '' #30255z\");\n            return;\n        }\n\n        if(_package.name === 'iot-developer-hub'){\n            $scope.openUpdateDevHubPackageModal(_package);\n            return;\n        }\n\n        $rootScope.$broadcast('packageActivityStart', [_name, PACKAGE_ACTIVITY_TYPE.UPDATE]);\n\n        basicUpdatePackage(_name, _trust,\n            function successCallback(data) {\n                $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.UPDATE]);\n                if (data.status === \"success\") {\n\n                    if ('p_info' in data) {\n                        var _details = data.p_info;\n                        for (var attrname in _details) { _package[attrname] = _details[attrname]; }\n                    }\n\n                    try {\n                        var p_list = JSON.parse(data.p_list);\n                        if ($scope.connected){\n                            $scope.setPackages('True', p_list);\n                        }\n                        else{\n                            $scope.setPackages('False', p_list);\n                        }\n                    } catch(e) {\n                        // ignore error\n                    }\n\n                    changePackageState(_package,PACKAGE_STATE.UPDATED);\n                    if (_.isFunction(_success)) {_success();}\n                } else if (data.status === 'untrusted' && !_trust) {\n                    $scope.openUpdateUntrustedPackageModal(_package,data.error,_success);\n                    return;\n                } else {\n                    updateFailed(_package, data.message);\n                }\n            }, function errorCallback(errorMessage) {\n                updateFailed(_package, errorMessage);\n            });\n\n        function updateFailed(_package, errorMessage){\n            $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.UPDATE]);\n\n            if(_.isFunction(_error)){_error(errorMessage);}\n\n            changePackageState(_package, PACKAGE_STATE.UPDATE_FAILED, false, errorMessage);\n\n            // ui-related hacks\n            $scope.update_package_failed[_package.name] = true;\n            $scope.update_package_fail_message[_package.name] = errorMessage;\n            $timeout(function(){\n                $scope.update_package_failed[_package.name] = false;\n            }, linger_info_timeout_milliseconds);\n        }\n    };\n\n    $scope.updateDevHub = function(_package, _success, _error){\n\n        $rootScope.$broadcast('packageActivityStart', [_package.name, PACKAGE_ACTIVITY_TYPE.SELF_UPDATE]);\n\n        basicSelfUpgrade(\n            function successCallback(data) {\n                $rootScope.$broadcast('packageActivityStop', [_package.name, PACKAGE_ACTIVITY_TYPE.SELF_UPDATE]);\n                changePackageState(_package, PACKAGE_STATE.UPDATED);\n                if(_.isFunction(_success)){ _success();}\n            }, function errorCallback(errorMessage) {\n                $rootScope.$broadcast('packageActivityStop', [_package.name, PACKAGE_ACTIVITY_TYPE.SELF_UPDATE]);\n\n                if(_.isFunction(_error)){ _error(errorMessage);}\n\n                changePackageState(_package, PACKAGE_STATE.UPDATE_FAILED, false, errorMessage);\n\n                // ui-related hacks\n                $scope.update_package_failed[_package.name] = true;\n                $scope.update_package_fail_message[_package.name] = errorMessage;\n                $timeout(function(){\n                    $scope.update_package_failed[_package.name] = false;\n                }, linger_info_timeout_milliseconds);\n            });\n    };\n\n    $scope.updatePackagesIndividually = function(_trust){\n\n        console.log(\"updating packages individually\");\n\n        var selfUpgradeAvailable = null;\n\n        var packagesToUpdate = [];\n\n        $rootScope.$broadcast('packageActivityStart', [null,PACKAGE_ACTIVITY_TYPE.UPDATE_ALL]);\n\n        // Build list to update\n        _.forEach($scope.packages, function(_package){\n\n            if(!_package.upgrade_version) return;\n\n            if(_package.name === \"iot-developer-hub\"){\n                selfUpgradeAvailable = _package;\n            } else {\n                packagesToUpdate.push(_package);\n                //$scope.update_package_queue[_package.name] = true;\n            }\n\n        });\n\n        if(packagesToUpdate.length < 1){\n            if(selfUpgradeAvailable){\n                $scope.openUpdateDevHubPackageModal(selfUpgradeAvailable);\n            }\n            return;\n        }\n\n        var i=0;\n\n        function updateNextPackage(){\n            if(packagesToUpdate[i]){\n                console.log(\"updating packages individually: (\"+i+\")\"+ packagesToUpdate[i].name);\n                $scope.updatePackage(packagesToUpdate[i],\n                    function() {\n                        i+=1;\n                        updateNextPackage();\n                    }, function(errorMessage) {\n                        $rootScope.$broadcast('packageActivityStop', [null,PACKAGE_ACTIVITY_TYPE.UPDATE_ALL]);\n                        $scope.openInstallPackageErrorModal('Package Update Error', packagesToUpdate[i], errorMessage + ' Please refresh the web page to get updated packages information!');\n                    });\n                return;\n            }\n            if(selfUpgradeAvailable){\n                console.log(\"updating packages individually: 'iot-developer-hub', launching confirmation\");\n                $scope.openUpdateDevHubPackageModal(selfUpgradeAvailable);\n\n            }\n        }\n\n        updateNextPackage();\n    };\n\n    $scope.updatePackages = function(_trust){\n\n        var selfUpgradeAvailable = function(){\n            var devHubPackage = _.find($scope.packages, function(_p) { return _p.name === \"iot-developer-hub\"; });\n\n            if(devHubPackage && devHubPackage.upgrade_version){\n             return devHubPackage;\n            }else{\n                return null;\n            }\n        }();\n\n        if(selfUpgradeAvailable){\n            $scope.updatePackagesIndividually(_trust);\n            return;\n        }\n\n        if($scope.installing_all_package_updates || $scope.package_activity){\n            return;\n        }\n\n        $rootScope.$broadcast('packageActivityStart', [null, PACKAGE_ACTIVITY_TYPE.UPDATE_ALL]);\n\n        _.forEach($scope.packages, function(_package){\n\n            if(!_package.upgrade_version) return;\n\n            $scope.updating_package[_package.name] = true;\n        });\n\n        basicUpdateAllPackages(_trust,\n            function successCallback(data) {\n                $rootScope.$broadcast('packageActivityStop', [null,PACKAGE_ACTIVITY_TYPE.UPDATE_ALL]);\n                if (data.status === 'success') {\n                    for(var _p=0,_pl=$scope.packages.length;_p<_pl;_p++){\n                        changePackageState($scope.packages[_p], PACKAGE_STATE.UPDATED, true);\n                    }\n\n                    try {\n                        var p_list = JSON.parse(data.p_list);\n                        if ($scope.connected){\n                            $scope.setPackages('True', p_list);\n                        }\n                        else{\n                            $scope.setPackages('False', p_list);\n                        }\n                    } catch(e) {\n                        // ignore error\n                    }\n\n                    $scope.setArrays(false);\n                } else if (data.status === 'untrusted' && !_trust){\n                    $scope.openUpdateUntrustedPackagesModal(data.error);\n                    return;\n                } else {\n                    errorCallback(data.message);\n                }\n            }, errorCallback);\n\n        function errorCallback(errorMessage) {\n            $rootScope.$broadcast('packageActivityStop', [null,PACKAGE_ACTIVITY_TYPE.UPDATE_ALL]);\n            for(var _p=0,_pl=$scope.packages.length;_p<_pl;_p++){\n                var _packg = $scope.packages[_p];\n                changePackageState(_packg, PACKAGE_STATE.UPDATE_FAILED, true, errorMessage);\n            }\n\n            $timeout(function(){\n                for(var _p=0,_pl=$scope.packages.length;_p<_pl;_p++){\n                    var _packg = $scope.packages[_p];\n                    $scope.update_package_failed[_packg.name] = false;\n                }\n            }, linger_info_timeout_milliseconds);\n\n            var tempPackage = {};\n            tempPackage.name = 'Update Packages';\n            $scope.openInstallPackageErrorModal('Packages Update Error', tempPackage, errorMessage);\n        }\n    };\n\n    $scope.setPackages = function(update, package_list, passedSuccessCallback, passedErrorCallback){\n        console.log(\"hub controller: getting packages #005a\");\n\n        if ((typeof package_list === 'undefined') || (typeof package_list === 'string')) {\n            $http({\n                method : 'GET',\n                url    : '/api/packages?update=' + update + '&nocache=' + new Date().getTime()\n            }).then(\n                function successCallback(response) {\n                    $scope.packages = response.data;\n                    console.log(\"hub controller: found packages by API call 005b\");\n                    $scope.package_refresh = Number($scope.package_refresh) + 1;\n                    console.log(\"hub controller: setting package refresh flag 005c\");\n\n                    if(_.isFunction(passedSuccessCallback)){ passedSuccessCallback(response.data); }\n                },function errorCallback(response) {\n                    console.log(\"error getting packages 005E\");\n\n                    if(_.isFunction(passedErrorCallback)){ passedErrorCallback(response); }\n                });\n        } else {\n            $scope.packages = package_list;\n            $scope.package_refresh = Number($scope.package_refresh) + 1;\n        }\n    };\n\n    $scope.getPackagesInstalled = function(passedSuccessCallback, passedErrorCallback){\n        $http({\n            method : 'GET',\n            url    : '/api/packages?request=installed&nocache=' + new Date().getTime()\n        }).then(\n            function successCallback(response) {\n                if(_.isFunction(passedSuccessCallback)){ passedSuccessCallback(response.data); }\n            },function errorCallback(response) {\n                if(_.isFunction(passedErrorCallback)){ passedErrorCallback(response); }\n            });\n    };\n\n    ///////////////////////////////////////\n    // GUI Modals\n    //////////////////////////////////////\n\n    $scope.openPackageInfoModal = function(_package){\n\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.package.info.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.service_error = false;\n                $scope.displayed   = _package;\n\n                //$scope.statuses    = $scope.service_statuses;\n                $scope.running     = $scope.package_statuses[_package.name].running;\n\n                //var _state         = $scope.package_states[_package.name];\n                //console.log(\"hub control opening package info modal for \"+_package.name+\" with State \"+_state);\n\n                $scope.enabled     =  $scope.package_statuses[_package.name].autorun;\n                $scope.checkbox    = {enabled: $scope.enabled};\n                console.log(\"hub control opening package info modal for \"+_package.name+\" with State \"+$scope.enabled+\" \"+$scope.running);\n                $scope.hasupgrade  =  _package.upgrade_version;\n\n                $scope.closePackageInfo = function(){\n                    console.log(\"close packageinfo\");\n                    modalInstance.dismiss('cancel');\n                    $scope.installed_package = {};\n                };\n\n                $scope.toggleServiceState = function(_enable){\n                    if($scope.enabling_package[_package.name]){\n                        return;\n                    }\n                    $scope.enabling_package[_package.name] = true;\n\n                    var _len         = _package.service.length;\n                    var _action      = _enable ? \"enable\"    : \"disable\";\n                    console.log(\"hub service control toggling service state for \"+_package.name+\" to \"+_action+\" #5502a\");\n\n                    var _services = null;\n                    if(_package.service){\n                        _services = _package.service.join(\",\");\n                        if(_services){\n                            tempURL = '/api/sc?services=' + _services + \"&action=\" + _action;\n                            workerProcessRestService.performGeneralExecution('POST', tempURL, false, false, null,\n                                function successCallback(data) {\n                                    $scope.enabling_package[_package.name] = false;\n                                    if (data.status === 'success'){\n                                        if(_enable){\n                                            console.log(\"hub service control successfully changed service state for \"+_package.name+\" to \"+_action+\" #5502c1\");\n                                        }else{\n                                            console.log(\"hub service control successfully changed service state for \"+_package.name+\" to \"+_action+\" #5502c2\");\n                                        }\n                                        //$scope.package_statuses[_package.name].State = _enable? 'enabled' : 'disabled';\n                                        $scope.setArrays(true);\n                                    } else {\n                                        $scope.enabling_package[_package.name] = false;\n                                        $scope.service_error = true;\n                                        $scope.service_error_message = 'This action failed. Please try again! ' + data.message;\n                                        if (_enable) {\n                                            // enable failed.... uncheck checkbox\n                                            $scope.checkbox    = {enabled: false};\n                                        } else {\n                                            // disable failed.... check checkbox\n                                            $scope.checkbox    = {enabled: true};\n                                        }\n                                        console.log(\"hub service control failed to change service state for \"+_package.name+\" to \"+_action+\" #5502F\");\n\n                                        setTimeout(function(){\n                                            $scope.service_error = false;\n                                        }, linger_info_timeout_milliseconds);\n                                    }\n                                }, function errorCallback(errorMessage) {\n                                    $scope.enabling_package[_package.name] = false;\n                                    $scope.service_error = true;\n                                    $scope.service_error_message = errorMessage;\n                                    if (_enable) {\n                                        // enable failed.... uncheck checkbox\n                                        $scope.checkbox    = {enabled: false};\n                                    } else {\n                                        // disable failed.... check checkbox\n                                        $scope.checkbox    = {enabled: true};\n                                    }\n                                    console.log(\"errorCallback with \" + errorMessage);\n\n                                    setTimeout(function(){\n                                        $scope.service_error = false;\n                                    }, linger_info_timeout_milliseconds);\n                                }, rest_check_interval_milliseconds_s);\n                        }\n                    }\n                };\n\n                $scope.doUpdate = function(_displayed){\n                    $scope.updatePackage(_displayed, function(){\n                        $scope.setArrays(true);\n                        //refactor out\n                    }, function errorCallback(errorMessage){\n                        $scope.openInstallPackageErrorModal('Package Update Error', _displayed, errorMessage);\n                        $scope.setArrays(true);\n                        modalInstance.dismiss('cancel');\n                    });\n                };\n            }\n        });\n    };\n\n    $scope.openUpdateUntrustedPackagesModal = function(_message){\n        var modalInstance2 = $uibModal.open({\n            templateUrl: 'partials/hub.update.untrusted.packages.ng.html?version=' + gui_version,\n            animation:    true,\n            scope:        $scope,\n            size:        'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n                $scope.message      = _message;\n                $scope.closeModal = function(){\n                    modalInstance2.dismiss('cancel');\n                };\n                $scope.trustToUpdate = function(){\n                    modalInstance2.dismiss('cancel');\n                    $scope.updatePackages(true);\n                };\n            }\n        });\n    };\n\n    $scope.confirmUpdatePackages = function(){\n        console.log(\"hub confirming update packages #9190a\");\n        if($scope.package_activity){\n            console.log(\"suppressing action: current package activity\");\n            return;\n        }\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.confirm.update.packages.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.doUpdatePackages = function(){\n                    modalInstance.dismiss('cancel');\n                    $scope.updatePackages();\n                };\n            }\n        });\n    };\n\n    $scope.openUpdateDevHubPackageModal = function(_package){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.confirm.update.devhub.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope,$timeout, $window){\n                //$scope.selected_device   = null;\n\n                $rootScope.$broadcast('packageActivityStart');\n                $scope.selfUpgrading = false;\n\n                $scope.closeModal = function(){\n                    $rootScope.$broadcast('packageActivityStop');\n                    console.log(\"close confirm restart modal\");\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.doSelfUpdate =  function(){\n                    $scope.selfUpgrading = true;\n                    $scope.updateDevHub(_package,\n                        function successCallback(){\n                            // stop checking so that we won't throw no network error.\n                            // later on, when we load state.hub, we will reschedule it.\n                            $scope.stopCheckingNetwork();\n\n                            $timeout(function(){\n                                modalInstance.dismiss('cancel');\n                                $state.go(\"welcome.login\");\n\n                            }, 5000);\n\n                            // Refresh web page to download index.html\n                            setTimeout(function() {\n                                $window.location.reload();\n                            }, 7000);\n                        },\n                        function errorCallback(errorMessage){\n                            $timeout(function(){\n                                $scope.update_package_failed[_package.name] = false;\n                            }, linger_info_timeout_milliseconds);\n\n                            $scope.openInstallPackageErrorModal('Package Update Error', _package, errorMessage);\n\n                            // Assume success\n                            $timeout(function(){\n                                modalInstance.dismiss('cancel');\n                                $state.go(\"welcome.login\");\n\n                            }, 7000);\n\n                            // Refresh web page to download index.html\n                            setTimeout(function() {\n                                $window.location.reload();\n                            }, 9000);\n                        }\n                    );\n                };\n            }\n        });\n    };\n\n    $scope.startTrustedInstall = function (_package) {\n        _package.confirmUntrusted=false;\n        if($scope.checkForPackageActivity()){\n            return;\n        }\n        $scope.installPackage(_package, null, null, true);\n    };\n\n    $scope.openUpdateUntrustedPackageModal = function(_package,_message, _success){\n        var modalInstance2 = $uibModal.open({\n            templateUrl: 'partials/hub.update.untrusted.package.ng.html?version=' + gui_version,\n            animation:    true,\n            scope:        $scope,\n            size:        'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n                $scope.installed_package[_package.name] = false;\n                $scope.untrusted    = _package;\n                $scope.message      = _message;\n                $scope.closeModal = function(){\n                    modalInstance2.dismiss('cancel');\n                };\n                $scope.trustToUpdate = function(){\n                    modalInstance2.dismiss('cancel');\n                    $scope.updatePackage(_package,  _success, null, true);\n                };\n            }\n        });\n    };\n\n    $scope.openInstallUntrustedPackageModal = function(_package,_message){\n        var modalInstance2 = $uibModal.open({\n            templateUrl: 'partials/hub.install.untrusted.package.ng.html?version=' + gui_version,\n            animation:    true,\n            scope:        $scope,\n            size:        'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n                $scope.installed_package[_package.name] = false;\n                $scope.untrusted    = _package;\n                $scope.message      = _message;\n                $scope.closeModal = function(){\n                    modalInstance2.dismiss('cancel');\n                };\n                $scope.trustToInstall = function(){\n                    modalInstance2.dismiss('cancel');\n\n                    $scope.installPackage(\n                        _package,\n                        function(){\n                            //modalInstance2.dismiss('cancel');\n                        },\n                        function(){\n                            //modalInstance2.dismiss('cancel');\n                        },true);\n                };\n\n            }\n        });\n    };\n\n    $scope.openInstallPackageErrorModal = function(_title, _package, _message){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.install.package.error.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n                $scope.title = _title;\n                $scope.package = _package;\n                $scope.message = _message;\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openServiceActivityPackageErrorModal = function(_title, _message){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.service.package.error.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n                $scope.title = _title;\n                $scope.message = _message;\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openAddPackagesModal = function(){\n\n        if($scope.package_activity){\n            console.log(\"suppressing action: current package activity\");\n            return;\n        }\n\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.add.packages.ng.html?version=' + gui_version,\n            animation:    true,\n            scope: $scope,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.query = null;\n                $scope.sortType = 'name';\n                $scope.installed_package    = {};\n\n                $scope.closeAddPackages = function(){\n                    if($scope.installing_any_package) return;\n                    $scope.installed_package    = {};\n                    modalInstance.dismiss('cancel');\n\n                    console.log(\"closing add packages modal.\");\n                };\n\n            }\n        });\n\n    };\n};\n","// These are general functions used in several states.\niotgatewayhub.expandHub_pro_upgrade = function($scope,$http,$state,$uibModal,$timeout,workerProcessRestService,utilityFunctionsService) {\n\n    $scope.confirmOSUpgrade = function(callback){\n        console.log(\"hub confirming os upgrade #9033a\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.os.upgrade.1.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.onSuppress = function(shouldSuppress) {\n                    if(!shouldSuppress) return;\n                    utilityFunctionsService.setCookie(\"upgradeMessage\",false,license_duration_days);\n                };\n\n                $scope.closeModal = function(){\n                    console.log(\"hub canceling os upgrade #9033b\");\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.onNotNow = function(){\n                    console.log(\"hub canceling os upgrade via 'Not now' #9033b\");\n                    modalInstance.dismiss('cancel');\n                    if(angular.isFunction(callback))callback();\n                };\n\n                $scope.continueOSUpgrade = function(){\n                    console.log(\"hub opening os upgrade 2 #9033c\");\n                    console.log(\"admin tools mec status \"+$scope.mec.installed+\" #0812a\");\n                    if($scope.mec.enabled){\n                        $scope.openOSUpgradeModal1b();\n                        modalInstance.dismiss('cancel');\n                        return;\n                    }\n                    $scope.openOSUpgradeModal2();\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openOSUpgradeModal1b = function(){\n        console.log(\"hub confirming os upgrade #9033a\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.os.upgrade.1b.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.closeModal = function(){\n                    console.log(\"hub canceling os upgrade #9033b\");\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openOSUpgradeModal2 = function(){\n        console.log(\"hub opening os upgrade 2 #9034a\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.os.upgrade.2.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n\n                $scope.credentials   = {username: null, password: null};\n                $scope.error_message = null;\n\n                $scope.closeModal = function(){\n                    console.log(\"hub canceling os upgrade #9034b\");\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSUpgrade = function(){\n                    $scope.error_message = '';\n                    $scope.openOSUpgradeModal3($scope.credentials.username,$scope.credentials.password);\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openOSUpgradeModal3 = function(_username,_password){\n        console.log(\"hub opening os upgrade 3 #9035a\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.os.upgrade.3.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.in_pro_upgrade = true;\n                $scope.before_bar_message = 'Upgrade in Progress...';\n                $scope.button_title = 'Finish';\n\n                if ($scope.isQuark === true) {\n                    $scope.timeHours = 'up to one hour';\n                } else {\n                    $scope.timeHours = 'less than one hour';\n                }\n\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n\n                data = {\"username\":_username,\"password\":_password};\n                workerProcessRestService.performGeneralExecution(\"POST\", \"/api/pro\", false, true, data,\n                    function successCallback(responseData) {\n                        $scope.in_pro_upgrade = false;\n                        $scope.before_bar_message = 'Upgrade Complete!';\n                        $scope.button_title = 'Finish';\n                        $scope.rebooting = false;\n                        $scope.rebooted  = false;\n\n                    }, function errorCallback(errorMessage) {\n                        $scope.in_pro_upgrade = false;\n                        $scope.before_bar_message = 'Upgrade Failed!';\n                        $scope.button_title = 'Close';\n                        $scope.error_message = errorMessage;\n                    }, rest_check_interval_milliseconds_l);\n            }\n\n        });\n    };\n};\n","// These are general functions used in several states.\niotgatewayhub.expandHub_proxy = function($scope,$uibModal,$http,$rootScope,$state,workerProcessRestService,utilityFunctionsService) {\n    $scope.settings = {proxy: null };\n\n    // this one is called when the user logs in or the user refreshes the page.\n    $scope.proceedToNetworkCheck = function(){\n        $rootScope.loggedin = true;\n\n        utilityFunctionsService.checkNetwork(function(response){\n\n                var goNextState = function(has_network, data) {\n\n                    var openErrorModal = function(_title, _message){\n                        // do not open it if it is already opened.\n                        if (isLoadingErrorModalShown) {\n                            return;\n                        }\n\n                        var modalInstance = $uibModal.open({\n                            templateUrl: 'partials/hub.loading.error.ng.html?version=' + gui_version,\n                            animation:    true,\n                            size: 'lg',\n                            backdrop: modal_light_dismiss_enabled,\n                            controller: function($scope,$state,$http,$rootScope,$timeout){\n                                $scope.title = _title;\n                                $scope.errorMessage = _message;\n                                $scope.closeModal = function(){\n                                    isLoadingErrorModalShown = false;\n                                    modalInstance.dismiss('cancel');\n                                };\n                            }\n                        });\n\n                        // https://github.com/angular-ui/bootstrap/tree/master/src/modal/docs\n                        modalInstance.opened.then(function() {\n                            isLoadingErrorModalShown = true;\n                        });\n                        modalInstance.result.then(function(selectedItems) {\n                                isLoadingErrorModalShown = false;\n                            }, function() {\n                                isLoadingErrorModalShown = false;\n                            });\n                    };\n\n                    if (has_network) {\n                        //network is up\n                        $scope.connected = true;\n\n                        // check to see if there is error when we set up the repos earlier during server start-up\n                        if (data.repo_status === 'failure') {\n                            openErrorModal('Repositories Information Update Error', response.data.repo_error);\n                        }\n\n                        if($rootScope.redirectState){\n                            $state.go($rootScope.redirectState);\n                        }\n                        else{\n                            $state.go('hub.dashboard.' + $scope.device.default_tab);\n                        }\n                    } else {\n                        //network is down\n                        $scope.connected = false;\n\n                        // check to see if there is error when we set up the repos earlier during server start-up\n                        if (data.repo_status === 'failure') {\n                            openErrorModal('Repositories Information Update Error', response.data.repo_error);\n                        }\n\n                        $state.go(\"hub.nonetwork\",{});\n                    }\n                };\n\n                // setting up periodic network checking\n                $scope.startCheckingNetwork();\n\n                var _https_conn = response.data.https_conn; //should this match the window-level protocol? The spec says this value\n                var _ok = _https_conn==\"True\";\n\n                goNextState(_ok, response.data);\n            }, function(response){\n                //should not occur (network being down is handled in success call with status in json)\n                console.log(\"error callback for test proxy settings\");\n            });\n    };\n\n    // setting up periodic network checking\n    $scope.startCheckingNetwork = function(){\n        if (periodicCheckNetworkFunc !== null) {\n            clearInterval(periodicCheckNetworkFunc);\n        }\n        periodicCheckNetworkFunc = setInterval(function(){\n            utilityFunctionsService.checkNetwork(\n                function(response){\n                    var _https_conn = response.data.https_conn; //should this match the window-level protocol? The spec says this value\n                    var _ok         = _https_conn===\"True\";\n                    var _fail       =  simulate_network_failure && network_index++ % 2 === 0;\n                    if(_ok && !_fail){\n                        console.log(\"hub controller: check network found https network connection is UP #9200b1\");\n                        $scope.connected = true;\n                    }else{\n                        //network is down\n                        console.log(\"hub controller: check network found https network connection is DOWN #9200b2\");\n                        $scope.connected = false;\n                    }\n\n                    // set pro status\n                    if (response.data.pro_status.result === 'NA') {\n                        // cannot get the current pro status, skip.\n                    } else {\n                        $scope.pro = (response.data.pro_status.result === 'True') ;\n                    }\n\n                    // update package list\n                    if (response.data.package_list === 'NA') {\n                        // no package_list update\n                    } else {\n                        // cast string of array to array\n                        $scope.packages = JSON.parse(response.data.package_list);\n                        $scope.package_refresh = Number($scope.package_refresh) + 1;\n                    }\n\n                    // update repo list\n                    if (response.data.repo_list === 'NA') {\n                        // no repo_list update\n                    } else {\n                        // only update when repo_list has an array..\n                        // empty array is still an array.\n                        if (response.data.repo_list) {\n                            $scope.repositories = response.data.repo_list;\n                        }\n                    }\n                },\n                function(response){\n                    console.log(\"hub ERROR checking network at interval #9200E \" + response.status);\n                    // Do not update status if we cannot get any information.\n                    // $scope.connected = false;\n                });\n        },network_check_interval_milliseconds);\n    };\n\n    $scope.stopCheckingNetwork = function() {\n        if (periodicCheckNetworkFunc !== null) {\n            clearInterval(periodicCheckNetworkFunc);\n        }\n    };\n\n    $scope.getProxySettings = function(resultHandler){\n        var tempUrl = '/api/proxy?request=list';\n        workerProcessRestService.informGeneralChecking('GET', tempUrl, false, false, null,\n            'Network Settings', '', 'Retrieving Settings...',\n            function(data){\n                // success call back\n                $scope.proxy = data;\n                $scope.settings.proxy = $scope.proxy;\n                $scope.settings.proxy.single_url = \"\";\n                $scope.settings.proxy.single_port = \"\";\n\n                resultHandler();\n            }, rest_check_interval_milliseconds);\n    };\n\n    $scope.testProxySettings = function(successCallback, failCallback){\n        //returns success or failure. does not send settings in form. uses the ones in database.\n        //Nick says button should be enabled only when form is clean.\n        console.log(\"testing proxy settings\");\n        $scope.networkSettingsTest = {running:true};\n        utilityFunctionsService.checkNetwork(\n            function(response){\n                var _https_conn = response.data.https_conn;\n                var _ok         = _https_conn==\"True\";\n\n                if(_ok){\n                    successCallback();\n                    // $scope.networkSettingsTest = {running:true,status:'success'};\n                    //network is up\n                    //$state.go(\"hub.dashboard.sensors\",{});\n                }else{\n                    failCallback({success:false, message:\"Proxy settings invalid [\"+_https_conn+\"]\"});\n                    //$scope.networkSettingsTest = {running:true,status:'fail'};\n                    //network is down\n                    //$state.go(\"hub.nonetwork\",{});\n                }\n                console.log(\"Proxy test returned: \"+_https_conn);\n            },\n            function(response){\n                failCallback();\n                //should not occur (network being down is handled in success call with status in json)\n                console.log(\"error callback for test proxy settings\");\n            }\n        );\n    };\n\n    $scope.applyProxySettings = function(successCallback, failCallback){\n        //save proxy settings to backend\n\n        var _single_url  = $scope.settings.proxy.single_url;\n        var _single_port = $scope.settings.proxy.single_port;\n\n        var _http_url    = $scope.settings.proxy.http_url;\n        var _http_port   = $scope.settings.proxy.http_port;\n\n        var _https_url   = $scope.settings.proxy.https_url;\n        var _https_port  = $scope.settings.proxy.https_port;\n\n        var _ftp_url     = $scope.settings.proxy.ftp_url;\n        var _ftp_port    = $scope.settings.proxy.ftp_port;\n\n        var _socks_url   = $scope.settings.proxy.socks_url;\n        var _socks_port  = $scope.settings.proxy.socks_port;\n\n        var _no_proxy    = $scope.settings.proxy.no_proxy;\n\n        var tempURL = '/api/proxy'+\n            \"?http_url=\"+encodeURIComponent(_http_url)+\n            \"&http_port=\"+encodeURIComponent(_http_port)+\n            \"&https_url=\"+encodeURIComponent(_https_url)+\n            \"&https_port=\"+encodeURIComponent(_https_port)+\n            \"&ftp_url=\"+encodeURIComponent(_ftp_url)+\n            \"&ftp_port=\"+encodeURIComponent(_ftp_port)+\n            \"&socks_url=\"+encodeURIComponent(_socks_url)+\n            \"&socks_port=\"+encodeURIComponent(_socks_port)+\n            \"&no_proxy=\"+encodeURIComponent(_no_proxy);\n\n        workerProcessRestService.performGeneralExecution('POST', tempURL, false, false, null,\n            function(data) {\n                var _https_conn = data.https_conn;\n                if (_https_conn===\"True\") {\n                    $scope.connected = true;\n                    successCallback({success: true, message: \"Applied proxy settings\"});\n                } else {\n                    $scope.connected = false;\n                    failCallback({success: false,   message: \"Applied proxy settings, but https connection does not work under the settings. Some features will be disabled.\"});\n                }\n            }, function(errorMessage) {\n                failCallback({success: false, message: errorMessage});\n            }, rest_check_interval_milliseconds_m);\n    };\n};\n","// These are general functions used in several states.\niotgatewayhub.expandHub_repositories = function($scope,$http,$state,$uibModal,workerProcessRestService) {\n\n    $scope.openCreateRepositoryModal = function(){\n        if($scope.package_activity){\n            console.log(\"suppressing action: current package activity\");\n            return;\n        }\n\n        tempURL = '/api/repository';\n        workerProcessRestService.informGeneralChecking('GET', tempURL, true, false, null,\n            'Manage Repositories', '', 'Getting repositories list...',\n            function successCallback(data) {\n                $scope.repositories = data.list;\n                $scope.openCreateRepositoryModal_2();\n            }, rest_check_interval_milliseconds);\n    };\n\n    $scope.openCreateRepositoryModal_2 = function(){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.manage.repositories.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http){\n\n                // Network\n                $scope.hideCancel=true;\n                $scope.saveText = \"Save settings\";\n                $scope.updated_repositories  = false;\n                $scope.updating_repositories = false;\n\n                $scope.removeRepository = function(_name){\n                    $scope.repositories = $scope.repositories.filter(function(_repo){  return _repo.name !== _name; });\n                };\n\n                $scope.findRepository = function(_name){\n                    var source = $scope.repositories;\n                    for (var i = 0; i < source.length; i++) {\n                        if (source[i].name === _name) {\n                            return source[i];\n                        }\n                    }\n                };\n\n                $scope.updateRepos = function(){\n                    if($scope.deleting_any_repository || $scope.updating_repositories || $scope.updated_repositories || $scope.adding_repository){\n                        return;\n                    }\n                    $scope.response_message      = null;\n                    $scope.error_message         = null;\n                    $scope.updating_repositories = true;\n                    $scope.error_message_add         = null;\n                    $scope.response_message_add      = null;\n\n                    tempURL = '/api/repository';\n                    workerProcessRestService.performGeneralExecution('PUT', tempURL, true, false, null,\n                        function successCallback(data) {\n                            $scope.updating_repositories = false;\n                            $scope.$emit(\"hub.unlockModal\");\n                            $scope.updated_repositories = true;\n\n                            try {\n                                var p_list = JSON.parse(data.p_list);\n                                if ($scope.connected){\n                                    $scope.setPackages('True', p_list);\n                                }\n                                else{\n                                    $scope.setPackages('False', p_list);\n                                }\n                            } catch(err) {\n                                // ignore error\n                                console.log(err.message);\n                            }\n\n                            $scope.reponse_message = \"The repositories were successfully updated.\";\n                        }, function errorCallback(errorMessage) {\n                            $scope.$emit(\"hub.unlockModal\");\n                            $scope.error_message = errorMessage;\n                            $scope.updating_repositories = false;\n                        }, rest_check_interval_milliseconds_m);\n\n                    $scope.$emit(\"hub.lockModal\", [$scope]);\n                };\n\n                $scope.addRepo = function(){\n                    if($scope.deleting_any_repository || $scope.adding_repository || $scope.updating_repositories){\n                        return;\n                    }\n\n                    $scope.adding_repository     = true;\n                    $scope.error_message         = null;\n                    $scope.error_message_add     = null;\n                    $scope.response_message      = null;\n                    $scope.response_message_add  = null;\n                    var _repository_name      = $scope.newRepository.name;\n                    var _repository_url       = $scope.newRepository.url;\n                    var _repository_username  = $scope.newRepository.username;\n                    var _repository_password  = $scope.newRepository.password;\n\n                    var _existing = $scope.findRepository(_repository_name);\n\n                    if(!_repository_name){\n                        $scope.error_message_add         =  \"The repository name must be specified.\";\n                        $scope.adding_repository     = false;\n                        return;\n                    }\n                    if(!_repository_url){\n                        $scope.error_message_add         =  \"The repository url must be specified.\";\n                        $scope.adding_repository     = false;\n                        return;\n                    }\n                    if(_existing){\n                        $scope.error_message_add         =  \"The repository \"+_repository_name+\" already exists.\";\n                        $scope.adding_repository     = false;\n                        return;\n                    }\n\n                    if(!_repository_username){\n                        _repository_username = \"None\"; //see API document. This is exactly what is specified.\n                    }\n                    if(!_repository_password){\n                        _repository_password = \"None\"; //see API document. This is exactly what is specified\n                    }\n\n                    //form validation---for now just checking name,url have values, and that name is unique\n                    //according to Nick at Intel the auth credentials (userName and password) are to be optional here\n\n                    if(_repository_name && _repository_url) {\n                        //console.log(\"adding repository\");\n                        $scope.response_message_add = \"Adding repository \"+_repository_name+\". Package list will be updated. This may take a few minutes...\";\n\n                        tempURL = '/api/repository'+\n                                  \"?name=\"+encodeURIComponent(_repository_name)+\n                                  \"&url=\"+encodeURIComponent(_repository_url)+\n                                  \"&username=\"+encodeURIComponent(_repository_username)+\n                                  \"&password=\"+encodeURIComponent(_repository_password);\n                        workerProcessRestService.performGeneralExecution('POST', tempURL, false, false, null,\n                            function successCallback(data) {\n                                $scope.adding_repository  = false;\n                                $scope.response_message_add = '';\n                                $scope.response_message_add = \"The repository \"+_repository_name+\" was successfully added. Package list was updated.\";\n                                //clear the form values and add the repo to the list\n                                $scope.newRepository.name = '';\n                                $scope.newRepository.url  = '';\n                                try {\n                                    $scope.repositories.push(_repository_name);\n                                } catch (err) {\n                                    console.log(err.message);\n                                }\n\n                                try {\n                                    var p_list = JSON.parse(data.p_list);\n                                    if ($scope.connected){\n                                        $scope.setPackages('True', p_list);\n                                    }\n                                    else{\n                                        $scope.setPackages('False', p_list);\n                                    }\n                                } catch(err) {\n                                    // ignore error\n                                    console.log(err.message);\n                                }\n\n                                $scope.$emit(\"hub.unlockModal\", [$scope]);\n                                console.log(\"added repository \"+_repository_name);\n                            }, function errorCallback(errorMessage) {\n                                $scope.adding_repository  = false;\n                                $scope.response_message_add = '';\n                                $scope.error_message_add = errorMessage;\n\n                                $scope.$emit(\"hub.unlockModal\", [$scope]);\n                            }, rest_check_interval_milliseconds_m);\n\n                        $scope.$emit(\"hub.lockModal\", [$scope]);\n                    }\n\n                };\n\n                $scope.closeModal = function(){\n                    if($scope.adding_repository || $scope.updating_repositories){\n                        return;\n                    }\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.deleteRepo = function(_repository){\n                    console.log(\"hub deleting repository \"+_repository+\" #4084a\");\n                    if($scope.deleting_any_repository || $scope.adding_repository || $scope.updating_repositories){\n                        return;\n                    }\n                    $scope.error_message                          = '';\n                    $scope.error_message_add         = null;\n                    $scope.response_message_add      = null;\n                    $scope.response_message          = null;\n                    $scope.deleting_repository[_repository]  = true;\n                    $scope.deleting_any_repository           = true;\n\n                    tempURL = '/api/repository'+\"?name=\"+encodeURIComponent(_repository);\n                    workerProcessRestService.performGeneralExecution('DELETE', tempURL, false, false, null,\n                        function successCallback(data){\n                            $scope.deleting_repository[_repository]  = false;\n                            $scope.deleting_any_repository           = false;\n\n                            try {\n                                var _index = $scope.repositories.indexOf(_repository);\n                                if (_index >= 0) {\n                                    $scope.repositories.splice(_index, 1);\n                                    // console.log($scope.repositories);\n                                }\n\n                            } catch(err) {\n                                console.log(err.message);\n                            }\n\n                            try {\n                                var p_list = JSON.parse(data.p_list);\n                                if ($scope.connected){\n                                    $scope.setPackages('True', p_list);\n                                }\n                                else{\n                                    $scope.setPackages('False', p_list);\n                                }\n                            } catch(err) {\n                                // ignore error\n                                console.log(err.message);\n                            }\n\n                            $scope.response_message   = \"The repository \"+_repository+\" was successfully deleted.\";\n                        }, function errorCallback(errorMessage) {\n                            $scope.deleting_repository[_repository]  = false;\n                            $scope.deleting_any_repository           = false;\n                            $scope.error_message = errorMessage;\n                        }, rest_check_interval_milliseconds_m);\n                };\n            }\n        });\n    };\n};\n","// These are general functions used in several states.\niotgatewayhub.expandHub_save_image = function($scope,$http,$uibModal,workerProcessRestService) {\n    ///////////////////////////////////////\n    // Save Image Functions\n    //////////////////////////////////////\n\n    $scope.getDefaultConfigurationForSaveImage = function(passedSuccessCallback, passedErrorCallback){\n        $http({\n            method : 'GET',\n            url    : '/api/sa?type=save_image_custom&nocache=' + new Date().getTime()\n        }).then(\n            function successCallback(response) {\n                if(_.isFunction(passedSuccessCallback)){ passedSuccessCallback(response.data); }\n            },function errorCallback(response) {\n                if(_.isFunction(passedErrorCallback)){ passedErrorCallback(response); }\n            });\n    };\n\n    ///////////////////////////////////////\n    // GUI Modals\n    //////////////////////////////////////\n\n    $scope.openOSImageModal0 = function(){\n        if(!$scope.mec){\n            console.log(\"hub control NOT opening OS IMAGE modal because no MEC available #038X\");\n            return;\n        }\n        console.log(\"hub control opening OS IMAGE modal #038a\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.0.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                console.log(\"hub control opening OS image modal 0 #038b\");\n                $scope.closeOSImageModal = function(){\n                    console.log(\"hub control closing os image modal 0 #038c\");\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSImage1 = function(){\n                    console.log(\"continuing to os image modal 1 #038dx\");\n                    $scope.openOSImageModal1();\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openOSImageModal1 = function(){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.1.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                //$scope.scanUSBDevices();\n                $scope.selected_device   = null;\n                $scope.closeOSImageModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n                $scope.setSelectedDevice = function(_device){\n                    console.log(\"setting usb device as \"+_device.Name);\n                    $scope.selected_device   = _device;\n                };\n                $scope.continueOSImage2 = function(){\n                    if($scope.selected_device!==null){\n                        $scope.openOSImageModal2($scope.selected_device);\n                        modalInstance.dismiss('cancel');\n                    }\n                };\n            }\n        });\n    };\n\n    $scope.openOSImageModal2 = function(_usb_device){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.2.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.selected_device   = _usb_device;\n                $scope.closeOSImageModal2 = function(){\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSImage3 = function(){\n                    $scope.openOSImageModal3(_usb_device, false);\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openOSImageModal3 = function(_usb_device, from_custom){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.3.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                var update_params = {\n                    'harden_type'                : 'standard',\n                    'usb_device'                 : _usb_device,\n                    'packages_removed'           : [],\n                    'updaters'                   : [],\n                    'users'                      : [],\n                    'stig'                       : [],\n                    'new_admin_password'         : null,\n                    'confirm_admin_password'     : null,\n                    'new_mec_admin_password'     : null,\n                    'confirm_mec_admin_password' : null,\n                    'enable_mec_whitelist'       : true,\n\n                };\n\n                $scope.parseVersion = function(){\n                    var sysVersionSplit = $scope.device.system_version.split(\".\");\n                    var rcplVersion = sysVersionSplit[3];\n                    console.log(rcplVersion);\n                    if (rcplVersion < 18) {\n                        console.log(\"VERSION < 18\");\n                        $scope.rcplLessThanEighteen = true;\n                    }\n                    else {\n                        console.log(\"VERSION >= 18\");\n                        $scope.rcplLessThanEighteen = false;\n                    }\n                    return $scope.rcplLessThanEighteen;\n                };\n\n                $scope.selection = {\n                    type: 'standard'\n                };\n                if (from_custom) {\n                    $scope.selection.type = 'custom';\n                }\n                $scope.closeOSImageModal3 = function(){\n                    modalInstance.dismiss('cancel');\n                };\n                $scope.continueOSImage3 = function(){\n                    if ($scope.selection.type === 'standard') {\n                        $scope.openOSImageModal3_Standard(update_params);\n                    } else {\n                        var my_data = {\n                            config_data: {},\n                            install_list: [],\n                            updaters_list: null,\n                            users_list: null,\n                            stig_list: null\n                        };\n                        $scope.openOSImageModal3_Custom_Packages(update_params, my_data);\n                    }\n                    modalInstance.dismiss('cancel');\n                };\n            }\n\n        });\n    };\n\n    $scope.openOSImageModal3_Standard = function(_update_params){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.3.standard.pw.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.selected_device   = _update_params.usb_device;\n                $scope.error_message     = null;\n                $scope.hasMEC            = function(){\n                    return $scope.mec.status==='success';\n                };\n                $scope.update_params = _update_params;\n                $scope.update_params.harden_type = 'standard';\n                $scope.closeOSImageModal3_Standard = function(){\n                    modalInstance.dismiss('cancel');\n                };\n                $scope.continueOSImage4_FromStandard = function(){\n                    $scope.error_message     = null;\n                    console.log(\"hub osimage4 attempting os image with password set [\"+$scope.update_params.new_admin_password+\",\"+$scope.update_params.confirm_admin_password+\";\"+$scope.update_params.new_mec_admin_password+\",\"+$scope.update_params.confirm_mec_admin_password+\"]\");\n                    if(!$scope.update_params.new_admin_password || $scope.update_params.new_admin_password.length < min_password_length){\n                        $scope.error_message     = \"The admin password must be at least \"+min_password_length+\" characters long.\";\n                        return;\n                    }\n                    if($scope.update_params.new_admin_password !==  $scope.update_params.confirm_admin_password){\n                        console.log(\"new admin params do not match\");\n                        $scope.error_message     = \"The admin passwords do not match\";\n                        return;\n                    }\n                    if(!$scope.update_params.new_mec_admin_password || $scope.update_params.new_mec_admin_password.length < min_password_length){\n                        $scope.error_message     = \"The MEC admin password must be at least \"+min_password_length+\" characters long.\";\n                        return;\n                    }\n                    if($scope.update_params.new_mec_admin_password !==  $scope.update_params.confirm_mec_admin_password){\n                        console.log(\"new MEC admin params do not match\");\n                        $scope.error_message     = \"The MEC admin passwords do not match\";\n                        return;\n                    }\n                    $scope.openOSImageModal4($scope.update_params);\n                    modalInstance.dismiss('cancel');\n                };\n            }\n\n        });\n    };\n\n    $scope.openOSImageModal3_Custom_Packages = function(_update_params, _data){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.3.custom.packages.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.sortType = 'name';\n                $scope.save_image_has_error = false;\n                $scope.save_image_error_message = '';\n                $scope.gettingPackages = true;\n                $scope.custom_configuration_data = _data.config_data;\n\n                // filter for ng-repeat to show to-be-removed entry\n                $scope.search_removed = {'remove': true};\n                // filter for ng-repeat to show selected packages\n                $scope.search_packages = {'name': null};\n\n                // watch for search condition and reset the scroll bar to top when the search condition changes.\n                $scope.$watch('search_packages', function(){\n                    var container = document.getElementById('my_scroll_bar');\n                    container.scrollTop = 0;\n                }, true);\n\n                // create my array for packages\n                $scope.custom_installed_list = _data.install_list;\n                // if the list is empty, init the list\n                if ($scope.custom_installed_list.length === 0) {\n                    $scope.getDefaultConfigurationForSaveImage(\n                        function successCallback(data){\n                            $scope.custom_configuration_data = data;\n                            $scope.getPackagesInstalled(\n                                 function successCallback(data){\n                                    if (data) {\n                                        $scope.processData(data);\n                                    } else {\n                                        $scope.showError('The server is still processing the packages list. Please try again later.');\n                                    }\n                                 }, function errorCallback(response){\n                                    $scope.showError('Failed to get installed packages list! HTTP status is ' + response.status);\n                                 });\n                        }, function errorCallback(response) {\n                            $scope.showError('Failed to get default configuration! HTTP status is ' + response.status);\n                        });\n                } else {\n                    $scope.gettingPackages = false;\n                }\n\n                // for each installed package, if it is in the list of default to-be-removed list,\n                //      mark it as to-be-removed in $scope.custom_installed_list.\n                // $scope.custom_installed_list is bind to angular html\n                $scope.processData = function(data) {\n                    $scope.gettingPackages = false;\n                    for (var key in data) {\n                        var bEnforce = false;\n                        var bRemove = false;\n                        var lowerName = key.toLowerCase();\n                        var remove_dict = {};\n                        if (typeof $scope.custom_configuration_data.packages_removed != 'undefined') {\n                            remove_dict = $scope.custom_configuration_data.packages_removed;\n                        }\n\n                        for (var key2 in remove_dict) {\n                            var value2 = remove_dict[key2];\n                            if (lowerName === key2.toLowerCase()) {\n                                bRemove = true;\n                                bEnforce = value2;\n                            }\n                        }\n\n                        $scope.custom_installed_list.push({\n                            \"name\": key,\n                            \"remove\": bRemove,\n                            \"enforce\": bEnforce\n                        });\n                    }\n                };\n\n                $scope.showError = function(err_message) {\n                    $scope.gettingPackages = false;\n                    $scope.save_image_has_error = true;\n                    $scope.save_image_error_message = err_message;\n                };\n\n                $scope.clearSearchOSImageModal3_Custom = function(){\n                    $scope.search_packages.name = null;\n                    //The following is already being handled by the search_packages watcher.\n                    //var container = document.getElementById('my_scroll_bar');\n                    //container.scrollTop = 0;\n                };\n\n                $scope.closeOSImageModal3_Custom = function(){\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.backOSImageModal3_Custom = function(){\n                    $scope.openOSImageModal3(_update_params.usb_device, true);\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSImage3_Custom = function(){\n                    // update _update_params.packages_removed and harden_type\n                    _update_params.harden_type = 'custom';\n                    // gety array of objects\n                    var temp_removed_packages = $scope.custom_installed_list.filter(function (el) {\n                        return el.remove === true;\n                    });\n                    // get array:  this map only works starting from IE 9 (2011).\n                    _update_params.packages_removed = temp_removed_packages.map(function(a) {return a.name;});\n\n                    // update _data\n                    _data.config_data = $scope.custom_configuration_data;\n                    _data.install_list = $scope.custom_installed_list;\n                    _data.updaters_list = null;\n\n                    $scope.openOSImageModal3_Custom_MEC(_update_params, _data);\n                    modalInstance.dismiss('cancel');\n                };\n            }\n\n        });\n    };\n\n    $scope.openOSImageModal3_Custom_MEC = function(_update_params, _data){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.3.custom.mec.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.sortType = 'name';\n                $scope.updater_path = null;\n                $scope.checkingFile = false;\n                $scope.save_image_has_error = false;\n                $scope.save_image_error_message = '';\n\n                // filter for ng-repeat to show not deleted entry\n                $scope.search_not_deleted = {'delete': false};\n\n                // if the _data.updaters_list is null, we create one from default configuration data.\n                // else, we use the passed list\n                if (!_data.updaters_list) {\n                    var updaters_list = [];\n                    if (typeof _data.config_data.mec_updater != 'undefined') {\n                        updaters_list = _data.config_data.mec_updater;\n                    }\n                    $scope.custom_updaters_list = [];\n                    for (i = 0; i < updaters_list.length; i++) {\n                        $scope.custom_updaters_list.push({\n                            'name': updaters_list[i],\n                            'delete': false\n                        });\n                    }\n                } else {\n                    $scope.custom_updaters_list = _data.updaters_list;\n                }\n\n                $scope.addSearchOSImageModal3_Custom = function(){\n                    $scope.checkingFile = true;\n\n                    $scope.verifyFileExisted($scope.updater_path,\n                        function successCallback(data){\n                            if (data.status === 'success') {\n                                $scope.checkingFile = false;\n                                $scope.save_image_has_error = false;\n                                $scope.save_image_error_message = '';\n                                // add entry\n                                // if the entry exists, update it.\n                                var doesExist = false;\n                                for (i = 0; i < $scope.custom_updaters_list.length; i++) {\n                                    if ($scope.custom_updaters_list[i].name === $scope.updater_path) {\n                                        if ($scope.custom_updaters_list[i].delete) {\n                                            $scope.custom_updaters_list[i].delete = false;\n                                        } else {\n                                            $scope.showError('The file is already in the list.');\n                                        }\n                                        doesExist = true;\n                                        break;\n                                    }\n                                }\n                                if (!doesExist) {\n                                    // if the entry does not exist, add it.\n                                    $scope.custom_updaters_list.push({\n                                        'name': $scope.updater_path,\n                                        'delete': false\n                                    });\n                                }\n                            } else {\n                                 $scope.showError(data.message);\n                            }\n                        }, function errorCallback(response) {\n                            $scope.showError('Failed to verify file! HTTP status is ' + response.status + '.');\n                        });\n                };\n\n                $scope.showError = function(err_message){\n                    $scope.checkingFile = false;\n                    $scope.save_image_has_error = true;\n                    $scope.save_image_error_message = err_message;\n\n                    // add time out to clear error\n                    setTimeout(function(){\n                        $scope.save_image_has_error = false;\n                        $scope.save_image_error_message = '';\n                        $scope.$apply();\n                    }, 2500);\n                };\n\n                $scope.clearSearchOSImageModal3_Custom = function(){\n                    $scope.updater_path = null;\n                };\n\n                $scope.closeOSImageModal3_Custom = function(){\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.backOSImageModal3_Custom = function(){\n                    $scope.openOSImageModal3_Custom_Packages(_update_params, _data);\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSImage3_Custom = function(){\n                    // update _update_params.updaters and harden_type\n                    _update_params.harden_type = 'custom';\n                    // gety array of objects\n                    var temp_updaters = $scope.custom_updaters_list.filter(function (el) {\n                        return el.delete === false;\n                    });\n                    // get array:  this map only works starting from IE 9 (2011).\n                    _update_params.updaters = temp_updaters.map(function(a) {return a.name;});\n\n                    // update _data\n                    _data.updaters_list = $scope.custom_updaters_list;\n                    _data.users_list = null;\n\n                    $scope.openOSImageModal3_Custom_User(_update_params, _data);\n\n                    modalInstance.dismiss('cancel');\n                };\n            }\n\n        });\n    };\n\n    $scope.openOSImageModal3_Custom_User = function(_update_params, _data){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.3.custom.users.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.sortType = 'sort_number';\n                $scope.gettingAccount = false;\n                $scope.save_image_has_error = false;\n                $scope.save_image_error_message = '';\n                $scope.custom_users_list = [];\n\n                // create my array for users\n                if (!_data.users_list) {\n                    // if the list is null, we create our own\n                    $scope.gettingAccount = true;\n                    $scope.getAccounts(\n                        function successCallback(data){\n                            if (data.status === 'success') {\n                                $scope.processData(data);\n                            } else {\n                                $scope.showError('Failed to get accounts list! Error is ' + data.message, false);\n                            }\n                        }, function errorCallback(response){\n                            $scope.showError('Failed to get accounts list! HTTP status is ' + response.status, false);\n                        });\n                } else {\n                    // not null, use the passed one.\n                    $scope.custom_users_list = _data.users_list;\n                }\n\n                $scope.processData = function(data) {\n                    $scope.gettingAccount = false;\n\n                    // insert the MEC first\n                    $scope.custom_users_list.push({\n                        'name': 'McAfee® Embedded Control',\n                        'sort_number':  0,\n                        'access': true,\n                        'expanded': false,\n                        'disable_toggle': true,\n                        'new_password': '',\n                        'confirm_password': ''\n                    });\n\n                    for (i = 0; i < data.accounts.length; i++) {\n                        var sort_number = 4;\n                        var allow_access = false;\n                        if (data.accounts[i] === 'root') {\n                            sort_number = 1;\n                            allow_access = true;\n                        } else if (data.accounts[i] === 'wra') {\n                            sort_number = 2;\n                            allow_access = true;\n                        } else if (data.accounts[i] === 'gwuser') {\n                            sort_number = 3;\n                            allow_access = true;\n                        } else {\n                            sort_number = 4;\n                            allow_access = false;\n                        }\n                        $scope.custom_users_list.push({\n                            'name': data.accounts[i],\n                            'sort_number':  sort_number,\n                            'access': allow_access,\n                            'expanded': false,\n                            'disable_toggle': false,\n                            'new_password': '',\n                            'confirm_password': ''\n                        });\n                    }\n                };\n\n                $scope.showError = function(err_message, do_time_out) {\n                    $scope.gettingAccount = false;\n                    $scope.save_image_has_error = true;\n                    $scope.save_image_error_message = err_message;\n\n                    if (do_time_out) {\n                        // add time out to clear error\n                        setTimeout(function(){\n                            $scope.save_image_has_error = false;\n                            $scope.save_image_error_message = '';\n                            $scope.$apply();\n                        }, 2500);\n                    }\n                };\n\n                $scope.closeOSImageModal3_Custom = function(){\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.backOSImageModal3_Custom = function(){\n                    $scope.openOSImageModal3_Custom_MEC(_update_params, _data);\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSImage3_Custom = function(){\n                    // verify password first\n                    var hasError = false;\n                    var checkErrorMessage = '';\n                    for (i = 0; i < $scope.custom_users_list.length; i++) {\n                        if ($scope.custom_users_list[i].access) {\n                            if(!$scope.custom_users_list[i].new_password || $scope.custom_users_list[i].new_password.length < min_password_length){\n                                checkErrorMessage = \"For account \" + $scope.custom_users_list[i].name + \", the password must be at least \"+min_password_length+\" characters long.\";\n                                hasError = true;\n                                break;\n                            }\n                            if($scope.custom_users_list[i].new_password !==  $scope.custom_users_list[i].confirm_password){\n                                checkErrorMessage = \"For account \" + $scope.custom_users_list[i].name + \", the passwords do not match.\";\n                                hasError = true;\n                                break;\n                            }\n                        }\n                    }\n                    if (hasError) {\n                        $scope.showError(checkErrorMessage, true);\n                    } else {\n                        // update _update_params.users and harden_type\n                        _update_params.harden_type = 'custom';\n\n                        // get array of objects\n                        var temp_users = $scope.custom_users_list.filter(function (el) {\n                            return el.access === true;\n                        });\n                        // get array:  this map only works starting from IE 9 (2011).\n                        _update_params.users = temp_users.map(function(a) {return {'name': a.name, 'pw': a.confirm_password};});\n\n                        // update _data\n                        _data.users_list = $scope.custom_users_list;\n\n                        // STIG is diabled for now\n                        $scope.openOSImageModal4(_update_params);\n                        //$scope.openOSImageModal3_Custom_stig(_update_params, _data);\n\n                        modalInstance.dismiss('cancel');\n                    }\n                };\n            }\n\n        });\n    };\n\n    $scope.openOSImageModal3_Custom_stig = function(_update_params, _data){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.3.custom.stig.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.sortType = 'ID';\n                $scope.custom_stig_list = [];\n\n                // create my array for stig\n                if (!_data.stig_list) {\n                    if (\"stig_all\" in _data.config_data) {\n                         // jQuery map to change JSON object to array of JSON\n                        var temp_array = $.map(_data.config_data.stig_all, function(el, k) {\n                            var el_return = el;\n                            el_return.ID = k;\n                            return el_return;\n                        });\n\n                        // if the list is null, we create our own\n                        for (i = 0; i < temp_array.length; i++) {\n                            var toInclude = true;\n\n                            // check if this item is to be included by default\n                            if (\"stig\" in _data.config_data) {\n                                try {\n                                    // works starting from IE 9.0\n                                    if (_data.config_data.stig.indexOf(temp_array[i].ID) != -1) {\n                                        toInclude = true;\n                                    } else {\n                                        toInclude = false;\n                                    }\n                                } catch(err) {\n                                }\n                            }\n\n                            $scope.custom_stig_list.push({\n                                'ID': temp_array[i].ID,\n                                'Severity': temp_array[i].Severity,\n                                'Title': temp_array[i].Title,\n                                'URL': temp_array[i].URL,\n                                'included': toInclude\n                            });\n                        }\n                    }\n                } else {\n                    // not null, use the passed one.\n                    $scope.custom_stig_list = _data.stig_list;\n                }\n\n                $scope.closeOSImageModal3_Custom = function(){\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.backOSImageModal3_Custom = function(){\n                    $scope.openOSImageModal3_Custom_User(_update_params, _data);\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSImage3_Custom = function(){\n                    // update _update_params.stig and harden_type\n                    _update_params.harden_type = 'custom';\n\n                    // get array of objects\n                    var temp_stig = $scope.custom_stig_list.filter(function (el) {\n                        return el.included === true;\n                    });\n                    // get array:  this map only works starting from IE 9 (2011).\n                    _update_params.stig = temp_stig.map(function(a) {return a.ID;});\n\n                    $scope.openOSImageModal4(_update_params);\n                    modalInstance.dismiss('cancel');\n\n                };\n            }\n\n        });\n    };\n\n    $scope.openOSImageModal4 = function(_update_params){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.4.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.closeOSImageModal4 = function(){\n                    console.log(\"close os image modal 4\");\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSImage5 = function(){\n                    $scope.openOSImageModal5(_update_params);\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openOSImageModal5 = function(_update_params){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.5.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.closeSaveImage = function(){\n                    console.log(\"closing window saving of os image\");\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.savedImage = false;\n\n                $scope.saveImage = function(){\n                    console.log(\"hub sending saving os image with data \"+ JSON.stringify(_update_params));\n\n                    tempURL = '/api/sa' ;\n                    content_body = {harden_type: _update_params.harden_type,\n                                    usb_device: _update_params.usb_device.Device,\n                                    packages_removed: _update_params.packages_removed,\n                                    updaters: _update_params.updaters,\n                                    users: _update_params.users,\n                                    stig: _update_params.stig,\n                                    admin_password: _update_params.new_admin_password,\n                                    mec_password: _update_params.new_mec_admin_password\n                                    };\n\n                    workerProcessRestService.performGeneralExecution('POST', tempURL, false, true, content_body,\n                        function successCallback(data) {\n                            console.log(\"SAVED OS IMAGE\");\n                            $scope.savedImage = true;\n                            $scope.openOSImageModal6();\n                            modalInstance.dismiss('cancel');\n                        }, function errorCallback(errorMessage) {\n                            console.log(\"SAVE OS IMAGE FAILED\");\n                            $scope.openOSImageModal6e(errorMessage);\n                            modalInstance.dismiss('cancel');\n                        }, rest_check_interval_milliseconds_ll);\n                };\n\n                $scope.continueOSImage6 = function(){\n\n                    $scope.openOSImageModal6();\n                    modalInstance.dismiss('cancel');\n\n                };\n                $scope.saveImage();\n            }\n        });\n    };\n\n    $scope.openOSImageModal6 = function(){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.6.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.closeModal = function(){\n                    console.log(\"closing window\");\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSImage7 = function(){\n                    $scope.openOSImageModal7();\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openOSImageModal6e = function(_message){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.6e.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.message    = _message;\n                $scope.closeModal = function(){\n                    console.log(\"closing window\");\n                    modalInstance.dismiss('cancel');\n                };\n\n            }\n\n        });\n    };\n\n    $scope.openOSImageModal7 = function(){\n        console.log(\"Is this Quark? \" + $scope.isQuark);\n        var html_page = 'partials/hub.osimage.7.ng.html?version=' + gui_version;\n        if ($scope.isQuark) {\n            html_page = 'partials/hub.osimage.7.quark.ng.html?version=' + gui_version;\n        }\n\n        var modalInstance = $uibModal.open({\n            templateUrl: html_page,\n            animation: true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function ($scope, $state, $http, $rootScope) {\n\n                $scope.closeModal = function () {\n                    console.log(\"closing window\");\n                    modalInstance.dismiss('cancel');\n                };\n                $scope.openSaveDeployTutorial = function () {\n                    var url = $state.href('tutorial.savedeploy', { parameter: \"parameter\" });\n                    window.open(url, '_blank');\n                    console.log(\"openSaveDeployTutorial\");\n                };\n                $scope.openDocumentation = function () {\n                    modalInstance.dismiss('cancel');\n                    $state.go(\"hub.dashboard.documentation\");\n                    console.log(\"openDocumentation\");\n                };\n            }\n        });\n    };\n\n};\n"],"sourceRoot":"/source/"}