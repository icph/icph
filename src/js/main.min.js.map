{"version":3,"sources":["app.js","config.sensor.js","directive/hub.dashboard.linegraph.js","directive/hub.dashboard.radialgraph.js","directive/hub.dashboard.sensor.js","directive/hub.loading.js","directive/hub.networksettings.js","directive/hub.showOemOnLoad.js","directive/ps.mouse.over.js","directive/shakethat.js","service/httpRequestsService.js","service/workerProcessRestService.js","service/utilityFunctionsService.js","state/state.error.js","state/state.hub.dashboard.cloudcmd.js","state/state.hub.dashboard.documentation.js","state/state.hub.dashboard.js","state/state.hub.dashboard.othertools.js","state/state.hub.dashboard.packages.js","state/state.hub.dashboard.referencesoftware.js","state/state.hub.dashboard.sensors.js","state/state.hub.dashboard.softsoc.js","state/state.hub.dashboard.tools.js","state/state.hub.js","state/state.hub.license.js","state/state.hub.networkcheck.js","state/state.hub.networkconnected.js","state/state.hub.networksettings.js","state/state.hub.nonetwork.js","state/state.hub.test.js","state/state.tutorial.js","state/state.welcome.js","state/state.welcome.login.js","state/state.welcome.privacy.js","state/state.hub/gatewayOperations.js","state/state.hub/osUpdate.js","state/state.hub/packages.js","state/state.hub/pro_upgrade.js","state/state.hub/proxy.js","state/state.hub/repositories.js","state/state.hub/save_image.js"],"names":["getCookie","cname","name","ca","document","cookie","split","i","length","c","charAt","substring","indexOf","acceptedPrivacy","authenticate","$q","$rootScope","$state","$timeout","bypass_auth","loggedin","when","go","reject","setupNoConnection","start","response_target_error_start_time","Date","setDate","getDate","start_trigger_no_connection","started_periodic_checking","setupPeriodicChecking","setResponseErrorTime","has_error","currentTime","diffTime","getTime","checkResponseErrorReport","diffTimeInSeconds","config_sensor","broker","host","wssPort","wsPort","topic","reconnectTimeout","reconnectInterval","charts","title","chartType","units","min","max","targetLow","targetHigh","points","gui_version","log_messages","log_message_json","license_duration_days","network_check_interval_milliseconds","rest_check_interval_milliseconds_s","rest_check_interval_milliseconds","rest_check_interval_milliseconds_m","rest_check_interval_milliseconds_l","rest_check_interval_milliseconds_ll","reboot_request_timeout_milliseconds","toggle_security_timeout_milliseconds","html_content_timeout_milliseconds","linger_info_timeout_milliseconds","restart_welcome_latency_milliseconds","factory_reset_welcome_latency_milliseconds","length_of_line_graph_history","simulate_network_failure","network_index","min_password_length","no_local_config_hosts","requested_url","window","location","hash","substr","modal_light_dismiss_enabled","https_port","quark_name_string","authorization","nc_count","username","ha1","cnonce","realm","nonce","opaque","qop","periodicCheckNetworkFunc","do_validate_session","oem_branding_logo_file","oem_branding_eulas","oem_branding_eulas_datetime","oem_branding_cookies_names","isLoadingErrorModalShown","iotgatewayhub","angular","module","config","$stateProvider","$urlRouterProvider","$httpProvider","accepted_privacy","otherwise","interceptors","push","factory","client","connect","get","run","$location","$window","$uibModal","httpRequestsService","resolveFromUrl","url","states","len","redirectState","path","$on","event","abortAllRequests","no_connection_template","modalInstance","open","template","animation","size","backdrop","controller","$scope","clickRefresh","dismiss","reload","directive","restrict","templateUrl","replace","scope","latestData","scaleSteps","scaleStepWidth","scaleStartValue","pointsToShow","connected","link","$elem","attrs","setOptions","overrideScale","undefined","options","showScale","showTooltips","maintainAspectRatio","scaleOverride","parseInt","parseFloat","scaleFontColor","emptyDataMessage","scaleShowGridLines","scaleGridLineColor","scaleGridLineWidth","scaleShowHorizontalLines","scaleShowVerticalLines","scaleType","useUtc","scaleTimeFormat","bezierCurve","bezierCurveTension","pointDot","pointDotRadius","pointDotStrokeWidth","pointHitDetectionRadius","datasetStroke","datasetStrokeWidth","datasetFill","legendTemplate","trimHistory","scatterChart","datasets","removePoint","dataHistory","data","shift","label","strokeColor","x","y","chartCanvasFind","find","canvasContext","getContext","Chart","Scatter","addPoint","series","$watchGroup","destroy","$watch","update","upperRange","lowerRange","createDataPair","dataPair","segmentShowStroke","segmentStrokeColor","segmentStrokeWidth","percentageInnerCutout","animationSteps","animationEasing","animateRotate","animateScale","doughnutColors","labels","elem","$http","loadMessage","showMessage","resolve","workerProcessRestService","init","defaults","saveText","cancelText","insideModal","hideTestSettings","maintainContextAfterSave","$","extend","isSaving","barMessage","isUpdatingChannelsFailed","showSaveResult","networkSettingsTest","running","status","result","success","isVisible","saveResult","message","tmpSettings","single_url","settings","proxy","single_port","http_url","http_port","https_url","ftp_url","ftp_port","socks_url","socks_port","no_proxy","onSaveSuccess","onSaveFail","$emit","nextAction","successApplyProxySettings","response","tempURL","performGeneralExecution","p_list","JSON","parse","setPackages","err","doneSuccessCallback","errorMessage","applyProxySettings","testProxySettingsCallback","testSettings","testProxySettings","element","bind","hideOEMBranding","e","stopPropagation","preventDefault","perfectScrollbar","$animate","require","submit","submitted","form","on","$apply","$valid","addClass","removeClass","service","customTimeout","newPromise","defer","toBeAbortedPromises","promise","forEach","eachPromise","isAbortedByUs","removeRequest","timeout","target_index","count","splice","request","responseError","rejection","to_report","$broadcast","utilityFunctionsService","isNumber","n","isNaN","isFinite","pad","width","z","Array","join","parse_digest","_header","ws","token","quotedString","tokenizer","RegExp","tokens","match","unq","setCookie","cvalue","exdays","d","setTime","expires","toUTCString","checkNetwork","_successCallback","_errorCallback","method","cache","then","createWorkID","randomNum","Math","random","toString","checkPeriodicCheckingResponseError","report","return_message","informGeneralError","titleMessage","descMessage","barBeforeMessage","title_message","description_message","bar_before_message","hasError","closeModal","informGeneralChecking","httpMethod","httpURL","noParameter","httpJSON","httpBody","realSuccessCallback","checkPeriod","periodicChecking","http_call","id","workID","is_checking","headers","Content-type","stringify","in_progress","setTimeout","temp_error_message","error_message","work_type","passedSuccessCallback","passedErrorCallback","performGeneralExecutionOnlySubmit","state","viewTutorial","tutorial_html","isQuark","href","parameter","viewSensorSetupTutorial","viewSensorCloudTutorial","viewHelixTutorial","viewSaveDeployTutorial","state_chosen","abstract","timerExpired","chartMatch","isSensorPanelExpanded","checkElement","el","sensors_charted","charts_flat_list","dashboardToggle","carouselPrevious","carouselNext","setDashboard","onConnectionLost","responseObject","errorCode","countTabs","tab_count","device","sensor_config","softsoc_config","ref_sw_config","package_config","admin_config","documentation_config","onMessageArrived","sensorMatch","entry","payloadString","_id","sensorMatches","grep","mostRecentValue","datum","priority","mostRecentUnits","mostRecentSource","dataSource","mostRecentTimestamp","chartMatches","parentSensorTitle","value","sourcePriority","stepWidth","timeToLive","ttl","timerExpiredPromise","cancel","mqttInit","loop","reconnect","_host","hostname","_useSSL","_port","protocol","_reconnectInterval","_reconnectTimeout","_topic","mqtt_client","Paho","MQTT","Client","useSSL","cleanSession","onSuccess","subscribe","qos","onFailure","initMqtt","num_to_show","gettingPackages","showLoadMore","sortType","totalDisplayed","loadMore","installed","params","packageUrl","packageName","$stateParams","doManageSensors","_cookie","launchQuickTools","openManageSensorsDialogModal","noreshow","viewVideo","openSensorTutorialModal","fpgaBuildAndReboot","cancelFPGA","fpga_num_comp","continueFPGA","showFpgaBuild","setFPGAOption","option","enabled","fpga_options","fpgaValidateInput","gui_num_comp","pow","fpga_valid_num","fpga_package_install_position","bar_after_message","show_close_button","installPackage","fpga_options_data","showFpgaReboot","rebootGateway","isFPGAImageInstalled","confirmRestartOS","restarting_os","restarted_os","restartOS","configureNetwork","getProxySettings","isInsideModal","skipSettings","networkSettingsModal","onClickUpgrade","suppressReminder","mec","openOSUpgradeModal1b","openOSUpgradeModal2","onClickSaveOSImage","suppress","pro","openOSImageModal0","confirmOSUpgrade","openChangePassModal0","password","newpassword","confirmnewpassword","changePassword","_username","_password","_newpassword","_confirmnewpassword","openConfirmChangePasswordModal","error","showFactoryReset","doFactoryReset","stopCheckingNetwork","startCheckingNetwork","confirmFactoryReset","cancelFactoryReset","$sce","security_enabled","oem_branding_logo_full_file","temp_index","lastIndexOf","temp_logo_name","temp_logo_path","encodeURIComponent","oem_logo_file","dashboard","usb_devices","available","package_updates","updates","sensors","sensor_map","upgrades","option_descriptions","humidity","temperature","updating_package","updated_package","update_package_failed","update_package_fail_message","installing_package","uninstalling_package","package_activity","starting_package","stopping_package","enabling_package","installed_package","deleting_repository","noderedurl","trustAsResourceUrl","luciurl","httpurl","httpsurl","cloudcmdurl","foundOSUpdate","foundOSUpdate_Packages","OSUpdate_Packages","package_refresh","gotPackagesList","gotPackagesList_Error","isDashboard","hasUpdates","hasOSUpdate","updatePackageStatuses","_i","_len","packages","_package","_service","_all_services_running","_all_services_enabled","_num_services","_j","_service_sub","service_statuses","SUB","_service_state","State","package_statuses","autorun","setArrays","_set_services","filter","upgrade_version","curated","setServices","_toolname","win","navigator","userAgent","toLowerCase","focus","setupPreventModalClosing","initHubTasks","initSetDevice","model","uptime","days","hours","minutes","milliseconds","upSince","deviceUpSince","initGetTutorials","initGetFPGA","documentation","numComp","j","expandHub_proxy","expandHub_services","expandHub_save_image","expandHub_security","expandHub_repositories","expandHub_packages","expandHub_pro_upgrade","expandHub_openOSUpdate","expandHub_gatewayOperations","$watchCollection","blockUI","hide","listener","targetScope","reason","closed","show","accepted_license","findUnacceptedCookieIndex","all_accepted","checkEulaCookies","doApply","eula_index","eulaLoaded","temp_eula_full_name","temp_eula_name","temp_eula_path","current_eula_html_file","current_eula_cookie_name","agree","proceedToNetworkCheck","default_tab","skipConfigureNetwork","authentication","broadcastFailure","bMessage","handleAuthenticated","credentials","checkAuth","_method","_uri","showLogin","continueWelcomeLogin","setOEMBrandingCookiesNames","temp_datetime","temp_cookiename","concat","checkOEMBrandingCookies","temp_accepted","getOEMBranding","logo_file","eula_files","eula_files_datetime","showGo","serverErrorMessage","keyPressed","$event","keyCode","login","internalAuthentication","firstTime","do_auth","init_in_progress","showAuthenticationError","showServerError","continueToLogin","_success","_error","timeout_value","_","isFunction","scanUSBDevices","scanning_usb","verifyFileExisted","file_path","getAccounts","logout","enterOSCredential","do_enter_credential","do_confirm_update","cancelOSUpdate","informOSUpdate_CancelWarning","continueChecking","checkOSUpdate","_credentials","content_body","type","informOSUpdateError","confirmOSUpdate","checkOSUpdate_Packages","package_update","confirmOSUpdatePackages","informOSUpdateNotAvailable","doOSUpdate","showOSUpdate","doOSUpdate_Packages","showOSUpdatePackages","performUpdateSequence","informOSUpdateRestart","show_bar","show_last_error","show_last_normal","show_close","show_warning_html","_error_message","informOSUpdateDone","basicInstallPackage","_name","_trust","successCallback","errorCallback","_untrusted_query","basicUninstallPackage","basicUpdatePackage","basicUpdateAllPackages","basicSelfUpgrade","changePackageState","blockSetArr","PACKAGE_STATE","INSTALLED","UNINSTALLED","remove","UPDATED","version","UPDATE_FAILED","update_message","PACKAGE_ACTIVITY_TYPE","INSTALL","UNINSTALL","UPDATE","UPDATE_ALL","SELF_UPDATE","opt","args","$s","currentScope","_type","installing_any_package","selfUpgrading","installing_all_package_updates","checkForPackageActivity","showPackageInfo","_details","attrname","openPackageInfoModal","openInstallPackageErrorModal","confirmUntrusted","uninstallPackage","launchPackage","_url","updatePackage","updateFailed","_version","openUpdateDevHubPackageModal","p_info","openUpdateUntrustedPackageModal","updateDevHub","updatePackagesIndividually","updateNextPackage","packagesToUpdate","selfUpgradeAvailable","updatePackages","_p","_pl","_packg","tempPackage","devHubPackage","openUpdateUntrustedPackagesModal","package_list","Number","getPackagesInstalled","service_error","displayed","checkbox","hasupgrade","closePackageInfo","toggleServiceState","_enable","_action","_services","service_error_message","doUpdate","_displayed","_message","modalInstance2","trustToUpdate","confirmUpdatePackages","doUpdatePackages","doSelfUpdate","startTrustedInstall","untrusted","openInstallUntrustedPackageModal","trustToInstall","_title","openServiceActivityPackageErrorModal","openAddPackagesModal","query","closeAddPackages","callback","onSuppress","shouldSuppress","onNotNow","continueOSUpgrade","openOSUpgradeModal3","in_pro_upgrade","before_bar_message","button_title","timeHours","responseData","rebooting","rebooted","goNextState","has_network","openErrorModal","opened","selectedItems","repo_status","repo_error","_https_conn","https_conn","_ok","clearInterval","setInterval","_fail","pro_status","repo_list","repositories","resultHandler","tempUrl","failCallback","_http_url","_http_port","_https_url","_https_port","_ftp_url","_ftp_port","_socks_url","_socks_port","_no_proxy","openCreateRepositoryModal","list","openCreateRepositoryModal_2","hideCancel","updated_repositories","updating_repositories","removeRepository","_repo","findRepository","source","updateRepos","deleting_any_repository","adding_repository","response_message","error_message_add","response_message_add","reponse_message","addRepo","_repository_name","newRepository","_repository_url","_repository_username","_repository_password","_existing","deleteRepo","_repository","_index","getDefaultConfigurationForSaveImage","closeOSImageModal","continueOSImage1","openOSImageModal1","selected_device","setSelectedDevice","_device","continueOSImage2","openOSImageModal2","_usb_device","closeOSImageModal2","continueOSImage3","openOSImageModal3","from_custom","update_params","harden_type","usb_device","packages_removed","updaters","users","stig","new_admin_password","confirm_admin_password","new_mec_admin_password","confirm_mec_admin_password","enable_mec_whitelist","parseVersion","sysVersionSplit","system_version","rcplVersion","rcplLessThanEighteen","selection","closeOSImageModal3","openOSImageModal3_Standard","my_data","config_data","install_list","updaters_list","users_list","stig_list","openOSImageModal3_Custom_Packages","_update_params","hasMEC","closeOSImageModal3_Standard","continueOSImage4_FromStandard","openOSImageModal4","_data","save_image_has_error","save_image_error_message","custom_configuration_data","search_removed","search_packages","container","getElementById","scrollTop","custom_installed_list","processData","showError","key","bEnforce","bRemove","lowerName","remove_dict","key2","value2","enforce","err_message","clearSearchOSImageModal3_Custom","closeOSImageModal3_Custom","backOSImageModal3_Custom","continueOSImage3_Custom","temp_removed_packages","map","a","openOSImageModal3_Custom_MEC","updater_path","checkingFile","search_not_deleted","delete","custom_updaters_list","mec_updater","addSearchOSImageModal3_Custom","doesExist","temp_updaters","openOSImageModal3_Custom_User","gettingAccount","custom_users_list","sort_number","access","expanded","disable_toggle","new_password","confirm_password","accounts","allow_access","do_time_out","checkErrorMessage","temp_users","pw","openOSImageModal3_Custom_stig","custom_stig_list","temp_array","stig_all","k","el_return","ID","toInclude","Severity","Title","URL","included","temp_stig","closeOSImageModal4","continueOSImage5","openOSImageModal5","closeSaveImage","savedImage","saveImage","Device","admin_password","mec_password","openOSImageModal6","openOSImageModal6e","continueOSImage6","continueOSImage7","openOSImageModal7","html_page","openSaveDeployTutorial","openDocumentation","confirmToggleSecurity","toggled_security","toggleSecurity","toggling_security","serviceControl","_service_q","checkServiceStatuses","Object","keys","services","_service_calls","all","results","_len2","_result","_object","_num_serv","_k","_service_name","_service_status"],"mappings":"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","file":"main.min.js","sourcesContent":["var gui_version = '2.0.0';  // match this with index.html's version number\n\nvar bypass_auth                           = false;  //should be false for production\nvar log_messages                          = false;  //show notifications of mqtt messages\nvar log_message_json                      = false;  //show mqtt message received\nvar license_duration_days                 = 365*20; //20 years\nvar network_check_interval_milliseconds   = 1000*60*1;//1 minute\nvar rest_check_interval_milliseconds_s    = 1000*1; // 1 sec\nvar rest_check_interval_milliseconds      = 1000*2; // 2 sec\nvar rest_check_interval_milliseconds_m    = 1000*5; // 5 sec\nvar rest_check_interval_milliseconds_l    = 1000*10; // 10 sec\nvar rest_check_interval_milliseconds_ll   = 1000*60; // 60 sec\nvar reboot_request_timeout_milliseconds   = 1000*20; // 20 sec\nvar toggle_security_timeout_milliseconds  = 1000*35;\nvar html_content_timeout_milliseconds     = 1000*10; // 10 sec\nvar linger_info_timeout_milliseconds      = 1000*6; // 6 sec\nvar restart_welcome_latency_milliseconds  = 1000*13; // 13 sec\nvar factory_reset_welcome_latency_milliseconds = 1000*30; // 30 sec\nvar length_of_line_graph_history          = 30;\nvar simulate_network_failure              = false;\nvar network_index                         = 0;\nvar min_password_length                   = 3;\nvar no_local_config_hosts                 = ['golden']; //add your localhost here if you want to never use sensor dev configs\nvar requested_url                         = window.location.hash.substr(1);\nvar modal_light_dismiss_enabled           = 'static'; // determines if the angular modals can be dismissed by clicking outside the model (assigned to the 'backdrop' property of all angular bootstrap modals). Use 'static' for backdrop with no click handler, true for backdrop with click handler. See http://angular-ui.github.io/bootstrap/#/modal\nvar https_port                            = \"3092\";\nvar quark_name_string                     = \"Quark\";\nvar start_trigger_no_connection           = true;\nvar started_periodic_checking             = false;\nvar response_target_error_start_time      = new Date();\nvar authorization = {'nc_count':0, 'username':'', 'ha1':'', 'cnonce':'', 'realm':'', 'nonce':'','opaque':'','qop':''};\nvar periodicCheckNetworkFunc = null;\nvar do_validate_session = true;\nvar oem_branding_logo_file = '';\nvar oem_branding_eulas = [];\nvar oem_branding_eulas_datetime = [];\nvar oem_branding_cookies_names = [];\nvar isLoadingErrorModalShown              = false;\n\n//////////////////////////////\n// getCookie and acceptedPrivacy are used by .config, .run, controller.....\n//     Didn't find a way to define them in any kind of service (factory, provider, ...) yet.\n/////////////////////////////\nfunction getCookie(cname) {\n    var name = cname + \"=\";\n    var ca = document.cookie.split(';');\n    for (var i=0; i < ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0)==' ') {\n            c = c.substring(1);\n        }\n        if (c.indexOf(name) === 0) {\n            return c.substring(name.length,c.length);\n        }\n    }\n    return \"\";\n}\n\nfunction acceptedPrivacy(){\n    return getCookie('privacy');\n}\n\nfunction authenticate($q, $rootScope, $state, $timeout) {\n    if(bypass_auth){\n        return true;\n    }\n    if ($rootScope.loggedin) {\n        // Resolve the promise successfully\n        return $q.when();\n    } else {\n        // The next bit of code is asynchronously tricky.\n        $timeout(function() {\n            // This code runs after the authentication promise has been rejected.\n            // Go to the log-in page\n            console.log(\"unauthenticated request: routing to welcome page\");\n            $state.go('welcome.login');\n        });\n        return $q.reject();\n    }\n}\n\n////////////////////////\n// The following are for the case when the web response has status = -1 (no connection to gateway server), status = 408 (request timeout), or 401 (access denied)\n//      If we are in periodic checking to poll for work results, we will give it some grace period.\n///////////////////////\nfunction setupNoConnection(start) {\n    if (start) {\n        // make the initial time way in the future... 10 days in the future\n        response_target_error_start_time = new Date();\n        response_target_error_start_time.setDate(response_target_error_start_time.getDate() + 10);\n\n        start_trigger_no_connection = true;\n        started_periodic_checking = false;\n    } else {\n        start_trigger_no_connection = false;\n        started_periodic_checking = false;\n    }\n}\n\nfunction setupPeriodicChecking(start) {\n    started_periodic_checking = start;\n}\n\nfunction setResponseErrorTime(has_error) {\n    if (has_error) {\n        var currentTime = new Date();\n        var diffTime = currentTime.getTime() - response_target_error_start_time.getTime();\n        if (diffTime < 0) {\n            // This is the first error.\n            response_target_error_start_time = new Date();\n        } else {\n            // This is not the first error. Do nothing.\n        }\n    } else {\n        // make the initial time way in the future... 10 days in the future\n        response_target_error_start_time = new Date();\n        response_target_error_start_time.setDate(response_target_error_start_time.getDate() + 10);\n    }\n}\n\nfunction checkResponseErrorReport() {\n    var currentTime = new Date();\n    var diffTime = currentTime.getTime() - response_target_error_start_time.getTime();\n    var diffTimeInSeconds = diffTime / 1000;\n\n    if (started_periodic_checking) {\n        // This is in periodic checking to pull work result, we give it some grace period (3 min).\n        if (diffTimeInSeconds >= (60 * 3)) {\n            return true; // report yes error\n        } else {\n            return false; // report no error\n        }\n    } else {\n        // If this is not periodic checking to pull work result, report immediately\n        return true; // report yes error\n    }\n}\n\n\n////////////////////////\n//  The main module\n///////////////////////\n\nvar iotgatewayhub = angular.module(\"iotgatewayhub\",['ui.router','ui.bootstrap','ngPasswordStrength', 'chart.js', 'perfect_scrollbar', 'timer'])\n.config(function ($stateProvider, $urlRouterProvider, $httpProvider) {\n    var accepted_privacy = acceptedPrivacy();\n    if (accepted_privacy) {\n        $urlRouterProvider.otherwise(\"/welcome/login\");\n    } else {\n        $urlRouterProvider.otherwise(\"/welcome/privacy\"); //default is to redirect to login page\n    }\n\n    // provider needs to be inject into .config, not .run.\n    // This is global for all $http.\n    // httpRequestsInterceptor is a factory service.\n    $httpProvider.interceptors.push('httpRequestsInterceptor');\n})\n.factory('mqttClient',[function(){\n    var client =  {};\n    client.connect = function(){\n        console.log(\"CONNECTING\");\n    };\n    var factory = {};\n    factory.get = function(){\n        return client;\n    };\n    return factory;\n}])\n.run(function ($rootScope, $state, $location, $window, $uibModal, httpRequestsService) {\n    console.log('Intel IoT Gateway Development Hub');\n\n    function resolveFromUrl(url) {\n        var states = $state.get();\n        for(var i = 0, len = states.length; i< len; i++ ){\n            if(states[i] && states[i].url === url){\n                console.log(\"statename:\"+states[i].name);\n                return states[i].name;\n            }\n        }\n    }\n\n    var accepted_privacy = acceptedPrivacy();\n    if (accepted_privacy) {\n        if( requested_url && requested_url.indexOf('dashboard') > -1){\n            $rootScope.redirectState = resolveFromUrl(requested_url);\n        }\n    } else {\n        $location.path('/welcome/privacy');\n    }\n\n    $rootScope.$on('$locationChangeStart', function(event) {\n        if(!acceptedPrivacy()){\n            //event.preventDefault();\n            $location.path('/welcome/privacy');\n        }\n    });\n\n\n    $rootScope.$on(\"Gateway_Not_Reachable\", function (event) {\n        console.log(\"Get event: Gateway_Not_Reachable!\");\n\n        // Abort all requests\n        httpRequestsService.abortAllRequests();\n\n        var no_connection_template =\n            '<div class=\"admin-step\">' +\n                '<div class=\"row\">' +\n                    '<div class=\"col-md-12\">' +\n                        '<h1>Intel® IoT Gateway Developer Hub cannot reach the gateway!</h1>' +\n                    '</div>' +\n                '</div>' +\n                '<div class=\"row\">' +\n                    '<div class=\"col-md-12\">' +\n                        '<div class=\"description\">Please check gateway status, network connection, and then refresh or try again later. Warning: Your previous task may still be running on the gateway, and IoT Gateway Developer Hub may not reflect its running status.</div>' +\n                    '</div>' +\n                '</div><!-- .row -->' +\n                '<div class=\"row admin-modal-btn-row\">' +\n                    '<div class=\"col-md-12\">' +\n                        '<div class=\"row\">' +\n                            '<div class=\"blue-button-md admin-modal-btn center-button\" ng-click=\"clickRefresh()\">Refresh</div>' +\n                        '</div>' +\n                    '</div>' +\n                '</div><!-- .row -->' +\n            '</div>';\n\n        var modalInstance = $uibModal.open({\n            template: no_connection_template, // for offline, cannot use templateURL.\n            animation: true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function ($scope, $window) {\n                $scope.clickRefresh = function () {\n                    modalInstance.dismiss('cancel');\n                    $window.location.reload(); // refresh the current page.\n\n                    //$window.location.href = '/'; // this is for Firefox to work.\n\n                    // For Firefox,  $location.path or $window.location.href will not be done before $window.location.reload is run.\n                    // Therefore, $window.location.reload will reload the current URL.\n                    //$window.location.reload();\n                };\n            }\n        });\n\n        /* window alert is blocking the whole web browser (for all tabs).... This is not ideal.\n        $window.alert('Developer Hub cannot reach gateway!\\n\\nPlease check gateway status, network connection, and then refresh or try again later.\\n\\nWarning: The task you arer running may still be running on the gateway. However, Developer Hub may not be able to sync up to that status if the task is still running.');\n        */\n    });\n});\n","config_sensor = {\n    broker: {\n\t\thost:    null, // was window.location.hostname, but set from $scope.device wan ip address (see $scope.mqttInit in app.js)\n\t\twssPort: 9002,\n\t\twsPort:  9001, \n\t\ttopic: \"/sensors\",\n\t\treconnectTimeout: 5000,\n\t\treconnectInterval: 3\n    },\n    charts: [\n\t{\n\t    title: \"Temperature\",\n\t    chartType: \"line\",\n\t    units: \"F\",\n\t    min: \"0\",\n\t    max: \"100\",\n\t    targetLow: \"30\",\n\t    targetHigh: \"60\",\n\t    points: \"50\"\n\t},\n\t{\n\t    title: \"Humidity\",\n\t    chartType: \"gauge\",\n\t    units: \"%\",\n\t    min: \"0\",\n\t    max: \"100\",\n\t    targetLow: \"30\",\n\t    targetHigh: \"60\",\n\t    points: \"1\"\n\t}\n    ]\n};\n","// Used in HTML as hub-dashboard-linegraph\niotgatewayhub.directive('hubDashboardLinegraph', function () {\n    return {\n        restrict: 'E',\n        templateUrl: 'partials/hub.dashboard.linegraph.ng.html?version=' + gui_version,\n        replace: true,\n        scope: {\n              latestData: '=',\n              scaleSteps: '=',\n              scaleStepWidth: '=',\n              scaleStartValue: '=',\n              pointsToShow: '=',\n              units: '=',\n              connected: '='\n        },\n        link: function ($scope, $elem, attrs) {\n            var datasets = {\n\n            };\n\n            $scope.connected = true;\n\n            var setOptions = function() {\n\n                var overrideScale = ($scope.scaleSteps !== null &&\n                            $scope.scaleSteps !== undefined &&\n                            $scope.scaleStepWidth !== null &&\n                            $scope.scaleStepWidth !== undefined &&\n                            $scope.scaleStartValue !== null &&\n                            $scope.scaleStartValue !== undefined);\n\n                $scope.options = {\n                    animation: false,\n                    showScale: true,\n                    showTooltips: false,\n                    maintainAspectRatio: false,\n\n                    scaleOverride: overrideScale,\n                    scaleSteps: parseInt($scope.scaleSteps),\n                    scaleStepWidth: parseFloat($scope.scaleStepWidth),\n                    scaleStartValue: parseFloat($scope.scaleStartValue),\n                    scaleFontColor: \"#ffffff\",\n\n                    // String - Message for empty data\n                    emptyDataMessage: \" \",\n\n                    ///Boolean - Whether grid lines are shown across the chart\n                    scaleShowGridLines : true,\n\n                    //String - Colour of the grid lines\n                    scaleGridLineColor : \"rgba(0,0,0,.05)\",\n\n                    //Number - Width of the grid lines\n                    scaleGridLineWidth : 1,\n\n                    //Boolean - Whether to show horizontal lines (except X axis)\n                    scaleShowHorizontalLines: true,\n\n                    //Boolean - Whether to show vertical lines (except Y axis)\n                    scaleShowVerticalLines: false,\n\n                    // String - scale type: \"number\" or \"date\"\n                    scaleType: \"date\",\n\n                    // Boolean - Whether to use UTC dates instead local\n                    useUtc: false,\n\n                    // String - short time format (used for scale labels)\n                    scaleTimeFormat: \" \",\n\n                    //Boolean - Whether the line is curved between points\n                    bezierCurve : true,\n\n                    //Number - Tension of the bezier curve between points\n                    bezierCurveTension : 0.4,\n\n                    //Boolean - Whether to show a dot for each point\n                    pointDot : false,\n\n                    //Number - Radius of each point dot in pixels\n                    pointDotRadius : 2,\n\n                    //Number - Pixel width of point dot stroke\n                    pointDotStrokeWidth : 1,\n\n                    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n                    pointHitDetectionRadius : 1,\n\n                    //Boolean - Whether to show a stroke for datasets\n                    datasetStroke : true,\n\n                    //Number - Pixel width of dataset stroke\n                    datasetStrokeWidth : 3,\n\n                    //Boolean - Whether to fill the dataset with a colour\n                    datasetFill : false,\n\n                    legendTemplate : \"<div></div>\"\n\n                };\n            };\n\n            var trimHistory = function () {\n                while ($scope.scatterChart.datasets[0].points.length > $scope.pointsToShow) {\n                    $scope.scatterChart.datasets[0].removePoint(0);\n                    $scope.dataHistory[0].data.shift();\n                }\n                // if ($scope.dataHistory[0].data) {\n                //     while ($scope.dataHistory[0].data.length > $scope.pointsToShow) {\n                //         $scope.dataHistory[0].data.shift();\n                //     }\n                // }\n            };\n\n            $scope.dataHistory = [\n                {\n                    label: '',\n                    strokeColor: '#ffffff',\n                    data: [\n                        {x: $scope.latestData.x, y: $scope.latestData.y}\n                    ]\n                }\n            ]; // must be 1 level deep to provide data in a series for chart.js\n\n            setOptions();\n            var chartCanvasFind = $elem.find(\"canvas\");\n            console.log(\"hub.dashboard.linegraph.js \", chartCanvasFind, chartCanvasFind.length);\n            var canvasContext = chartCanvasFind[0].getContext(\"2d\");\n            $scope.scatterChart = new Chart(canvasContext).Scatter($scope.dataHistory, $scope.options);\n\n            if ($scope.latestData !== null && $scope.latestData !== undefined) {\n                $scope.scatterChart.datasets[0].addPoint($scope.latestData.x, $scope.latestData.y);\n                $scope.dataHistory[0].data.push({x:$scope.latestData.x, y:$scope.latestData.y});\n            }\n\n            $scope.series = [\"\"];\n\n            $scope.$watchGroup(['scaleStepWidth', 'scaleStartValue', 'scaleSteps'], function() {\n\n                setOptions();\n                $scope.scatterChart.destroy();\n                $scope.scatterChart = new Chart(canvasContext).Scatter($scope.dataHistory, $scope.options);\n            });\n\n            $scope.$watch('latestData', function() {\n\n                if ($scope.latestData !== null && $scope.latestData !== undefined) {\n                   $scope.scatterChart.datasets[0].addPoint($scope.latestData.x,$scope.latestData.y);\n                   $scope.dataHistory[0].data.push({x:$scope.latestData.x, y:$scope.latestData.y});\n                }\n                trimHistory();\n\n                $scope.scatterChart.update();\n            });\n\n            $scope.$watch('pointsToShow', function() {\n               trimHistory();\n               $scope.scatterChart.update();\n            });\n\n            $scope.$watch('connected', function() {\n                if ($scope.connected) {\n                    $scope.dataHistory[0].strokeColor = \"#ffffff\";\n                } else {\n                    $scope.dataHistory[0].strokeColor = \"#7f868c\";\n                }\n                $scope.scatterChart.destroy();\n                $scope.scatterChart = new Chart(canvasContext).Scatter($scope.dataHistory, $scope.options);\n            });\n\n            setOptions();\n        }\n    };\n});","// Used in HTML as hub-dashboard-radial-graph\niotgatewayhub.directive('hubDashboardRadialGraph', function () {\n    return {\n        restrict: 'E',\n        templateUrl: 'partials/hub.dashboard.radialgraph.ng.html?version=' + gui_version,\n        replace: true,\n        scope: {\n              data: '=',\n              units: '=',\n              upperRange: '=',\n              lowerRange: '=',\n              connected: '=',\n        },\n        link: function ($scope, $elem, attrs) {\n            console.log($scope.scaleSteps);\n\n            function createDataPair() {\n                $scope.dataPair = [($scope.upperRange-$scope.lowerRange)-$scope.data, $scope.data];\n            }\n\n            $scope.$watch('data', function() {\n                createDataPair();\n            });\n\n            $scope.options = {\n                showTooltips: false,\n\n                //Boolean - Whether we should show a stroke on each segment\n                segmentShowStroke : true,\n\n                //String - The colour of each segment stroke\n                segmentStrokeColor : \"#003c71\",\n\n                //Number - The width of each segment stroke\n                segmentStrokeWidth : 4,\n\n                //Number - The percentage of the chart that we cut out of the middle\n                percentageInnerCutout : 80, // This is 0 for Pie charts\n\n                //Number - Amount of animation steps\n                animationSteps : 10,\n\n                //String - Animation easing effect\n                animationEasing : \"easeOutBounce\",\n\n                //Boolean - Whether we animate the rotation of the Doughnut\n                animateRotate : false,\n\n                //Boolean - Whether we animate scaling the Doughnut from the centre\n                animateScale : false,\n            };\n\n            $scope.doughnutColors = [\"#003c71\",\"#8DC449\"];\n            $scope.labels = [\"\",\"\"];\n\n            $scope.$watch('connected', function() {\n                if ($scope.connected) {\n                    $scope.doughnutColors = [\"#003c71\",\"#8DC449\"];\n                } else {\n                    $scope.doughnutColors = [\"#003c71\",\"#7f868c\"];\n                }\n            });\n        }\n    };\n});","// In HTML, this will be used as hub-dashboard-sensor.\niotgatewayhub.directive('hubDashboardSensor', function () {\n    return {\n        restrict: 'E',\n        templateUrl: 'partials/hub.dashboard.sensor.ng.html?version=' + gui_version,\n        link: function ($scope, elem, attrs) {\n            console.log(\"hubDashboardSensor \", $scope);\n        }\n    };\n});","// Used in HTML as hub-loading\niotgatewayhub.directive('hubLoading', function () {\n    return {\n        restrict : 'E',\n        templateUrl: 'partials/hub.loading.ng.html?version=' + gui_version,\n\n        controller: function ($scope, $http) {\n            $scope.loadMessage = \"Loading..\";\n            $scope.showMessage = true; // for modern browsers\n            console.log(\"hubLoading \", $scope);\n        }\n    };\n});","// Used in HTML as hub-network-settings\niotgatewayhub.directive('hubNetworkSettings',function(){\n    return {\n        url:         '/hub/networksettings', \n        templateUrl: '/partials/hub.networksettings.ng.html?version=' + gui_version,\n        resolve:     {},\n        controller: function($scope,$state,$http,$rootScope,$timeout,workerProcessRestService){\n\n            $scope.tmpSettings = {\n                single_url: $scope.settings.proxy.single_url,\n                single_port: $scope.settings.proxy.single_port,\n\n                http_url: $scope.settings.proxy.http_url,\n                http_port: $scope.settings.proxy.http_port,\n\n                https_url: $scope.settings.proxy.https_url,\n                https_port: $scope.settings.proxy.https_port,\n\n                ftp_url: $scope.settings.proxy.ftp_url,\n                ftp_port: $scope.settings.proxy.ftp_port,\n\n                socks_url: $scope.settings.proxy.socks_url,\n                socks_port: $scope.settings.proxy.socks_port,\n\n                no_proxy: $scope.settings.proxy.no_proxy\n            };\n\n            function init(){\n                if(!authorization.username){\n                   $state.go('welcome.login',{});\n                }\n\n                var defaults ={\n                    saveText: \"Ok\",\n                    cancelText: \"Cancel\",\n                    insideModal:false,\n                    hideTestSettings:true,\n                    maintainContextAfterSave: false\n                };\n\n                if ($scope.cancelText) defaults.cancelText = $scope.cancelText;\n\n                // JQuery's extend to add more properties to $scope object\n                $.extend($scope, defaults,{\n                    isSaving: false,\n                    barMessage: 'Saving network settings and adding Wind River repositories if needed. This may take a few minutes.',\n                    isUpdatingChannelsFailed: false,\n                    showSaveResult: false,\n                    networkSettingsTest: {\n                        running:false,\n                        status:\"Test settings\",\n                        result:\"\",\n                        success:null,\n                        isVisible:false\n                    },\n                    saveResult:{\n                        message:\"\",\n                        success:null,\n                        isVisible:false\n                    }\n                });\n            }\n\n            init();\n\n            $scope.onSaveSuccess = function(result){\n                $scope.isSaving = false;\n                $scope.saveResult.isVisible = true;\n                $scope.saveResult.success = true;\n                $scope.saveResult.message = \"Saved settings\";\n                $timeout(function(){\n                    $scope.saveResult.isVisible = false;\n                }, linger_info_timeout_milliseconds);\n            };\n\n            $scope.onSaveFail = function(result){\n                $scope.$emit(\"hub.unlockModal\");\n\n                $scope.isSaving = false;\n                $scope.saveResult.isVisible = true;\n                $scope.saveResult.success = false;\n                $scope.saveResult.message = result.message;\n                $timeout(function(){\n                    $scope.saveResult.isVisible = false;\n                }, linger_info_timeout_milliseconds);\n            };\n\n            $scope.nextAction = function(){\n                var blockUI = true;\n\n                $scope.$emit(\"hub.lockModal\", [$scope]);\n\n                $scope.isSaving =true;\n\n                // should ideally be passed to applyProxySettings as a model\n                $scope.settings.proxy = $scope.tmpSettings;\n\n                function successApplyProxySettings(response) {\n                    // update repos/channels\n                    $scope.barMessage = 'Refreshing the installed package list. This may take a few minutes.';\n                    tempURL = '/api/repository';\n                    workerProcessRestService.performGeneralExecution('PUT', tempURL, true, false, null,\n                        function successCallback(data) {\n                            try {\n                                var p_list = JSON.parse(data.p_list);\n                                if ($scope.connected){\n                                    $scope.setPackages('True', p_list);\n                                }\n                                else{\n                                    $scope.setPackages('False', p_list);\n                                }\n                            } catch(err) {\n                                // ignore error\n                                console.log(err.message);\n                            }\n\n                            $scope.$emit(\"hub.unlockModal\");\n\n                            if ($scope.maintainContextAfterSave) {\n                                $scope.onSaveSuccess(response);\n                            } else {\n                                $scope.doneSuccessCallback(response);\n                            }\n\n                        }, function errorCallback(errorMessage) {\n                            $scope.$emit(\"hub.unlockModal\");\n\n                            $scope.barMessage = errorMessage;\n                            $scope.isUpdatingChannelsFailed = true;\n                        }, rest_check_interval_milliseconds_m);\n                }\n\n                $scope.applyProxySettings(successApplyProxySettings,  $scope.onSaveFail);\n            };\n\n            //$scope.networkSettingsTest = {running:true,status:'fail'};\n\n            $scope.testProxySettingsCallback = function(result){\n                $scope.networkSettingsTest.result = result ? \"Connection established!\": \"Connection failed.\";\n                $scope.networkSettingsTest.success = !!result;\n\n                $scope.networkSettingsTest.running=false;\n\n                $timeout(function(){\n                     $scope.networkSettingsTest.isVisible = false;\n                    $scope.networkSettingsTest.success =false;\n                },linger_info_timeout_milliseconds);\n            };\n\n            $scope.testSettings = function(){\n                $scope.networkSettingsTest.isVisible = true;\n                $scope.networkSettingsTest.running=true;\n                $scope.networkSettingsTest.result=\"Testing..\";\n                $scope.testProxySettings(\n                    function(){$scope.testProxySettingsCallback(true);},\n                    function(){$scope.testProxySettingsCallback(false);});\n            };\n        }\n    };\n});","// Used in HTML as show-oem-on-load\niotgatewayhub.directive('showOemOnLoad', function() {\n    return {\n        restrict: 'A',\n        link: function(scope, element, attrs) {\n            element.bind('load', function() {\n                scope.hideOEMBranding = false;\n            });\n        }\n    };\n});\n","// Used in HTML as ps-mouse-over\niotgatewayhub.directive('psMouseOver', function () {\n    return {       \n        link: function(scope, element) {\n            element.bind(\"mouseover\", function(e){\n            \tconsole.log( 'mousever');\n                e.stopPropagation();\n                e.preventDefault();    \n                element.perfectScrollbar('update');\n            });   \n        }\n    };\n});","/*angular.module('app', ['ngAnimate'])\n\n.controller('FormCtrl', ['$scope', function($scope) {\n  // hide error messages until 'submit' event\n  $scope.submitted = false;\n  // hide success message\n  $scope.showMessage = false;\n  // method called from shakeThat directive\n  $scope.submit = function() {\n    // show success message\n    $scope.showMessage = true;\n  };\n}])\n*/\n// Used in HTML as shake-that\niotgatewayhub.directive('shakeThat', ['$animate', function($animate) {\n\n    return {\n        require: '^form',\n        scope: {\n            submit: '&',\n            submitted: '='\n        },\n\n        link: function(scope, element, attrs, form) {\n\n            // listen on submit event\n            element.on('submit', function() {\n                // tell angular to update scope\n                scope.$apply(function() {\n                    // everything ok -> call submit fn from controller\n                    if (form.$valid) return scope.submit();\n\n                    // show error messages on submit\n                    scope.submitted = true;\n                    // shake that form\n                    $animate.addClass(element, 'shake', function() {\n                        $animate.removeClass(element, 'shake');\n                    });\n                });\n            });\n        }\n    };\n\n}]);","iotgatewayhub.service('httpRequestsService', function($q){\n\n    // We use service here because we need to keep track of this \"toBeAbortedPromises\" array.\n    // For Service, an object will be instantiated.\n    var toBeAbortedPromises = [];\n\n    function customTimeout() {\n        var newPromise = $q.defer();\n        toBeAbortedPromises.push(newPromise);\n        return newPromise.promise;\n    }\n\n    function abortAllRequests() {\n        angular.forEach(toBeAbortedPromises, function (eachPromise){\n            eachPromise.promise.isAbortedByUs = true;\n            eachPromise.resolve();\n        });\n        // clear the array, and still keep the array object\n        toBeAbortedPromises.length = 0;\n    }\n\n    function removeRequest(response) {\n        // Once the web request has a response, we should remove it from the tracking array.\n        try {\n            // skip is response.config.timeout is not a promise\n            if (typeof response.config.timeout === 'number') {\n                return;\n            } else if (response.config.timeout === undefined) {\n                return;\n            }\n\n            // try to find a match in the recorded array\n            var target_index = -1;\n            var count = 0;\n            angular.forEach(toBeAbortedPromises, function (eachPromise){\n                if (eachPromise.promise === response.config.timeout) {\n                    target_index = count;\n                }\n                count = count + 1;\n            });\n            if (target_index > -1) {\n                // found, so remove it\n                toBeAbortedPromises.splice(target_index, 1);\n            }\n        } catch (err) {\n            // ignore error\n        }\n    }\n\n    return {\n        customTimeout: customTimeout,\n        abortAllRequests: abortAllRequests,\n        removeRequest: removeRequest\n    };\n});\n\niotgatewayhub.factory('httpRequestsInterceptor', ['$rootScope', '$q', 'httpRequestsService', function($rootScope, $q, httpRequestsService){\n    return {\n        'request': function (config) {\n            //console.log('############### req s ####################');\n            config = config || {};\n            if (typeof config.url === 'string') {\n                if (config.url.indexOf('.ng.html') > -1) {\n                    // Note:  For Chrome, if there is no connection, it will immediately abort the request and returns status = -1.\n                    //      However, For Firefox, if there is no connection,it queues the request as pending request. For user, if the user\n                    //      wants to open a GUI, the GUI may appear in-responsive to the user.\n                    //      Therefore, we set some timeout for html request.\n                    //console.log('dealing with static content');\n                    config.timeout = html_content_timeout_milliseconds;\n                }\n            }\n            if (config.timeout === undefined) {\n              // If no specific timeout is assigned, we use our custom timeout.\n              //console.log('custom promise');\n              config.timeout = httpRequestsService.customTimeout();\n            }\n            return config;\n        },\n        //'requestError': function (rejection) {\n        //    console.log('############### resp f ####################');\n        //    console.log(rejection);\n        //    return $q.reject(rejection);\n        //},\n        'response': function (response) {\n            //console.log('############### resp s ####################');\n            setResponseErrorTime(false);\n            httpRequestsService.removeRequest(response);\n            return response;\n        },\n        'responseError': function (rejection) {\n            //console.log('############### resp f ####################');\n            //console.log(rejection);\n            if (rejection.config.timeout.isAbortedByUs) {\n                // In this case, this error is due to we aborting this request.... so we should not raise error again.\n                // return an never-resolving promise as we do not return success or error.\n                return $q.defer().promise;\n            }\n\n            httpRequestsService.removeRequest(rejection);\n\n            if ((rejection.status === -1) || (rejection.status === 401) || (rejection.status === 408)) {\n                setResponseErrorTime(true);\n            } else {\n                // not targeted error\n                setResponseErrorTime(false);\n            }\n\n            if (rejection.status === -1) {\n                // Check for IE, Firefox, and Chrome.\n                //\n                // This is due to not reaching the backend server.\n                // In this scenarios,\n                //      For all browsers, GET request should result in this right away.\n                //      For some browser, POST/PUT/DELETE request will result in this right away.\n                //      However, for some browser (Firefox, e.g.), POST/PUT/DELETE will be queued (and keep trying) until the timeout time is reached.\n                // We need to:\n                //      1. In the handler of \"Gateway_Not_Reachable\",  cancel/abort all pending/queued requests.\n                //      2. In uibModal.open or state (GET request with .ng.html url), we set timeout so that we can get response of status = -1.\n                if (start_trigger_no_connection) {\n                    var to_report = checkResponseErrorReport();\n                    if (to_report) {\n                        $rootScope.$broadcast(\"Gateway_Not_Reachable\");\n                    }\n                }\n            }\n\n            return $q.reject(rejection);\n        }\n    };\n}]);\n","iotgatewayhub.factory('workerProcessRestService', ['$http', '$uibModal', '$rootScope', function($http, $uibModal, $rootScope){\n    var workerProcessRestService = {};\n\n    function createWorkID() {\n        var randomNum = Math.random();\n        return randomNum.toString();\n    }\n\n    function checkPeriodicCheckingResponseError(response) {\n        var report = false;\n        var return_message = '';\n\n        if ((response.status === -1) || (response.status === 408) || (response.status === 401)) {\n            report = checkResponseErrorReport();\n            if (report) {\n                if (response.status === -1) {\n                    return_message = 'Cannot connect to the gateway server anymore!';\n                } else if (response.status === 408) {\n                    return_message = 'The request got timeout error: http status is 408!';\n                } else if (response.status === 401) {\n                    return_message = 'The request got access denied: http status is 401!';\n                } else {\n                    return_message = '';\n                }\n            } else {\n                return_message = '';\n            }\n        } else {\n            return_message = 'Something went wrong: HTTP response status is ' + response.status;\n        }\n\n        // empty string means : do not report\n        return return_message;\n    }\n\n    function informGeneralError(titleMessage, descMessage, barBeforeMessage) {\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.general.checking.inprogress.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.title_message = titleMessage;\n                $scope.description_message = descMessage;\n                $scope.bar_before_message = barBeforeMessage;\n                $scope.hasError = true;\n\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    }\n\n    workerProcessRestService.informGeneralChecking = function(httpMethod, httpURL, noParameter, httpJSON, httpBody, titleMessage, descMessage, barBeforeMessage, realSuccessCallback, checkPeriod) {\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.general.checking.inprogress.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function($scope,$state,$http,$rootScope){\n                console.log(\"hub controller: API call \" + httpMethod + \" \" + httpURL);\n\n                $scope.title_message = titleMessage;\n                $scope.description_message = descMessage;\n                $scope.bar_before_message = barBeforeMessage;\n                $scope.hasError = false;\n\n                var workID = createWorkID();\n\n                var http_call = {\n                    method: httpMethod\n                };\n\n                if (httpJSON === true) {\n                    // id and is_checking are inside the request body\n                    httpBody.id = workID;\n                    httpBody.is_checking = 'False';\n                    http_call.url = httpURL;\n                    http_call.headers = {'Content-type' : 'application/json'};\n                    http_call.data = JSON.stringify(httpBody);\n                } else {\n                    // id and is_checking are in the url directly\n                    if (httpMethod === 'GET') {\n                        if (noParameter === true) {\n                           http_call.url = httpURL + '?is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\n                        } else {\n                            http_call.url = httpURL + '&is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\n                        }\n                    } else {\n                        if (noParameter === true) {\n                            http_call.url = httpURL + '?is_checking=False&id=' + workID;\n                        } else {\n                            http_call.url = httpURL + '&is_checking=False&id=' + workID;\n                        }\n                    }\n                }\n\n                function periodicChecking() {\n                    var http_call = {\n                        method: httpMethod\n                    };\n\n                    if (httpJSON === true) {\n                        // id and is_checking are inside the request body\n                        httpBody.id = workID;\n                        httpBody.is_checking = 'True';\n                        http_call.url = httpURL;\n                        http_call.headers = {'Content-type' : 'application/json'};\n                        http_call.data = JSON.stringify(httpBody);\n                    } else {\n                        // id and is_checking are in the url directly\n                        if (httpMethod === 'GET') {\n                            if (noParameter === true) {\n                                http_call.url = httpURL + '?is_checking=True&id=' + workID + '&nocache=' + new Date().getTime();\n                            } else {\n                                http_call.url = httpURL + '&is_checking=True&id=' + workID + '&nocache=' + new Date().getTime();\n                            }\n                        } else {\n                            if (noParameter === true) {\n                                http_call.url = httpURL + '?is_checking=True&id=' + workID;\n                            } else {\n                                http_call.url = httpURL + '&is_checking=True&id=' + workID;\n                            }\n                        }\n                    }\n\n                    console.log(\"hub controller: API checking call \" + httpMethod + \" \" + http_call.url);\n                    $http(http_call).then(\n                        function successCheckingCallback(response) {\n                            if (response.data.status === 'success') {\n                                console.log(\"hub controller: got work results\");\n                                setupPeriodicChecking(false);\n                                realSuccessCallback(response.data);\n                                modalInstance.dismiss('cancel');\n                            } else if (response.data.status === 'untrusted') {\n                                console.log(\"hub controller: got work results - untrusted\");\n                                setupPeriodicChecking(false);\n                                realSuccessCallback(response.data);\n                                modalInstance.dismiss('cancel');\n                            } else {\n                                if (response.data.in_progress === true) {\n                                    // check again if needed.\n                                    console.log(\"hub controller: cannot check work, still in progress\");\n                                    setupPeriodicChecking(true);\n                                    setTimeout(periodicChecking, checkPeriod);\n                                } else {\n                                    console.log(\"hub controller: cannot check work, error\");\n                                    setupPeriodicChecking(false);\n                                    informGeneralError(titleMessage, descMessage, \"The operation failed! \" + response.data.message);\n                                    modalInstance.dismiss('cancel');\n                                }\n                            }\n                        }, function errorCheckingCallback(response) {\n                            console.log(\"hub controller: cannot check work, error\");\n                            var temp_error_message = checkPeriodicCheckingResponseError(response);\n                            if (temp_error_message) {\n                                setupPeriodicChecking(false);\n                                informGeneralError(titleMessage, descMessage, temp_error_message);\n                                modalInstance.dismiss('cancel');\n                            } else {\n                                // do not report, keep checking\n                                setupPeriodicChecking(true);\n                                setTimeout(periodicChecking, checkPeriod);\n                            }\n                        });\n                }\n\n                $http(http_call).then(\n                    function successCallback(response) {\n                        if (response.data.status === 'success') {\n\n                            // start checking after some delay\n                            setupPeriodicChecking(true);\n                            setTimeout(periodicChecking, checkPeriod);\n\n                            console.log(\"hub controller: successfully submitted work\");\n                        } else {\n                            if (response.data.in_progress === true) {\n                                console.log(\"hub controller: cannot submit work, other work in progress\");\n                                var error_message = response.data.work_type + ' (run by another user) is still in progress!';\n                                informGeneralError(titleMessage, descMessage, error_message);\n                                modalInstance.dismiss('cancel');\n                            } else {\n                                console.log(\"hub controller: cannot submit work, error\");\n                                informGeneralError(titleMessage, descMessage, \"The operation failed! \" + response.data.message);\n                                modalInstance.dismiss('cancel');\n                            }\n                        }\n                    },function errorCallback(response){\n                        console.log(\"hub controller: cannot submit work, error\");\n                        informGeneralError(titleMessage, descMessage, \"Something went wrong: HTTP status \" + response.status);\n                        modalInstance.dismiss('cancel');\n                    });\n            }\n        });\n    };\n\n    workerProcessRestService.performGeneralExecution = function(httpMethod, httpURL, noParameter, httpJSON, httpBody, passedSuccessCallback, passedErrorCallback, checkPeriod) {\n        var workID = createWorkID();\n\n        var http_call = {\n            method: httpMethod\n        };\n\n        if (httpJSON === true) {\n            // id and is_checking are inside the request body\n            httpBody.id = workID;\n            httpBody.is_checking = 'False';\n            http_call.url = httpURL;\n            http_call.headers = {'Content-type' : 'application/json'};\n            http_call.data = JSON.stringify(httpBody);\n        } else {\n            // id and is_checking are in the url directly\n            if (httpMethod === 'GET') {\n                if (noParameter === true) {\n                    http_call.url = httpURL + '?is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\n                } else {\n                    http_call.url = httpURL + '&is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\n                }\n            } else {\n                if (noParameter === true) {\n                    http_call.url = httpURL + '?is_checking=False&id=' + workID;\n                } else {\n                    http_call.url = httpURL + '&is_checking=False&id=' + workID;\n                }\n            }\n        }\n\n        function periodicChecking() {\n            var http_call = {\n                method: httpMethod\n            };\n\n            if (httpJSON === true) {\n                // id and is_checking are inside the request body\n                httpBody.id = workID;\n                httpBody.is_checking = 'True';\n                http_call.url = httpURL;\n                http_call.headers = {'Content-type' : 'application/json'};\n                http_call.data = JSON.stringify(httpBody);\n            } else {\n                // id and is_checking are in the url directly\n                if (httpMethod === 'GET') {\n                    if (noParameter === true) {\n                        http_call.url = httpURL + '?is_checking=True&id=' + workID + '&nocache=' + new Date().getTime();\n                    } else {\n                        http_call.url = httpURL + '&is_checking=True&id=' + workID + '&nocache=' + new Date().getTime();\n                    }\n                } else {\n                    if (noParameter === true) {\n                        http_call.url = httpURL + '?is_checking=True&id=' + workID;\n                    } else {\n                        http_call.url = httpURL + '&is_checking=True&id=' + workID;\n                    }\n                }\n            }\n\n            console.log(\"hub controller: API checking call \" + httpMethod + \" \" + http_call.url);\n            $http(http_call).then(\n                function successCheckingCallback(response) {\n                    if (response.data.status === 'success') {\n                        console.log(\"hub controller: got work results\");\n                        setupPeriodicChecking(false);\n                        passedSuccessCallback(response.data);\n                    } else if (response.data.status === 'untrusted') {\n                        console.log(\"hub controller: got work results - untrusted\");\n                        setupPeriodicChecking(false);\n                        passedSuccessCallback(response.data);\n                    } else {\n                        if (response.data.in_progress === true) {\n                            // check again if needed.\n                            console.log(\"hub controller: cannot check work, still in progress\");\n                            setupPeriodicChecking(true);\n                            setTimeout(periodicChecking, checkPeriod);\n                        } else {\n                            console.log(\"hub controller: cannot check work, error\");\n                            setupPeriodicChecking(false);\n                            var error_message = response.data.message;\n                            passedErrorCallback(error_message);\n                        }\n                    }\n                }, function errorCheckingCallback(response) {\n                    console.log(\"hub controller: cannot check work, error\");\n                    var temp_error_message = checkPeriodicCheckingResponseError(response);\n                    if (temp_error_message) {\n                        setupPeriodicChecking(false);\n                        passedErrorCallback(temp_error_message);\n                    } else {\n                        // do not report, keep checking\n                        setupPeriodicChecking(true);\n                        setTimeout(periodicChecking, checkPeriod);\n                    }\n                });\n        }\n\n        $http(http_call).then(\n            function successCallback(response) {\n                if (response.data.status === 'success') {\n\n                    // start checking after some delay\n                    setupPeriodicChecking(true);\n                    setTimeout(periodicChecking, checkPeriod);\n\n                    console.log(\"hub controller: successfully submitted work\");\n                } else {\n                    if (response.data.in_progress === true) {\n                        console.log(\"hub controller: cannot submit work, other work in progress\");\n                        setupPeriodicChecking(false);\n                        passedErrorCallback(response.data.work_type + ' (run by another user) is still in progress! Please try again later!');\n                    } else {\n                        console.log(\"hub controller: cannot submit work, error\");\n                        setupPeriodicChecking(false);\n                        passedErrorCallback(response.data.message);\n                    }\n                }\n            },function errorCallback(response){\n                console.log(\"hub controller: cannot submit work, error\");\n                setupPeriodicChecking(false);\n                passedErrorCallback(\"Something went wrong: HTTP status \" + response.status);\n            });\n    };\n\n    workerProcessRestService.performGeneralExecutionOnlySubmit = function(httpMethod, httpURL, noParameter, httpJSON, httpBody, passedSuccessCallback, passedErrorCallback) {\n        var workID = createWorkID();\n\n        var http_call = {\n            method: httpMethod\n        };\n\n        if (httpJSON === true) {\n            // id and is_checking are inside the request body\n            httpBody.id = workID;\n            httpBody.is_checking = 'False';\n            http_call.url = httpURL;\n            http_call.headers = {'Content-type' : 'application/json'};\n            http_call.data = JSON.stringify(httpBody);\n        } else {\n            // id and is_checking are in the url directly\n            if (httpMethod === 'GET') {\n                if (noParameter === true) {\n                    http_call.url = httpURL + '?is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\n                } else {\n                    http_call.url = httpURL + '&is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\n                }\n            } else {\n                if (noParameter === true) {\n                    http_call.url = httpURL + '?is_checking=False&id=' + workID;\n                } else {\n                    http_call.url = httpURL + '&is_checking=False&id=' + workID;\n                }\n            }\n        }\n\n        $http(http_call).then(\n            function successCallback(response) {\n                if (response.data.status === 'success') {\n                    setupPeriodicChecking(false);\n                    passedSuccessCallback(response.data);\n                    console.log(\"hub controller: successfully submitted work\");\n                } else {\n                    if (response.data.in_progress === true) {\n                        console.log(\"hub controller: cannot submit work, other work in progress\");\n                        setupPeriodicChecking(false);\n                        passedErrorCallback(response.data.work_type + ' (run by another user) is still in progress! Please try again later!');\n                    } else {\n                        console.log(\"hub controller: cannot submit work, error\");\n                        setupPeriodicChecking(false);\n                        passedErrorCallback(response.data.message);\n                    }\n                }\n            },function errorCallback(response){\n                console.log(\"hub controller: cannot submit work, error\");\n                setupPeriodicChecking(false);\n                passedErrorCallback(\"Something went wrong: HTTP status \" + response.status);\n            });\n    };\n\n    return workerProcessRestService;\n}]);\n","iotgatewayhub.factory('utilityFunctionsService', ['$http', function($http){\n    var utilityFunctionsService = {};\n\n    utilityFunctionsService.isNumber = function(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    };\n\n    utilityFunctionsService.pad = function(n, width, z) {\n        z = z || '0';\n        n = n + '';\n        return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n    };\n\n    utilityFunctionsService.parse_digest = function(_header) {\n        var ws = '(?:(?:\\\\r\\\\n)?[ \\\\t])+';\n        var token = '(?:[\\\\x21\\\\x23-\\\\x27\\\\x2A\\\\x2B\\\\x2D\\\\x2E\\\\x30-\\\\x39\\\\x3F\\\\x41-\\\\x5A\\\\x5E-\\\\x7A\\\\x7C\\\\x7E]+)';\n        var quotedString = '\"(?:[\\\\x00-\\\\x0B\\\\x0D-\\\\x21\\\\x23-\\\\x5B\\\\\\\\x5D-\\\\x7F]|'+ws+'|\\\\\\\\[\\\\x00-\\\\x7F])*\"';\n        var tokenizer = RegExp(token+'(?:=(?:'+quotedString+'|'+token+'))?', 'g');\n        var tokens = _header.match(tokenizer);\n        return tokens;\n    };\n\n    utilityFunctionsService.unq = function(quotedString) {\n        return quotedString.substr(1, quotedString.length-2).replace(/(?:(?:\\r\\n)?[ \\t])+/g, \" \");\n    };\n\n    utilityFunctionsService.setCookie = function(cname, cvalue, exdays) {\n        var d = new Date();\n        d.setTime(d.getTime() + (exdays*24*60*60*1000));\n        var expires = \"expires=\"+d.toUTCString();\n        document.cookie = cname + \"=\" + cvalue + \"; \" + expires;\n    };\n\n    utilityFunctionsService.checkNetwork = function(_successCallback,_errorCallback){\n        $http({\n            method: 'GET',\n            url:    '/api/proxy?request=test&nocache=' + new Date().getTime(),\n            cache:  false,\n        }).then(_successCallback,_errorCallback);\n    };\n\n    return utilityFunctionsService;\n}]);\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    $stateProvider.state(\"error\",{\n        url:         '/error',\n        templateUrl: '/partials/error.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope){\n\n        }\n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    $stateProvider.state('hub.dashboard.cloudcmd',{\n\n        url: '/cloudcmd',\n        templateUrl: '/partials/hub.cloudcmd.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope){\n\n        }\n\n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n\n    $stateProvider.state('hub.dashboard.documentation',{\n        url: '/dashboard/documentation',\n        templateUrl: '/partials/hub.dashboard.documentation.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope){\n\n            $scope.viewTutorial = function (tutorial_html) {\n                console.log('tutorial_html: ' + tutorial_html);\n                if ($scope.isQuark && tutorial_html == 'tutorial.savedeploy') {\n                    tutorial_html = 'tutorial.savedeploy_quark';\n                }\n                var url = $state.href(tutorial_html, {parameter: \"parameter\"});\n                window.open(url,'_blank');\n            };\n\n            $scope.viewSensorSetupTutorial = function () {\n                var url = $state.href('tutorial.sensorsetup', {parameter: \"parameter\"});\n                window.open(url,'_blank');\n            };\n            $scope.viewSensorCloudTutorial = function () {\n                var url = $state.href('tutorial.sensorcloud', {parameter: \"parameter\"});\n                window.open(url,'_blank');\n            };\n            $scope.viewHelixTutorial = function () {\n                var url = $state.href('tutorial.helixapp', {parameter: \"parameter\"});\n                window.open(url,'_blank');\n            };\n            $scope.viewSaveDeployTutorial = function () {\n                \n                console.log(\"Is this Quark? \" + $scope.isQuark);\n                var state_chosen = 'tutorial.savedeploy';\n                if ($scope.isQuark) {\n                    state_chosen = 'tutorial.savedeploy_quark';\n                }\n\n                var url = $state.href(state_chosen, { parameter: \"parameter\" });\n                console.log(\"URL is \" + url);\n                window.open(url,'_blank');\n            };\n\n        }\n    \n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    $stateProvider.state('hub.dashboard',{\n        url: '',\n        abstract: true,\n        templateUrl: '/partials/hub.dashboard.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope,$timeout){\n\n            $scope.timerExpired = function(chartMatch) {\n                console.log(\"timerExpired\", chartMatch);\n                chartMatch.connected = false;\n                $scope.$apply();\n            };\n            \n            $rootScope.isSensorPanelExpanded = true; // determines state of top bar: expanded or minimized, utilized by dashboardToggle()\n\n            $scope.checkElement = function(el){\n                //console.log(\"el: \" + el);\n                if (typeof el === \"undefined\" || el === null || el === ''){\n                    //console.log(\"returned FALSE\");\n                    return false;\n                }\n                else{\n                    //console.log(\"returned TRUE\");\n                    return true;\n                }\n            };\n          \n            $scope.sensors_charted = []; // Container for sensors. Sensors have a charts property that contain each chart\n            $scope.charts_flat_list = []; // Flat list of all charts, regardless of sensor parent\n\n            $scope.dashboardToggle = function(){\n                $rootScope.isSensorPanelExpanded = !$rootScope.isSensorPanelExpanded;\n                // console.log(\"dashboardToggle: \" + $rootScope.isSensorPanelExpanded);\n            };\n\n            $scope.carouselPrevious = function(){\n                console.log(\"carousel previous\");\n            };\n\n            $scope.carouselNext = function(){\n                console.log(\"carousel next\");\n            };\n\n            $scope.setDashboard();\n\n            // called when the client loses its connection\n            $scope.onConnectionLost = function(responseObject) {\n                if (responseObject.errorCode !== 0) {\n                    console.log(\"onConnectionLost:\"+responseObject.errorMessage);\n                }\n            };\n\n            $scope.countTabs = function(){\n                var tab_count = 0;\n                if ($scope.device.sensor_config == 'enabled'){\n                    tab_count++;\n                }\n                if ($scope.device.softsoc_config == 'enabled'){\n                    tab_count++;\n                }\n                if ($scope.device.ref_sw_config == 'enabled'){\n                    tab_count++;\n                }\n                if ($scope.device.package_config == 'enabled'){\n                    tab_count++;\n                }\n                if ($scope.device.admin_config == 'enabled'){\n                    tab_count++;\n                }\n                if ($scope.device.documentation_config == 'enabled'){\n                    tab_count++;\n                }\n                return tab_count;\n            };\n\n            // called when a message arrives\n            $scope.onMessageArrived = function(message) {\n                //console.log(\"sensor data received\");\n                if(log_message_json){\n                     console.log(\"onMessageArrived:\"+message.payloadString);\n                }\n               \n                try{\n                    var entry = JSON.parse(message.payloadString);\n\n                    var  _id = entry.id;\n                    \n                    // New chart - sensor data model for the visualizers\n                    var sensorMatches = $.grep($scope.sensors_charted, function(e){ return e.id == _id; });\n                    var sensorMatch;\n                    if (sensorMatches.length > 1) {\n                        console.log(\"Error in state.hub.dashboard:: A sensor was added twice to the same array\", _id);\n                    } else {\n                        if (sensorMatches.length == 1) {\n                            // One match, let's now consider if there is already a chart added to it\n                            sensorMatch = sensorMatches[0];\n                        } else {\n                            // Zero matches. This sensor has not yet been added to the sensors list\n                            sensorMatch = { \n                            charts: [],\n                            id: _id, \n                            title: entry.title\n                            };\n                            $scope.sensors_charted.push(sensorMatch);\n                        }\n                        sensorMatch.mostRecentValue = entry.datum[1];\n                        sensorMatch.priority = parseInt(entry.priority);\n                        sensorMatch.mostRecentUnits = entry.units;\n                        sensorMatch.mostRecentSource = entry.dataSource;\n                        sensorMatch.mostRecentTimestamp = new Date(parseInt(entry.datum[0])); \n                    }\n\n                    var chartMatches = $.grep(sensorMatch.charts, function(e){ return e.dataSource == entry.dataSource; });\n                    var chartMatch;\n                    if (chartMatches.length > 1) {\n                        console.log(\"Error in state.hub.dashboard:: A chart was added twice to the same sensor\", _id, entry.dataSource);\n                    } else if (chartMatches.length == 1) {\n                        chartMatch = chartMatches[0];\n                    } else {\n                        // Zero matches. This chart has not yet been added to the sensor's chart list\n                        chartMatch = {};\n                        sensorMatch.charts.push(chartMatch);\n                        $scope.charts_flat_list.push(chartMatch);\n                    }\n                    \n                    chartMatch.parentSensorTitle = sensorMatch.title;\n                    chartMatch.chartType = entry.chartType;\n                    if (entry.chartType == \"line\") {\n                        chartMatch.value = { x: entry.datum[0], y: entry.datum[1]};\n                    } else {\n                        chartMatch.value = entry.datum[1];\n                    }\n                    chartMatch.mostRecentValue = entry.datum[1];\n                    chartMatch.sourcePriority = parseInt(entry.sourcePriority);\n                    chartMatch.dataSource = entry.dataSource;\n                    chartMatch.min = entry.min;\n                    chartMatch.max = entry.max;  \n                    chartMatch.stepWidth = (entry.max - entry.min) / 5;\n                    chartMatch.pointsToShow = parseInt(entry.points);     \n                    chartMatch.units = entry.units;   \n                    chartMatch.timeToLive = parseFloat(entry.ttl);\n                    chartMatch.connected = true;\n                    chartMatch.mostRecentTimestamp = new Date(parseInt(entry.datum[0])); \n                    if (chartMatch.timerExpiredPromise) $timeout.cancel(chartMatch.timerExpiredPromise);\n                    chartMatch.timerExpiredPromise = $timeout( function(){ $scope.timerExpired(chartMatch); }, chartMatch.timeToLive * 1000);  \n                    $scope.$apply();\n\n                }catch(err){\n                    //console.log(\"ERROR onMessageArrive \"+err);\n                }\n            };\n\n            $scope.mqttInit = function(){\n                console.log(\"hub dashboard mqttInit 150a\");\n                //MQTT\n                /**\n                var broker = {\n                  host: config.broker.host,\n                  port: config.broker.wssPort,    //default port is  WSS port:9001\n                  id: \"client_\" + parseInt(Math.random() * 100, 10),\n                  topic: config.broker.topic,\n                  reconnectTimeout: config.broker.reconnectTimeout,\n                  reconnectInterval: config.broker.reconnectInterval,\n                  protocol: window.location.protocol,\n                  path: \"/mqtt\"\n                };\n                **/\n                var loop = 0;\n                var reconnect = false; //this is how Rob had it configured. Maybe set this to true for production?\n\n                //var _host = window.location.hostname;\n                var _host = $window.config_sensor.broker.host !== null ? $window.config_sensor.broker.host : window.location.hostname;//$scope.device[\"lan\"][\"eth0\"];\n                if(no_local_config_hosts && (no_local_config_hosts.indexOf(window.location.hostname)!=-1)){\n                    _host = window.location.hostname;\n                }\n                var _useSSL = false;\n                var _port   = $window.config_sensor.broker.wsPort;\n                if(window.location.protocol==='https:'){\n                    _port = $window.config_sensor.broker.wssPort;\n                    _useSSL = true;\n                }\n\n                var _id  =  \"client_\" + parseInt(Math.random() * 100, 10);\n                var _reconnectInterval = $window.config_sensor.broker.reconnectInterval;\n                var _reconnectTimeout  = $window.config_sensor.broker.reconnectTimeout;\n                var _topic             = $window.config_sensor.broker.topic;\n                $scope.mqtt_client = new $window.Paho.MQTT.Client(_host, _port, _id);\n                $scope.mqtt_client.onConnectionLost = $scope.onConnectionLost;  \n                $scope.mqtt_client.onMessageArrived = $scope.onMessageArrived;\n\n                // connect the client\n                $scope.mqtt_client.connect({\n                    useSSL: _useSSL,\n                    timeout: 3,\n                    cleanSession: true,\n                    onSuccess: function () {\n                        console.log(\"hub dashboard MQTT connection succeeded to \"+_host+\":\"+_port+\" Subscribing to topic: \"+_topic);\n                        //$link.removeClass(\"disconnected\").addClass(\"connected\");                     \n                        $scope.mqtt_client.subscribe(_topic,{qos: 1});\n                    },\n                    onFailure: function (message) {\n\n                        function initMqtt() {$scope.mqttInit();  }\n\n                      if(reconnect) {\n                        console.log(\"MQTT connection failed. Retrying. Error Message -  \"+ message.errorMessage);\n\n                        while(loop < _reconnectInterval) {\n                              loop++;\n                                  setTimeout(initMqtt, _reconnectTimeout);\n                        } \n                        reconnect = false;\n                      }\n                      else {\n                        //$link.removeClass(\"connected\").addClass(\"disconnected\");\n                        console.log(\"MQTT connection failed. Please ensure the message broker is up. Error Message -  \"+ message.errorMessage);\n                      }\n                    }\n                });\n            };\n\n            $scope.mqttInit();\n        }\n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n\n    $stateProvider.state('hub.dashboard.nodered',{\n        url: '/nodered',\n        templateUrl: '/partials/hub.nodered.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope){\n        }\n    })\n    .state('hub.dashboard.helix',{\n        url: '/helix',\n        templateUrl: '/partials/hub.helix.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope){\n        }\n    })\n    .state('hub.dashboard.luci',{\n        url: '/luci',\n        templateUrl: '/partials/hub.luci.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope){\n        }\n    });\n});\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n\n    $stateProvider.state('hub.dashboard.packages',{\n        url: '/dashboard/packages',\n        templateUrl: '/partials/hub.dashboard.packages.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope,$uibModal){\n            var num_to_show = 100;\n            $scope.gettingPackages = true;\n            $scope.showLoadMore = false;\n            $scope.sortType = 'name';\n            $scope.totalDisplayed = num_to_show;\n\n            $scope.loadMore = function() {\n                $scope.totalDisplayed += num_to_show;\n                if ($scope.totalDisplayed >= $scope.installed.length) {\n                    $scope.showLoadMore = false;\n                }\n            };\n            if ($scope.device.package_config == \"enabled\"){\n                if ($scope.connected){\n                    $scope.setPackages('True','',\n                    function successCallback(data){\n                        $scope.gettingPackages = false;\n\n                        if ($scope.installed.length <= $scope.totalDisplayed) {\n                            $scope.showLoadMore = false;\n                        } else {\n                            $scope.showLoadMore = true;\n                        }\n                    }, function errorCallback(response) {\n                        $scope.gettingPackages = false;\n                    });\n                }\n                else{\n                    $scope.setPackages('False','',\n                    function successCallback(data){\n                        $scope.gettingPackages = false;\n\n                        if ($scope.installed.length <= $scope.totalDisplayed) {\n                            $scope.showLoadMore = false;\n                        } else {\n                            $scope.showLoadMore = true;\n                        }\n                    }, function errorCallback(response) {\n                        $scope.gettingPackages = false;\n                    });\n                }\n            }\n\n        }\n    })\n    .state('hub.dashboard.package',{\n        url: '/package',\n        templateUrl: '/partials/hub.package.ng.html?version=' + gui_version,\n        params: { packageUrl : null, packageName:null},\n        controller: function($window,$scope,$state,$rootScope,$stateParams){\n            console.log(\"launching package at url:\"+$stateParams.packageUrl);\n            $scope.packageUrl = $stateParams.packageUrl;\n            $scope.packageName =  $stateParams.packageName;\n            if(!$scope.packageUrl){\n                $state.go(\"hub.dashboard.packages\");\n            }\n        }\n    });\n});\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n\n    $stateProvider.state('hub.dashboard.referencesoftware',{\n        url: '/dashboard/referencesoftware',\n        templateUrl: '/partials/hub.dashboard.referencesoftware.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope,$uibModal){\n            var num_to_show = 500;\n            $scope.gettingPackages = true;\n            $scope.showLoadMore = false;\n            $scope.sortType = 'name';\n            $scope.totalDisplayed = num_to_show;\n\n            $scope.loadMore = function() {\n                $scope.totalDisplayed += num_to_show;\n                if ($scope.totalDisplayed >= $scope.installed.length) {\n                    $scope.showLoadMore = false;\n                }\n            };\n            if($scope.device.ref_sw_config == \"enabled\"){\n                if ($scope.connected){\n                    $scope.setPackages('True','',\n                    function successCallback(data){\n                        $scope.gettingPackages = false;\n\n                        if ($scope.installed.length <= $scope.totalDisplayed) {\n                            $scope.showLoadMore = false;\n                        } else {\n                            $scope.showLoadMore = true;\n                        }\n                    }, function errorCallback(response) {\n                        $scope.gettingPackages = false;\n                    });\n                }\n                else{\n                    $scope.setPackages('False','',\n                    function successCallback(data){\n                        $scope.gettingPackages = false;\n\n                        if ($scope.installed.length <= $scope.totalDisplayed) {\n                            $scope.showLoadMore = false;\n                        } else {\n                            $scope.showLoadMore = true;\n                        }\n                    }, function errorCallback(response) {\n                        $scope.gettingPackages = false;\n                    });\n                }\n            }\n\n\n        }\n    })\n    .state('hub.dashboard.ref',{\n        url: '/ref',\n        templateUrl: '/partials/hub.ref.ng.html?version=' + gui_version,\n        params: { packageUrl : null, packageName:null},\n        controller: function($window,$scope,$state,$rootScope,$stateParams){\n            console.log(\"launching package at url:\"+$stateParams.packageUrl);\n            $scope.packageUrl = $stateParams.packageUrl;\n            $scope.packageName =  $stateParams.packageName;\n            if(!$scope.packageUrl){\n                $state.go(\"hub.dashboard.referencesoftware\");\n            }\n        }\n    });\n});\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    $stateProvider.state('hub.dashboard.sensors',{\n        url: '/dashboard/sensors',\n        templateUrl: '/partials/hub.dashboard.sensors.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope,$uibModal,utilityFunctionsService){\n            $scope.sortType = 'parentSensorTitle';\n\n            $scope.doManageSensors = function(){\n                var _cookie     = getCookie(\"noreshow\");\n                console.log(\"hub control found noreshow cookie as \"+_cookie+\" #8910a\");\n                if(_cookie){\n                    $scope.launchQuickTools('nodered');\n                }else{\n                    $scope.openManageSensorsDialogModal();\n                }\n            };\n\n            $scope.openManageSensorsDialogModal = function(){\n\n                console.log(\"hub control opening MANAGE SENSORS dialog modal #073a\");\n                var modalInstance = $uibModal.open({\n                    templateUrl: 'partials/hub.manage.sensors.dialog.ng.html?version=' + gui_version,\n                    animation:    true,\n                    size: 'lg',\n                    backdrop: modal_light_dismiss_enabled,\n                    scope: $scope,\n                    controller: function($scope,$state,$http,$rootScope){\n                        $scope.noreshow = true;\n\n                        $scope.closeModal = function(){\n                            if($scope.noreshow){\n                                console.log(\"hub control setting noreshow cookie true #8910\");\n                                utilityFunctionsService.setCookie(\"noreshow\",true,license_duration_days);\n                            }\n                            console.log(\"hub control closing manage sensors dialog modal 0 #073c\");\n                            modalInstance.dismiss('cancel');\n                            $scope.launchQuickTools('nodered');\n                        };\n                        $scope.viewTutorial = function(){\n                            //console.log(\"continuing to sensors tutorial #073dx\");\n                            //modalInstance.dismiss('cancel');\n                            //$state.go(\"hub.dashboard.tutorial.sensor\");\n                            if($scope.noreshow){\n                                console.log(\"hub control setting noreshow cookie true #8910\");\n                                utilityFunctionsService.setCookie(\"noreshow\",true,license_duration_days);\n                            }\n                            var url = $state.href('tutorial.sensorsetup', {parameter: \"parameter\"});\n                            window.open(url,'_blank');\n                        };\n                        $scope.viewVideo = function(){\n                            if($scope.noreshow){\n                                console.log(\"hub control setting noreshow cookie true #8910\");\n                                utilityFunctionsService.setCookie(\"noreshow\",true,license_duration_days);\n                            }\n                            var url = \"https://software.intel.com/en-us/videos/iot-dev-hub-setup-sensor-in-node-red\";\n                            window.open(url,'_blank');\n                        };\n\n                    }\n\n                });\n\n            };\n\n            $scope.openSensorTutorialModal = function(){\n                var url = $state.href('tutorial.sensorsetup', {parameter: \"parameter\"});\n                window.open(url,'_blank');\n            };\n        }\n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    $stateProvider.state('hub.dashboard.softsoc',{\n        url: '/dashboard/softsoc',\n        templateUrl: '/partials/hub.dashboard.softsoc.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope,$timeout,$uibModal,utilityFunctionsService){\n            $scope.sortType = 'parentSensorTitle';\n\n            $scope.fpgaBuildAndReboot = function(){\n                console.log(\"hub entering FPGA reboot\");\n                var modalInstance = $uibModal.open({\n                templateUrl: 'partials/hub.confirm.fpga.reboot.ng.html?version=' + gui_version,\n                animation:    true,\n                size: 'lg',\n                backdrop: modal_light_dismiss_enabled,\n                scope: $scope,\n                controller: function($scope,$state,$http,$rootScope){\n\n                    $scope.cancelFPGA = function(){\n                        console.log(\"hub canceling FPGA build and reboot\");\n                        $scope.fpga_num_comp = 0;\n                        modalInstance.dismiss('cancel');\n                    };\n\n                    $scope.continueFPGA = function(){\n                        $scope.showFpgaBuild();\n\n\n                        modalInstance.dismiss('cancel');\n\n                    };\n                    }\n                });\n            };\n\n            $scope.setFPGAOption = function(option,enabled){\n                for(var i = 0; i < $scope.fpga_num_comp.length; i++){\n                    if (option == $scope.fpga_options[i]){\n                        if (enabled === true){\n                            $scope.fpga_num_comp[i] = 1;\n                        }\n                        else{\n                            $scope.fpga_num_comp[i] = 0;\n                        }\n                    }\n                }\n            };\n\n            $scope.fpgaValidateInput = function(){\n                //calculate what options were selected through the UI\n                for(var i = 0,gui_num_comp = 0; i < $scope.fpga_num_comp.length; i++){\n                    if($scope.fpga_num_comp[i]){\n                        gui_num_comp += Math.pow(2,i);\n                    }\n                }\n\n                //compare UI selection with valid bitstream options\n                for(i = 0; i < $scope.fpga_valid_num.length; i++){\n                    if (gui_num_comp == $scope.fpga_valid_num[i]){\n                        //save position in array that contains information on what package to install\n                        $scope.fpga_package_install_position = i;\n                        return true;\n                    }\n                }\n                return false;\n            };\n\n            $scope.showFpgaBuild = function(){\n                 var modalInstance = $uibModal.open({\n                 templateUrl: 'partials/hub.inform.fpga.build.inprogress.ng.html?version=' + gui_version,\n                 animation:    true,\n                 size: 'lg',\n                 backdrop: modal_light_dismiss_enabled,\n                 scope: $scope,\n                     controller: function($scope,$state,$http,$rootScope,$timeout){\n                         $scope.bar_before_message = \"Building FPGA image\";\n                         $scope.bar_after_message = \"Building the FPGA image. Please wait...\";\n                         $scope.error_message = null;\n                         $scope.show_close_button = false;\n\n                         console.log('In build modal!');\n\n                         $scope.installPackage($scope.fpga_options_data[$scope.fpga_package_install_position],\n                            function successCallback(response) {\n                                $scope.fpga_num_comp = 0;\n                                $scope.showFpgaReboot();\n                                $scope.rebootGateway(\n                                    function successCallback(response) {\n                                    console.log(\"rebooted gateway: \" + response.data.status);\n                                    $timeout(function(){\n                                        modalInstance.dismiss('cancel');\n                                    }, restart_welcome_latency_milliseconds - 1000);\n                                    }, function errorCallback(response) {\n                                    console.log(\"gateway reboot failed\");\n                                    $scope.bar_after_message = \"Rebooting gateway failed! Please manually restart the gateway!\";\n                                    }, restart_welcome_latency_milliseconds);\n\n                            $scope.message       = \"The install was successful. Forwarding to login in 10 seconds...\";\n                            $timeout(function(){\n                                        modalInstance.dismiss('cancel');\n                                    }, restart_welcome_latency_milliseconds - 1000);\n\n                            },\n                            function errorCallback(response){\n                                console.log(\"error installing fpga package\");\n                                modalInstance.dismiss('cancel');\n                            },true);\n\n                         $scope.closeModal = function(){\n                             modalInstance.dismiss('cancel');\n                         };\n                     }\n                  });\n             };\n\n             $scope.showFpgaReboot = function(){\n                 var modalInstance = $uibModal.open({\n                 templateUrl: 'partials/hub.inform.fpga.reboot.inprogress.ng.html?version=' + gui_version,\n                 animation:    true,\n                 size: 'lg',\n                 backdrop: modal_light_dismiss_enabled,\n                 scope: $scope,\n                     controller: function($scope,$state,$http,$rootScope,$timeout){\n                         $scope.bar_before_message = \"System Reboot\";\n                         $scope.bar_after_message = \"Rebooting system. Please wait...\";\n                         $scope.error_message = null;\n                         $scope.show_close_button = false;\n\n                         console.log('In reboot modal!');\n                         $scope.closeModal = function(){\n                             modalInstance.dismiss('cancel');\n                         };\n                     }\n                  });\n             };\n\n            /*\n            This function is called in an ng-repeat block to determine which package is installed\n            and return what IP blocks will get installed from the package to display the checkmarks in the UI.\n            */\n            $scope.isFPGAImageInstalled = function(option){\n                for(i = 0; i < $scope.fpga_options_data.length; i++){\n                    if ($scope.fpga_options_data[i].installed === true){\n                        if($scope.fpga_options_data[i][option] > 0){\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            };\n        }\n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    $stateProvider.state('hub.dashboard.tools',{\n        url: '/dashboard/tools',\n        templateUrl: '/partials/hub.dashboard.admin.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$rootScope,$uibModal){\n            console.log(\"admin tools mec status \"+$scope.mec+\" #0812a\");\n\n            $scope.confirmRestartOS = function(){\n                var modalInstance = $uibModal.open({\n                    templateUrl: 'partials/hub.confirm.restart.os.ng.html?version=' + gui_version,\n                    animation:    true,\n                    size: 'lg',\n                    backdrop: modal_light_dismiss_enabled,\n                    scope: $scope,\n                    controller: function($scope,$state,$http,$rootScope,$timeout){\n                        $scope.restarting_os     = false;\n                        $scope.restarted_os      = false;\n                        $scope.message           = '';\n                        $scope.error_message     = '';\n\n                        $scope.restartOS = function(){\n                            if($scope.restarting_os){\n                                return;\n                            }\n                            $scope.error_message = '';\n                            $scope.restarting_os = true;\n                            $scope.restarted_os  = false;\n                            $scope.rebootGateway(\n                                function successCallback(response) {\n                                    //no defined return json for this. if 200 OK then assume success of call (according to Nick)\n                                    console.log(\"reboot gateway process was successful  #1871b\");\n                                    $scope.restarting_os = false;\n                                    $scope.restarted_os  = true;\n                                    $scope.message       = \"The reboot process was successful. Forwarding to login in 10 seconds...\";\n                                },function errorCallback(response) {\n                                    $scope.error_message = 'Rebooting gateway failed! Please manually reboot the gateway!';\n                                    console.log(\"reboot gateway  process failed  #1871E\");\n                                }, restart_welcome_latency_milliseconds);\n                        };\n\n                        $scope.closeModal = function(){\n                            console.log(\"close confirm restart modal\");\n                            modalInstance.dismiss('cancel');\n                        };\n                    }\n                });\n\n            };\n\n            $scope.configureNetwork = function(){\n                $scope.getProxySettings(function(){\n                    $scope.cancelText=\"Cancel\";\n                    $scope.isInsideModal = true;\n\n                    $scope.skipSettings = function(){\n                        networkSettingsModal.dismiss();\n                    };\n\n                    $scope.doneSuccessCallback = function(){\n                        networkSettingsModal.dismiss();\n                    };\n\n                    console.log(\"show network settings from dashboard\");\n                    var networkSettingsModal = $uibModal.open({\n                        templateUrl: '/partials/hub.networksettings.dashboard.ng.html?version=' + gui_version,\n                        animation: true,\n                        size: 'lg',\n                        scope: $scope,\n                        backdrop: modal_light_dismiss_enabled\n                    });\n\n                    $scope.closeModal = function(){\n                        console.log(\"hub canceling os upgrade #9033b\");\n                        networkSettingsModal.dismiss('cancel');\n                    };\n                });\n            };\n\n            $scope.onClickUpgrade = function(){\n                var suppress = $scope.suppressReminder = getCookie('upgradeMessage')!==\"\";\n\n                if($scope.mec.enabled){\n                    console.log(\"no upsell, suppress and mec enabled\");\n                    // no upsell, suppress and mec\n                    $scope.openOSUpgradeModal1b();\n                    return;\n                }\n\n                console.log(\"no upsell, suppress and no mec\");\n                // no upsell, suppress, and no mec\n                $scope.openOSUpgradeModal2();\n            };\n\n            $scope.onClickSaveOSImage = function(){\n               \n                var suppress = $scope.suppressReminder = getCookie('upgradeMessage')!==\"\";\n              \n                if(!$scope.pro && !suppress){\n                    console.log(\"upsell, no suppress\");\n                    // upsell, no suppress\n                    $scope.confirmOSUpgrade($scope.openOSImageModal0);\n                    return;\n                }\n               \n                //console.log(\"no upsell, suppress and no mec\");\n                // no upsell, suppress, and no mec\n                $scope.openOSImageModal0();\n            };\n\n            $scope.openChangePassModal0 = function(){\n\n                console.log(\"hub control opening change password modal #448a\");\n                var modalInstance = $uibModal.open({\n                    templateUrl: 'partials/hub.change.password.ng.html?version=' + gui_version,\n                    animation:    true,\n                    size: 'lg',\n                    backdrop: modal_light_dismiss_enabled,\n                    scope: $scope,\n                    controller: function($scope,$state,$http){\n                        console.log(\"hub control opening OS image modal 0 #448b\");\n                        $scope.error_message = null;\n\n                        $scope.update = {\n                            username: null,\n                            password: null,\n                            newpassword: null,\n                            confirmnewpassword: null\n                        };\n                        $scope.closeModal = function(){\n                            console.log(\"hub control closing os image modal 0 #448c\");\n                            modalInstance.dismiss('cancel');\n                        };\n\n                        $scope.changePassword = function(){\n                            $scope.error_message = null; //reset so error message goes away\n                            console.log(\"hub changing password #2029a\");\n                            var _username           = $scope.update.username;\n                            var _password           = $scope.update.password;\n                            var _newpassword        = $scope.update.newpassword;\n                            var _confirmnewpassword = $scope.update.confirmnewpassword;\n                            if(!_newpassword || _newpassword.length<3){\n\n                                $scope.error_message = \"The new password must be at least 3 characters long.\";\n                            }else if(_newpassword!==_confirmnewpassword){\n                                $scope.error_message = \"The new passwords do not match.\";\n                            }else{\n\n                                $http({\n                                    method: 'PUT',\n                                    url:    '/api/auth',\n                                    data:  JSON.stringify({\"username\":_username,\"password\":_password,\"newpassword\":_newpassword}),\n                                    headers : {\n                                        'Content-type' : 'application/json'\n                                    }\n                                }).then(function successCallback(response) {\n\n                                    if(response.data.status==='success'){\n                                        console.log(\"hub change password succeded #2029b\");\n                                        $scope.openConfirmChangePasswordModal(_username);\n                                        modalInstance.dismiss('cancel');\n                                    }else{\n                                        console.log(\"hub change password failed #2029F\");\n                                        $scope.error_message = \"ERROR: \"+response.data.error;\n                                        //what to do if fails?\n                                    }\n                                }, function errorCallback(response) {\n\n                                    console.log(\"hub change password failed #2029F\");\n                                    $scope.error_message = \"ERROR: \"+response;\n\n                                });\n\n                            }\n\n                        };\n\n                    }\n\n                });\n            };\n\n            $scope.openConfirmChangePasswordModal = function(username){\n\n                console.log(\"hub control opening confirm change password modal #449a\");\n                var modalInstance = $uibModal.open({\n                    templateUrl: 'partials/hub.change.password.confirm.ng.html?version=' + gui_version,\n                    animation:    true,\n                    size: 'lg',\n                    backdrop: modal_light_dismiss_enabled,\n                    scope: $scope,\n                    controller: function($scope){\n                        console.log(\"hub control opening confirm change password modal #449b\", username);\n                        $scope.username = username;\n                        $scope.closeModal = function(){\n                            console.log(\"hub control closing os image modal 0 #448c\");\n                            modalInstance.dismiss('cancel');\n                        };\n\n\n\n                    }\n\n                });\n            };\n\n            $scope.showFactoryReset = function(){\n                var modalInstance = $uibModal.open({\n                    templateUrl: 'partials/hub.inform.os.update.inprogress.ng.html?version=' + gui_version,\n                    animation:    true,\n                    size: 'lg',\n                    backdrop: modal_light_dismiss_enabled,\n                    scope: $scope,\n                    controller: function($scope,$state,$http,$rootScope,$timeout){\n                        $scope.title_message = \"Restore Factory OS: Restoring Default Operating System\";\n                        $scope.description_message = \"The gateway's original operating system and file system is being restored. This should take several minutes.\";\n                        $scope.bar_before_message = \"Restoring Default OS...\";\n                        $scope.bar_after_message = \"The gateway will automatically restart once restore is complete.\";\n                        $scope.error_message = null;\n                        $scope.show_close_button = false;\n\n                        $scope.closeModal = function(){\n                            modalInstance.dismiss('cancel');\n                        };\n\n                        $scope.doFactoryReset = function(){\n                            console.log(\"hub control peforming factory reset #6019a\");\n                            //$scope.doing_factory_reset = true;\n                            $scope.error_message = null;\n                            $scope.show_close_button  = false;\n\n                            // briefly cancel the network checking so that no connection error won't pop-up.\n                            // When we go to state.hub again, it will be rescheduled.\n                            $scope.stopCheckingNetwork();\n\n                            $http({\n                                method: 'POST',\n                                url:    '/api/osc'\n                            }).then(function successCallback(response) {\n                                console.log(\"hub control factory reset returned status: \"+response.data.status+\". Forwarding to login. #6019b\");\n                                $timeout(function(){\n                                    // force to show login\n                                    do_validate_session = false;\n                                    $state.go(\"welcome.login\");\n                                }, factory_reset_welcome_latency_milliseconds);\n                            },function errorCallback(response) {\n                                console.log(\"hub control factory reset process encountered server error #6019z. Forwarding in 30 seconds to login.\");\n                                $scope.startCheckingNetwork();\n                                $scope.bar_after_message = null;\n                                $scope.error_message = 'Restoring failed!';\n                                $scope.show_close_button = true;\n                                setupNoConnection(true);\n                            });\n                        };\n\n                        setupNoConnection(false);\n                        $scope.doFactoryReset();\n                    }\n                });\n            };\n\n            $scope.confirmFactoryReset = function(){\n                console.log(\"confirming factory reset\");\n                var modalInstance = $uibModal.open({\n                    templateUrl: 'partials/hub.confirm.factory.reset.ng.html?version=' + gui_version,\n                    animation:    true,\n                    size: 'lg',\n                    backdrop: modal_light_dismiss_enabled,\n                    scope: $scope,\n                    controller: function($scope){\n\n                        $scope.cancelFactoryReset = function(){\n                            console.log(\"canceling factory reset\");\n                            modalInstance.dismiss('cancel');\n                        };\n\n                        $scope.doFactoryReset = function(){\n                            $scope.showFactoryReset();\n                            modalInstance.dismiss('cancel');\n                        };\n                    }\n                });\n            };\n        }\n    });\n});\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n\n    $stateProvider.state('hub',{ //parent state of all of the logged-in parts of the app. it loads the package library when user logs in\n        url: '',\n        abstract: true,\n        templateUrl: '/partials/hub.ng.html?version=' + gui_version,\n        resolve: {\n              authenticate: authenticate\n        },\n        controller: function ($window, $scope, $state, $location, $rootScope, $http, $uibModal, $q, $sce, $timeout, workerProcessRestService, utilityFunctionsService) {\n            console.log(\"hub controller: starting #001\");\n\n            setupNoConnection(false);\n\n            $scope.security_enabled   = window.location.protocol === 'https:';\n\n            if (oem_branding_logo_file) {\n                // encode the file name (only the file name, not the path)\n                var oem_branding_logo_full_file = oem_branding_logo_file;\n                var temp_index = oem_branding_logo_full_file.lastIndexOf(\"/\");\n                var temp_logo_name = oem_branding_logo_full_file.substring(temp_index + 1);\n                var temp_logo_path = oem_branding_logo_full_file.substring(0, temp_index + 1);\n                console.log(temp_logo_name);\n                temp_logo_name = encodeURIComponent(temp_logo_name);\n                console.log(temp_logo_name);\n                oem_branding_logo_full_file = temp_logo_path + temp_logo_name;\n                console.log(\"###########current logo##############\");\n                console.log(oem_branding_logo_full_file);\n\n                $scope.oem_logo_file = oem_branding_logo_full_file;\n                $scope.hideOEMBranding = false;\n            } else {\n                $scope.hideOEMBranding = true;\n            }\n\n            $scope.dashboard        = false;\n            $scope.usb_devices      = [];\n            $scope.available        = [];\n            $scope.installed        = [];\n            $scope.package_updates  = [];\n            $scope.updates          = 0;\n            $scope.sensors          = [];\n            $scope.sensor_map       = {};\n            $scope.upgrades         = 0;\n            $scope.mec              = false;\n            $scope.isQuark          = true;\n            $scope.fpga_valid_num = [];\n            $scope.fpga_num_comp = [];\n            $scope.fpga_package_install_position = null;\n            $scope.option_descriptions = [];\n\n            $scope.humidity     = \"\";\n            $scope.temperature  = \"\";\n\n            $scope.connected  = false;\n            $scope.pro = false;\n\n            $scope.https_port   = https_port;\n\n            $scope.updating_package     = {};\n            $scope.updated_package      = {};\n            $scope.update_package_failed = {};\n            $scope.update_package_fail_message = {};\n            $scope.installing_package   = {};\n            $scope.uninstalling_package = {};\n            $scope.package_activity     = false;\n            $scope.starting_package     = {};\n            $scope.stopping_package     = {};\n            $scope.enabling_package     = {};\n            $scope.installed_package    = {};\n\n            $scope.deleting_repository  = {};\n\n            $scope.noderedurl  = $sce.trustAsResourceUrl(window.location.protocol + \"//\" + window.location.hostname + \":1880\");\n\n            $scope.luciurl     = $sce.trustAsResourceUrl(\"https://\" + window.location.hostname + \":443\");\n\n            $scope.httpurl     = $sce.trustAsResourceUrl(\"http://\" + window.location.hostname + \"\");\n            \n            $scope.httpsurl    = $sce.trustAsResourceUrl(\"https://\" + window.location.hostname + \":3092\");\n            \n            $scope.cloudcmdurl = $sce.trustAsResourceUrl(window.location.protocol + \"//\" +  window.location.hostname + \":8000\");\n\n            $scope.foundOSUpdate = false;\n            $scope.foundOSUpdate_Packages = false;\n            $scope.OSUpdate_Packages =[];\n\n            $scope.package_refresh    = 0; //if package list is reloaded from server, increment this by one to force update\n            $scope.gotPackagesList = true;\n            $scope.gotPackagesList_Error = false;\n\n\n            $scope.setDashboard = function(){\n                $scope.dashboard        = true;\n            };\n            $scope.isDashboard  = function(){\n                return $scope.dashboard;\n            };\n            $scope.hasUpdates = function(){\n                return $scope.updates>0;\n            };\n            $scope.hasOSUpdate = function(){\n                // always return true\n                return true;\n            };\n\n            $scope.updatePackageStatuses   = function(){\n                console.log(\"hub control updating package statuses #720a\");\n\n                if($scope.package_activity) return;\n                $scope.package_activity = true;\n\n                for(var _i=0,_len=$scope.packages.length;_i<_len;_i++){\n                    console.log(\"hub control updating package statuses #720a1: \");\n                    var _package = $scope.packages[_i];\n                    console.log(\"hub control updating package statuses #720a2: \"+_package.name);\n                    var _service = _package.service;\n                    if(_service && _service[0]){\n\n                        var _all_services_running = true;\n                        var _all_services_enabled = true;\n                        var _num_services         = _service.length;\n\n                        for(var _j=0;_j<_num_services;_j++){\n                            var _service_sub   = $scope.service_statuses[_service[_j]].SUB;\n                            var _service_state = $scope.service_statuses[_service[_j]].State;\n                            console.log(\"hub control updating package statuses #720a2 \"+_package.name+\" looking up status of service \"+_j+\" \"+_service[_j]+\" SUB=\"+_service_sub+\" State=\"+_service_state);\n                            if(_service_sub  !=='Running'){\n                                console.log(\"setting running to FALSE\");\n                                _all_services_running = false;\n                            }\n                            if(_service_state !=='enabled'){\n                                console.log(\"setting autorun to FALSE\");\n                                _all_services_enabled = false;\n                            }\n                        }\n                        console.log(\"hub control updating package statuses #720d \"+_package.name+\" setting statuses as \"+_all_services_running+\" \"+_all_services_enabled );\n                        //var _service_status = $scope.service_statuses[_service[0]]; //just one service for now. Must ask Nick what he wants to do for more than one\n                        $scope.package_statuses[_package.name] = {\n                            'running': _all_services_running ,\n                            'autorun': _all_services_enabled };\n                        _package.running = _all_services_running; // Directly on package for sorting reasons in the Installed Packages table\n                        _package.autorun = _all_services_enabled; // Directly on package for sorting reasons in the Installed Packages table\n\n                        console.log(\"hub control updating package statuses #720b \"+_package.name +\n                                  \" running: \"+$scope.package_statuses[_package.name].Running +\n                                  \" autorun: \"+$scope.package_statuses[_package.name].autorun);\n                        //$scope.$apply();\n\n                    }\n                }\n\n                $scope.package_activity = false;\n            };\n\n            $scope.setArrays = function(_set_services){\n                //$scope.featured   = $scope.packages.filter(function(_package){\n                  //return !_package.installed && _package.curated;\n                //});\n                console.log(\"hub controller: setting available packages #009a\");\n                // only update list when it is not empty\n                if ($scope.packages) {\n                    $scope.available  = $scope.packages.filter(function(_package){\n                        return !_package.installed;\n                    });\n                    console.log(\"hub control setting installed packages #009b\");\n                    $scope.installed  = $scope.packages.filter(function(_package){\n                        return _package.installed;\n                    });\n                    console.log(\"hub control setting package_updates #009c\");\n                    $scope.package_updates = $scope.installed.filter(function(_package){\n                        return _package.upgrade_version && _package.upgrade_version !==\"\";\n                    });\n                    console.log(\"hub control setting (os) updates #009d\");\n                    //$scope.updates = ($scope.hasOSUpdate() ? 1 : 0) + $scope.package_updates.length;\n                    $scope.updates = $scope.package_updates.length;\n\n                    $scope.curated =  $scope.available.filter(function(_package){\n                        return _package.curated;\n                    });\n\n                    if(_set_services){\n                       $scope.setServices();\n                    }\n                }\n            };\n\n            $scope.launchQuickTools = function(_toolname) {\n                var win = null;\n                if (_toolname==='nodered') {\n                    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n                        //Firefox has to open this in a new tab\n                        win = window.open($scope.noderedurl, '_blank');\n                        win.focus();\n                    } else {\n                        $state.go(\"hub.dashboard.nodered\");\n                        $rootScope.isSensorPanelExpanded = false;\n                    }\n                    //var _url = \"<gateway ip>:1880\";\n                    //console.log(\"Launching Node Red in iframe with url \"+_url);\n                } else if (_toolname==='helix') {\n                    //var _url = \"TBD\";\n                    //console.log(\"Launching Helix in iframe with url \"+_url);\n\n                    $state.go(\"hub.dashboard.helix\");\n                    $rootScope.isSensorPanelExpanded = false;\n                } else if (_toolname==='luci') {\n                    //var _url = \"https://<gateway ip>\";\n                    //console.log(\"Launching LuCl in iframe with url \"+_url);\n\n                    win = window.open($scope.luciurl, '_blank');\n                    win.focus();\n                } else if(_toolname==='cloudcmd'){\n                    if (window.location.protocol==='https:') {\n                        win = window.open($scope.cloudcmdurl, '_blank');\n                        win.focus();\n                    } else {\n                        if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n                            //Firefox has to open this in a new tab\n                            win = window.open($scope.cloudcmdurl, '_blank');\n                            win.focus();\n                        } else {\n                            $state.go(\"hub.dashboard.cloudcmd\");\n                            $rootScope.isSensorPanelExpanded = false;\n                        }\n                    }\n                }\n            };\n\n            $scope.setupPreventModalClosing = function(){\n\n                var blockUI = false;\n                var listener = function(){};\n            };\n\n            $scope.initHubTasks = function(update) {\n                // We are doing this at hub load time, so that e can get the available update count to display.\n                function initSetPackages(update) {\n                    console.log(\"hub controller: getting packages #005a\");\n                    $http({\n                        method : 'GET',\n                        url    : '/api/packages?update=' + update + '&nocache=' + new Date().getTime()\n                    }).then(\n                        function successCallback(response) {\n                            $scope.packages = response.data;\n                            console.log(\"hub controller: found packages by API call 005b\");\n                            // do not need and do not refresh service at this time.\n                            $scope.setArrays(false);\n                        },function errorCallback(response) {\n                            console.log(\"error getting packages 005E\");\n                        });\n                }\n\n                function initScanUSBDevices(){\n                    $scope.scanning_usb = true;\n                    console.log(\"hub controller: scanning usb devices\");\n                    $http({\n                        method: 'GET',\n                        url:    '/api/usb?nocache=' + new Date().getTime()\n                    }).then(function successCallback(response) {\n                        $scope.usb_devices = response.data;\n                        $scope.scanning_usb = false;\n                        console.log(\"hub controller: scanUSBdevices found \"+$scope.usb_devices.length+\" usb devices\");\n                    },function errorCallback(response) {\n                        console.log(\"error scanning usb devices\");\n                        $scope.scanning_usb = true;\n                    });\n                }\n\n                function initSetDevice(update){\n                    console.log(\"hub controller: getting device 006a\");\n                    $http({\n                        method : 'GET',\n                        url    : '/api/osc?nocache=' + new Date().getTime()\n                    }).then(\n                        function successCallback(response) {\n                            $scope.device = response.data;\n\n                            // Note: For string, it is indexOf not indexof\n                            if ($scope.device.model.indexOf(quark_name_string) <= -1) {\n                                $scope.isQuark = false;\n                            } else {\n                                $scope.isQuark = true;\n                            }\n\n                            //get device uptime, ideally use a timestamp on server start from server instead\n                            var uptime = $scope.device.uptime.split(' '); // format: 0d 1h 2m\n                            var days = uptime[0].substr(0,uptime[0].length-1);\n                            var hours = uptime[1].substr(0,uptime[1].length-1);\n                            var minutes = uptime[2].substr(0,uptime[2].length-1);\n                            var milliseconds = (days*60*60*24*1000)+(hours*60*60*1000)+(minutes*60*1000);\n                            var upSince = new Date( new Date() - milliseconds);\n                            $scope.deviceUpSince = upSince.getTime();\n                            console.log(\"hub controller: found device by API call 006b\");\n\n                            if ($scope.device.documentation_config == 'enabled'){\n                                $scope.initGetTutorials(update);\n                            }\n                            if ($scope.device.softsoc_config == 'enabled'){\n                                $scope.initGetFPGA(update);\n                            }\n\n                        },function errorCallback(response) {\n                            console.log(\"error scanning usb devices\");\n                        });\n                }\n\n                // run this first, so that the GUI can show the gateway info fast enough\n                if ($scope.connected){\n                    initSetDevice('True');\n                }\n                else{\n                    initSetDevice('False');\n                }\n            };\n\n            //Grab tutorial info here for now\n             $scope.initGetTutorials = function(update){\n                    $http({\n                        method: 'GET',\n                        url:    '/api/tutorials?update=' + update + '&nocache=' + new Date().getTime()\n                    }).then(function successCallback(response) {\n\n                        $scope.documentation = response.data;\n                    }, function errorCallback(response) {\n                        //this only happens for server error\n                        console.log(\"errorCallback with HTTP status \"+response.status);\n                    });\n                };\n\n                //Grab fpga info here for now\n                $scope.initGetFPGA = function(update){\n                    $http({\n                        method: 'GET',\n                        url:    '/api/softsoc?update=' + update + '&nocache=' + new Date().getTime()\n                    }).then(function successCallback(response) {\n                        //save available I/O options\n                        $scope.fpga_options = response.data[0];\n\n                        //save I/O option data\n                        $scope.fpga_options_data = response.data[1];\n\n                        //save I/O option descriptions\n                        $scope.option_descriptions = response.data[2];\n\n                        for(var i = 0,numComp = 0; i < $scope.fpga_options_data.length; i++){\n                            //initialize values to zero at start\n                            $scope.fpga_num_comp[i] = 0;\n                            /*\n                            Generate values for table lookup\n                            Note: the IP block in the nth position of the array represents adding the value 2^n\n                            */\n                            for(var j = 0; j < $scope.fpga_options.length; j++){\n                                if ($scope.fpga_options_data[i][$scope.fpga_options[j]] > 0){\n                                    numComp += Math.pow(2,j);\n                                }\n                            }\n                            //save bitstream value for comparison later\n                            $scope.fpga_valid_num[i] = numComp;\n\n                            //reset counter (table value) for each bitstream\n                            numComp = 0;\n                        }\n\n                    }, function errorCallback(response) {\n                        //this only happens for server error\n                        console.log(\"errorCallback with HTTP status \"+response.status);\n                    });\n                };\n\n            iotgatewayhub.expandHub_proxy($scope,$uibModal,$http,$rootScope,$state,workerProcessRestService,utilityFunctionsService);\n\n            iotgatewayhub.expandHub_services($scope,$http,$q,workerProcessRestService);\n\n            iotgatewayhub.expandHub_save_image($scope,$http,$uibModal,workerProcessRestService);\n\n            iotgatewayhub.expandHub_security($scope,$http,$uibModal,workerProcessRestService);\n\n            iotgatewayhub.expandHub_repositories($scope,$http,$state,$uibModal,workerProcessRestService);\n\n            iotgatewayhub.expandHub_packages($scope,$state,$http,$rootScope,$uibModal,$timeout,workerProcessRestService);\n\n            iotgatewayhub.expandHub_pro_upgrade($scope,$http,$state,$uibModal,$timeout,workerProcessRestService,utilityFunctionsService);\n\n            iotgatewayhub.expandHub_openOSUpdate($scope,$uibModal,$http,workerProcessRestService);\n\n            iotgatewayhub.expandHub_gatewayOperations($scope,$http,$state,$timeout,$window);\n\n            $scope.$watchCollection('package_refresh',function(){ $scope.setArrays(true); });\n\n            $scope.$on('hub.lockModal', function(scope){\n                blockUI = true;\n\n                $('.close-admin-modal').hide();\n\n                listener = scope.targetScope.$on('modal.closing', function(event, reason, closed) {\n                    //console.log(prefix + 'modal.closing: ' + (closed ? 'close' : 'dismiss') + '(' + reason + ')');\n                    if (!blockUI) return;\n\n                    //console.log('\\t' + prefix + 'veto (interactive)');\n                    event.preventDefault();\n                });\n\n            });\n\n            $scope.$on('hub.unlockModal', function turnOffListener(){\n\n                $('.close-admin-modal').show();\n                listener();// weird angular-ism\n            });\n\n            $rootScope.$on('$locationChangeStart', function(event) {\n                if(!$rootScope.accepted_license){\n                    $state.go('hub.license',{});\n                }\n            });\n\n            $scope.setupPreventModalClosing();\n\n            // Note: we cannot start a lot of http request at this point.\n            // On slow systems, if there are too many pending requests, new request will be aborted!\n            // So for new request, add it into initHubTasks functions after other requests are done.\n            if ($scope.connected){\n                $scope.initHubTasks('True');\n            }\n            else{\n                $scope.initHubTasks('False');\n            }\n\n            // Other tasks are done when we enter network check state.\n\n            console.log(\"hub controller: EXITING #999z\");\n        }\n    });\n});\n\n\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    $stateProvider.state('hub.license',{ \n        url:         '/hub/license',\n        templateUrl: '/partials/hub.license.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope,utilityFunctionsService){\n\n            // If we are here, then oem_branding_cookies_names's length is > 0\n            var eula_index  = -1;\n            $scope.eulaLoaded = false;\n\n            function findUnacceptedCookieIndex() {\n                var temp_index = -1;\n                for (i = 0; i < oem_branding_cookies_names.length; i++) {\n                    if (!getCookie(oem_branding_cookies_names[i])) {\n                        temp_index = i;\n                        all_accepted = false;\n                        break;\n                    }\n                }\n                return temp_index;\n            }\n\n            function checkEulaCookies(doApply) {\n                eula_index = findUnacceptedCookieIndex();\n                if (eula_index === -1) {\n                    // all accepted\n                    $rootScope.accepted_license = true;\n                    $state.go(\"hub.networkcheck\");\n                } else {\n                    // still has not accepted one\n                    $scope.eulaLoaded = false;\n                    setTimeout(function() {\n                        // encode the file name (only the file name, not the path)\n                        var temp_eula_full_name = oem_branding_eulas[eula_index];\n                        var temp_index = temp_eula_full_name.lastIndexOf(\"/\");\n                        var temp_eula_name = temp_eula_full_name.substring(temp_index + 1);\n                        var temp_eula_path = temp_eula_full_name.substring(0, temp_index + 1);\n                        temp_eula_name = encodeURIComponent(temp_eula_name);\n                        temp_eula_full_name = temp_eula_path + temp_eula_name;\n                        $scope.current_eula_html_file = temp_eula_full_name;\n                        $scope.current_eula_cookie_name = oem_branding_cookies_names[eula_index];\n                        console.log(\"###########current eula##############\");\n                        console.log(oem_branding_eulas);\n                        console.log($scope.current_eula_html_file);\n                        console.log($scope.current_eula_cookie_name);\n                        if (doApply) {\n                            $scope.$apply();\n                        }\n                    }, 1500);\n                }\n            }\n\n            $scope.cancel = function(){\n                authorization = {};\n                $rootScope.loggedin =  false;\n                $state.go('welcome.login',{});\n            };\n\n            $scope.agree = function(){\n                // set this eula as accepted\n                utilityFunctionsService.setCookie($scope.current_eula_cookie_name,\"true\",license_duration_days);\n\n                // continue checking\n                checkEulaCookies(true);\n            };\n\n            if(!authorization.username){\n                console.log(\"auth failed in hub license 001b\");\n                $state.go('welcome.login',{});\n            }\n\n            // initial checking\n            checkEulaCookies(true);\n        }\n    });\n});"," iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    $stateProvider.state('hub.networkcheck',{ \n        url:         '/hub/networkcheck',\n        //template:\"<div>&nbsp;</div>\",\n        templateUrl:    'partials/hub.loading.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope){\n            if(!authorization.username){\n                $state.go('welcome.login',{});\n            }\n\n            setupNoConnection(true);\n            $scope.loadMessage = \"Checking network connection, and if needed, adding repositories and building packages list. This may take a few minutes.\";\n            $scope.showMessage = true;\n\n            // run this later so that GUI has a chance to refresh\n            setTimeout(function() {\n                    $scope.proceedToNetworkCheck();\n                }, 1000);\n        }\n    });\n });\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    $stateProvider.state('hub.networkconnected',{ \n        url:         '/hub/networkconnected', \n        templateUrl: '/partials/hub.networkconnected.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope){\n            if(!authorization.username){\n                $state.go('welcome.login',{});\n            }\n\n            $scope.dashboard = function(){\n                if ($scope.connected){\n                    if ($scope.device.documentation_config == 'enabled'){\n                        $scope.initGetTutorials('True');\n                    }\n                    if ($scope.device.softsoc_config == 'enabled'){\n                        $scope.initGetFPGA('True');\n                    }\n\n                    $scope.initHubTasks('True');\n                }\n                else{\n                    if ($scope.device.documentation_config == 'enabled'){\n                        $scope.initGetTutorials('False');\n                    }\n                    if ($scope.device.softsoc_config == 'enabled'){\n                        $scope.initGetFPGA('False');\n                    }\n\n                    $scope.initHubTasks('False');\n                }\n                $state.go('hub.dashboard.' + $scope.device.default_tab,{});\n            };\n        }\n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    /* NOTE: this state uses the networksettings DIRECTIVE */\n\n    $stateProvider.state('hub.networksettings',{\n        url:         '/hub/networksettings',\n        templateUrl: '/partials/hub.networksettings.main.ng.html?version=' + gui_version,\n        scope:false,\n        controller: function($scope,$state,$http,$rootScope){\n            $scope.cancelText=\"Skip\";\n            $scope.hideTestSettings=true;\n            $scope.maintainContextAfterSave = false;\n\n            $scope.skipSettings = function(){\n                $state.go('hub.dashboard.' + $scope.device.default_tab,{});\n            };\n\n            $scope.doneSuccessCallback = function(){\n                $state.go('hub.networkconnected',{});\n            };\n        }\n    });\n});\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    $stateProvider.state('hub.nonetwork',{ \n        url:         '/hub/nonetwork', \n        templateUrl: '/partials/hub.nonetwork.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope){\n            if(!authorization.username){\n                $state.go('welcome.login',{});\n            }\n\n            $scope.configureNetwork = function(){\n                $scope.getProxySettings(function() {\n                    $state.go('hub.networksettings',{});\n                });\n            };\n\n            $scope.skipConfigureNetwork = function(){\n                $rootScope.loggedin = true;\n                $state.go('hub.dashboard.' + $scope.device.default_tab,{});\n            };\n\n        }\n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    $stateProvider.state(\"hub.test\",{\n        url:         '/hub/test', \n        templateUrl: '/partials/hub.test.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope){\n            if(!bypass_auth && !authorization.username){\n               $state.go('welcome.login',{}); \n            }\n        }\n    });\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n\n    $stateProvider.state('tutorial',{ // only state that is not a descendant of hub. this presents the login page and background image\n        url: '',\n        abstract:    true,\n        templateUrl: '/partials/hub.tutorial.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope,$uibModal){\n            setupNoConnection(true);\n        }\n    })\n    .state('tutorial.sensorsetup',{\n        url: '/tutorial/sensorsetup',\n        templateUrl: '/partials/tutorial.sensorsetup.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope){\n            authorization = {};\n        }\n    })\n    .state('tutorial.sensorcloud',{\n        url: '/tutorial/sensorcloud',\n        templateUrl: '/partials/tutorial.sensorcloud.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope){\n            authorization = {};\n        }\n    })\n    .state('tutorial.helixapp',{\n        url: '/tutorial/helixapp',\n        templateUrl: '/partials/tutorial.helixapp.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope){\n            authorization = {};\n        }\n    })\n    .state('tutorial.savedeploy',{\n        url: '/tutorial/savedeploy',\n        templateUrl: '/partials/tutorial.savedeploy.ng.html?version=' + gui_version,\n        controller: function($window,$scope,$state,$rootScope){\n            authorization = {};\n        }\n    })\n    .state('tutorial.savedeploy_quark', {\n        url: '/tutorial/savedeploy_quark',\n        templateUrl: '/partials/tutorial.savedeploy_quark.ng.html?version=' + gui_version,\n        controller: function ($window, $scope, $state, $rootScope) {\n            authorization = {};\n        }\n    });\n});\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    $stateProvider.state('welcome',{ //only state that is not a descendant of hub. this presents the login page and background image\n        url: '', \n        abstract:    true,\n        templateUrl: '/partials/welcome.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope,$uibModal){\n            setupNoConnection(false);\n\n            $rootScope.loggedin = false;\n            $scope.authentication = {};\n            $scope.connected = false;\n\n            $scope.broadcastFailure = function(bMessage) {\n                $scope.$broadcast(bMessage);\n            };\n\n            $scope.handleAuthenticated = function() {\n                authorization = {\"username\": $scope.authentication.username};\n                $rootScope.loggedin    = true;\n\n                //so we have to save these in scope to check against upgrade to pro.\n                //don't quite like this idea security-wise but it is only way to pre-check auth before sending call,\n                //if that is what they want.\n                $rootScope.credentials = {\"username\": $scope.authentication.username, \"password\": $scope.authentication.password};\n\n                if (!$rootScope.accepted_license) {\n                    $state.go('hub.license',{});\n                } else {\n                    $state.go('hub.networkcheck',{});\n                }\n            };\n\n            $scope.checkAuth = function(){\n                var _datatype = \"json\";\n                var _method   = \"POST\";\n                var _uri      = '/api/validate_session';\n\n                $http({\n                    method: _method,\n                    url: _uri,\n                    data: JSON.stringify(),\n                    headers: {\n                        'Content-type' : 'application/json'\n                    }\n                }).then(function successCallback(response){\n                    if(response.data.status===\"success\"){\n                        authorization = {\"username\": \"preauthed\"};\n                        $rootScope.loggedin = true;\n\n                        if (!$rootScope.accepted_license) {\n                            $state.go('hub.license',{});\n                        } else {\n                            $state.go('hub.networkcheck',{});\n                        }\n                    } else {\n                        // should not be reached\n                        $scope.showLogin = true;\n                    }\n                }, function errorCallback(response){\n                    $scope.showLogin = true;\n                });\n            };\n\n            $scope.continueWelcomeLogin = function() {\n                if (do_validate_session) {\n                    $scope.checkAuth();\n                } else {\n                    // force to show login\n                    $scope.showLogin = true;\n                }\n                do_validate_session = true;\n            };\n\n            $scope.setOEMBrandingCookiesNames = function() {\n                oem_branding_cookies_names.length = 0;\n                for (i = 0; i < oem_branding_eulas.length; i++) {\n                    var temp_datetime = '';\n                    if (i < oem_branding_eulas_datetime.length) {\n                        temp_datetime = oem_branding_eulas_datetime[i];\n                    }\n                    var temp_cookiename = oem_branding_eulas[i].concat(temp_datetime);\n                    // \\s is regex for whitespace. g is global flag.\n                    // temp_cookiename = temp_cookiename.replace(/\\s+/g, '');\n                    // keep only a-Z and 0 - 9\n                    temp_cookiename = temp_cookiename.toLowerCase().replace(/[^a-zA-Z0-9]+/g, '');\n                    oem_branding_cookies_names.push(temp_cookiename);\n                }\n                console.log(\"#############oem cookies names#################\");\n                console.log(oem_branding_cookies_names);\n            };\n\n            $scope.checkOEMBrandingCookies = function() {\n                var temp_accepted = true;\n                for (i = 0; i < oem_branding_cookies_names.length; i++) {\n                    if (!getCookie(oem_branding_cookies_names[i])) {\n                        temp_accepted = false;\n                        break;\n                    }\n                }\n                $rootScope.accepted_license = temp_accepted;\n                console.log(\"accepted all licenses? \"+$rootScope.accepted_license);\n            };\n\n            $scope.getOEMBranding = function(){\n                $http({\n                    method: 'GET',\n                    url:    '/api/oembranding?nocache=' + new Date().getTime()\n                }).then(function successCallback(response) {\n                    console.log(\"got oem branding\");\n\n                    try {\n                        if (response.data.status === 'success') {\n                            // set the oem branding config\n                            oem_branding_logo_file = response.data.result.logo_file;\n                            oem_branding_eulas = response.data.result.eula_files;\n                            oem_branding_eulas_datetime = response.data.result.eula_files_datetime;\n                            $scope.setOEMBrandingCookiesNames();\n                            $scope.checkOEMBrandingCookies();\n                        }\n                    } catch(err){\n                    }\n\n                    $scope.continueWelcomeLogin();\n                },function errorCallback(response) {\n                    console.log(\"error getting oem branding\");\n                    console.log(response);\n                    $scope.continueWelcomeLogin();\n                });\n            };\n\n            $scope.getOEMBranding();\n        }\n    });\n});\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    $stateProvider.state('welcome.login',{ \n        url:         '/welcome/login', \n        templateUrl: '/partials/welcome.login.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope,$timeout,$window){\n            authorization = {};\n            // hide error messages until 'submit' event\n            $scope.submitted = false;\n            // hide success message\n            $scope.showMessage = false;\n            // show go button\n            $scope.showGo = true;\n            // status message\n            $scope.barMessage = 'Authenticating...';\n            // server error message\n            $scope.serverErrorMessage = 'A server error occurred! Refresh page and try again!';\n            // method called from shakeThat directive\n            $scope.keyPressed = function($event) {\n                if($event.keyCode != 13) return;\n                if ($scope.login.username && $scope.login.password) $scope.login();\n            };\n\n            $scope.login = function() {\n                // hide go button and show status bar\n                $scope.showGo = false;\n\n                var internalAuthentication = function(firstTime) {\n                    $scope.authentication = { \"username\": $scope.login.username, \"password\": $scope.login.password };\n                    var _username = $scope.authentication.username;\n                    var _password = $scope.authentication.password;\n\n                    var do_auth = 'False';\n                    if (firstTime) {\n                        do_auth = 'True';\n                    }\n\n                    $http({\n                        method: 'POST',\n                        url: '/api/auth',\n                        data:  JSON.stringify({\"username\":_username,\"password\":_password, \"do_auth\": do_auth}),\n                        headers : {\n                            'Content-type' : 'application/json'\n                        }\n                    }).then(function successCallback(response) {\n                        //check result of login, set username in session if success\n                        //should not succeed for HTTP DIGEST on first call (since no Authorization header provided)\n                        //can be used for old style simple login\n                        if (response.data.status === 'success') {\n                            if (response.data.init_in_progress === false) {\n                                ////////////////////////////////\n                                // Authentication worked, and server initialization is done.\n                                ////////////////////////////////\n                                // done\n                                $scope.showGo = true;\n                                $scope.handleAuthenticated();\n                            } else {\n                                ////////////////////////////////\n                                // Authentication worked, and server initialization is not done.\n                                ////////////////////////////////\n                                // start checking after some delay (larger delay than the authentication part)\n                                setTimeout(function() {\n                                        internalAuthentication(false);\n                                    }, rest_check_interval_milliseconds_m);\n                                $scope.barMessage = 'Waiting for server setup...';\n                            }\n                        } else {\n                            ////////////////////////////////\n                            // Authentication call went through, but authentication failed.\n                            ////////////////////////////////\n                            $scope.broadcastFailure(\"welcome.loginFailed\");\n                        }\n                    }, function errorCallback(response) {\n                        ////////////////////////////////\n                        // Authentication call failed\n                        ////////////////////////////////\n                        if (response.status == 401) {\n                            $scope.broadcastFailure(\"welcome.loginFailed\");\n                        } else if (response.status === 408) {\n                            // request timeout\n                            // ignore and continue checking\n                            // start checking after some delay (larger delay than the init authentication part)\n                            setTimeout(function() {\n                                        internalAuthentication(false);\n                                    }, rest_check_interval_milliseconds_m);\n                            // do not change message.\n                        } else if (response.status === -1) {\n                            $scope.serverErrorMessage = 'Cannot connect to the gateway yet! Try again after page is refreshed.';\n                            $scope.broadcastFailure(\"welcome.loginServerError\");\n                            console.log(\"ERROR response status=\"+response.status);\n\n                            // refresh the web page to get the index.html from server\n                            setTimeout(function() {\n                                    $window.location.reload();\n                                }, 4000);\n                        } else {\n                            $scope.serverErrorMessage = 'A server error occurred! Try again after page is refreshed! ';\n                            $scope.broadcastFailure(\"welcome.loginServerError\");\n                            console.log(\"ERROR response status=\"+response.status);\n\n                            // refresh the web page to get the index.html from server\n                            setTimeout(function() {\n                                    $window.location.reload();\n                                }, 4000);\n                        }\n                    });\n                };\n\n                internalAuthentication(true);\n            };\n\n            $scope.submit = function() {\n                // show success message\n                $scope.showMessage = true;\n            };\n            \n            $scope.$on(\"welcome.loginFailed\", function(){\n                // show go\n                $scope.showGo = true;\n\n                $scope.showAuthenticationError = true;\n\n                var $animate = $('.container div div');\n                $animate.addClass( 'shake');\n                setTimeout(function() {\n                    $animate.removeClass('shake');\n                }, 100);\n\n                $scope.login.password=null;\n\n                $animate.addClass(\"invalid\");\n\n                $animate.find('input').on(\"click\", function(){\n                    $animate.removeClass(\"invalid\");\n                    $scope.showAuthenticationError = false;\n                });\n            });\n\n            $scope.$on(\"welcome.loginServerError\", function(){\n                // show go\n                $scope.showGo = true;\n\n                $scope.showServerError = true;\n\n                $timeout(function(){\n                    $scope.showServerError = false;\n                },8000);\n\n                $('.login-form').find('input').on(\"click\",\n                    function() {\n                        $scope.$apply(function () {\n                            $scope.showServerError = false;\n                        });\n                    }\n                );\n            });\n        }\n    });\n});\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\n    \n    $stateProvider.state('welcome.privacy',{\n        url:         '/welcome/privacy', \n        templateUrl: '/partials/welcome.privacy.ng.html?version=' + gui_version,\n        controller: function($scope,$state,$http,$rootScope,$uibModal,utilityFunctionsService){\n             console.log(\"welcome privacy statement #01003a\");\n             $scope.continueToLogin = function(){\n                  console.log(\"welcome agreed to privacy statement #01003b\");\n                  utilityFunctionsService.setCookie(\"privacy\",true,license_duration_days);\n                  $state.go('welcome.login');\n             };\n        }\n    });\n});","// These are general functions used in several states.\niotgatewayhub.expandHub_gatewayOperations = function($scope,$http,$state,$timeout,$window) {\n\n    $scope.rebootGateway = function(_success, _error, timeout_value){\n        // briefly cancel the network checking so that no connection error won't pop-up.\n        // When we go to state.hub again, it will be rescheduled.\n        $scope.stopCheckingNetwork();\n\n        // We give reboot gateway a timeout, so that we will get some response back.\n        $http({\n            method: 'PUT',\n            url:    '/api/osc',\n            timeout: reboot_request_timeout_milliseconds\n        }).then(function successCallback(response) {\n            $timeout(function () {\n                // do not validate session so that we can show login.\n                do_validate_session = false;\n                //$window.location.href = '/';\n                $state.go('welcome.login');\n            }, timeout_value);\n            if(_.isFunction(_success)){ _success(response); }\n        }, function errorCallback(response) {\n            $scope.startCheckingNetwork();\n            if(_.isFunction(_error)){ _error(response); }\n        });\n    };\n\n    $scope.scanUSBDevices = function(){\n        $scope.scanning_usb = true;\n        console.log(\"hub controller: scanning usb devices\");\n        $http({\n            method: 'GET',\n            url:    '/api/usb?nocache=' + new Date().getTime()\n        }).then(function successCallback(response) {\n            $scope.usb_devices = response.data;\n            $scope.scanning_usb = false;\n            console.log(\"hub controller: scanUSBdevices found \"+$scope.usb_devices.length+\" usb devices\");\n        },function errorCallback(response) {\n            console.log(\"error scanning usb devices\");\n            $scope.scanning_usb = true;\n        });\n    };\n\n    $scope.verifyFileExisted = function(file_path, passedSuccessCallback, passedErrorCallback){\n        $http({\n            method : 'GET',\n            url    : '/api/file?path=' + encodeURIComponent(file_path) +'&nocache=' + new Date().getTime()\n        }).then(\n            function successCallback(response) {\n                if(_.isFunction(passedSuccessCallback)){ passedSuccessCallback(response.data); }\n            },function errorCallback(response) {\n                if(_.isFunction(passedErrorCallback)){ passedErrorCallback(response); }\n            });\n    };\n\n    $scope.getAccounts = function(passedSuccessCallback, passedErrorCallback){\n        $http({\n            method : 'GET',\n            url    : '/api/accounts?nocache=' + new Date().getTime()\n        }).then(\n            function successCallback(response) {\n                if(_.isFunction(passedSuccessCallback)){ passedSuccessCallback(response.data); }\n            },function errorCallback(response) {\n                if(_.isFunction(passedErrorCallback)){ passedErrorCallback(response); }\n            });\n    };\n\n\n    $scope.logout = function(){\n        var _method   = \"GET\";\n        var _uri      = '/api/auth?nocache=' + new Date().getTime();\n\n        $http({\n            method: _method,\n            url:    _uri,\n            headers : {'Content-type' : 'application/json'}\n        }).then(function successCallback(response) {\n            $state.go('welcome.login');\n        }, function errorCallback(response) {\n            $state.go('welcome.login');\n        });\n    };\n\n};\n","// These are general functions used in several states.\niotgatewayhub.expandHub_openOSUpdate = function($scope,$uibModal,$http,workerProcessRestService) {\n\n    ///////////////////////////////////////\n    // GUI Modals\n    //////////////////////////////////////\n\n    $scope.enterOSCredential = function(){\n        console.log(\"hub entering OS credential\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.confirm.os.update.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.do_enter_credential = true;\n                $scope.do_confirm_update = false;\n\n                $scope.credentials = {username: null, password: null};\n                $scope.cancelOSUpdate = function(){\n                    console.log(\"hub canceling OS credential\");\n                    $scope.informOSUpdate_CancelWarning();\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueChecking = function(){\n                    $scope.checkOSUpdate($scope.credentials);\n                    modalInstance.dismiss('cancel');\n                };\n\n            }\n\n        });\n    };\n\n    $scope.checkOSUpdate = function(_credentials) {\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.os.update.inprogress.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                console.log(\"hub controller: getting osupdate 007a\");\n\n                $scope.title_message = \"OS Update: Checking in Progress\";\n                $scope.description_message = \"Please do not power-down the gateway. Will be auto-redirected to another page once checking is complete.\";\n                $scope.bar_before_message = \"Checking update availability...\";\n                $scope.bar_after_message = null;\n                $scope.error_message = null;\n                $scope.show_close_button = false;\n\n                // prepare for body data\n                if (typeof _credentials === \"undefined\") {\n                    content_body = {type: \"check\", request: \"rcpl\"};\n                } else {\n                    content_body = _credentials;\n                    content_body.type = \"check\";\n                    content_body.request = \"rcpl\";\n                }\n\n                // make the POST call\n                tempURL = '/api/osup';\n                workerProcessRestService.performGeneralExecution('POST', tempURL, false, true, content_body,\n                    function successCallback(data) {\n                        if (data.status === 'failure') {\n                            $scope.informOSUpdateError(data.message);\n                            modalInstance.dismiss('cancel');\n                        } else {\n                            $scope.foundOSUpdate = data.update;\n                            if($scope.foundOSUpdate){\n                                $scope.confirmOSUpdate(_credentials);\n                                modalInstance.dismiss('cancel');\n                            }else{\n                                $scope.checkOSUpdate_Packages(modalInstance);\n                            }\n                        }\n                    }, function errorCallback(errorMessage){\n                        $scope.informOSUpdateError(errorMessage);\n                        modalInstance.dismiss('cancel');\n                    }, rest_check_interval_milliseconds);\n            }\n        });\n    };\n\n    $scope.checkOSUpdate_Packages = function(modalInstance) {\n        console.log(\"hub controller: getting osupdate_package\");\n\n        // prepare for body data\n        content_body = {type: \"check\", request: \"package\"};\n\n        // make the POST call\n        tempURL = '/api/osup';\n        workerProcessRestService.performGeneralExecution('POST', tempURL, false, true, content_body,\n            function successCallback(data) {\n                if (data.status === 'failure') {\n                    $scope.informOSUpdateError(data.message);\n                    modalInstance.dismiss('cancel');\n                } else {\n                    $scope.foundOSUpdate_Packages = data.package_update;\n                    if($scope.foundOSUpdate_Packages){\n                        $scope.OSUpdate_Packages = data.packages;\n                        $scope.confirmOSUpdatePackages();\n                        modalInstance.dismiss('cancel');\n                    }else{\n                        $scope.informOSUpdateNotAvailable();\n                        modalInstance.dismiss('cancel');\n                    }\n                }\n            }, function errorCallback(errorMessage) {\n                $scope.informOSUpdateError(errorMessage);\n                modalInstance.dismiss('cancel');\n            }, rest_check_interval_milliseconds);\n    };\n\n    $scope.confirmOSUpdate = function(_credentials){\n        console.log(\"hub confirming os update\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.confirm.os.update.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.do_enter_credential = false;\n                $scope.do_confirm_update = true;\n\n                $scope.cancelOSUpdate = function(){\n                    console.log(\"hub canceling os update\");\n                    $scope.informOSUpdate_CancelWarning();\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.doOSUpdate = function(){\n                    $scope.showOSUpdate(_credentials);\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.confirmOSUpdatePackages = function(){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.confirm.os.update.package.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.cancelOSUpdate = function(){\n                    $scope.informOSUpdate_CancelWarning();\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.doOSUpdate_Packages = function(){\n                    $scope.showOSUpdatePackages();\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.showOSUpdate = function(_credentials){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.os.update.inprogress.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.title_message = \"OS Update: Installation in Progress\";\n                if ($scope.isQuark === true) {\n                    $scope.description_message = \"Please do not power-down the gateway. The OS update is in progress, downloading updates and installing onto this gateway. The update takes several hours in most network conditions.\";\n                } else {\n                    $scope.description_message = \"Please do not power-down the gateway. The OS update is in progress, downloading updates and installing onto this gateway. The update takes up to an hour in most network conditions.\";\n                }\n                $scope.bar_before_message = \"\";\n                $scope.bar_after_message = \"The gateway will automatically restart once update is complete.\";\n                $scope.error_message = null;\n                $scope.show_close_button = false;\n\n                console.log(\"performing os update\");\n\n                $scope.performUpdateSequence = function(){\n                    $scope.bar_before_message = 'Update in Progress...';\n                    $scope.error_message  = null;\n\n                    // prepare for body data\n                    content_body = _credentials;\n                    content_body.type = \"update_rcpl\";\n\n                    // make the POST call\n                    tempURL = '/api/osup';\n                    workerProcessRestService.performGeneralExecution('POST', tempURL, false, true, content_body,\n                        function successCallback(data) {\n                            if (data.status === 'success'){\n                                $scope.informOSUpdateRestart();\n                                modalInstance.dismiss('cancel');\n                            } else {\n                                $scope.informOSUpdateError(data.message);\n                                modalInstance.dismiss('cancel');\n                            }\n                        }, function errorCallback(errorMessage) {\n                            $scope.informOSUpdateError(errorMessage);\n                            modalInstance.dismiss('cancel');\n                        }, rest_check_interval_milliseconds_ll);\n                };\n\n                $scope.performUpdateSequence();\n            }\n        });\n    };\n\n    $scope.showOSUpdatePackages = function(){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.os.update.inprogress.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.title_message = \"OS Update: Installation in Progress\";\n                $scope.description_message = \"Please do not power-down the gateway. The OS update is in progress, downloading updates and installing onto this gateway. The updating time depends on the number of packages that need to be updated.\";\n                $scope.bar_before_message = \"\";\n                $scope.bar_after_message = \"The gateway will automatically restart once update is complete.\";\n                $scope.error_message = null;\n                $scope.show_close_button = false;\n\n                console.log(\"hub controller: updating OS packages\");\n\n                // prepare for body data\n                content_body = {type: \"update_packages\"};\n\n                // make the POST call\n                tempURL = '/api/osup';\n                workerProcessRestService.performGeneralExecution('POST', tempURL, false, true, content_body,\n                    function successCallback(data) {\n                        if (data.status === 'success') {\n                            // so that we can get the available update count to display.\n                            try {\n                                var p_list = JSON.parse(data.p_list);\n                                if ($scope.connected){\n                                    $scope.setPackages('True', p_list);\n                                }\n                                else{\n                                    $scope.setPackages('False', p_list);\n                                }\n                            } catch(e) {\n                                // ignore error\n                            }\n\n                            $scope.informOSUpdateRestart();\n                            modalInstance.dismiss('cancel');\n                        }else{\n                            console.log(\"error updating OS packages.\");\n                            $scope.informOSUpdateError(response.data.message);\n                            modalInstance.dismiss('cancel');\n                        }\n                    }, function errorCallback(errorMessage) {\n                        $scope.informOSUpdateError(errorMessage);\n                        modalInstance.dismiss('cancel');\n                    }, rest_check_interval_milliseconds_l);\n            }\n        });\n    };\n\n    $scope.informOSUpdateRestart = function(){\n        console.log(\"inform os update restart\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.os.update.end.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n                $scope.title_message = \"OS Update: Installation Complete\";\n                $scope.description_message = \"\";\n                $scope.show_bar = true;\n                $scope.bar_before_message = \"Update Installed!\";\n                $scope.bar_after_message = \"The gateway will automatically restart in 10 seconds.\";\n                $scope.show_last_error = false;\n                $scope.show_last_normal = true;\n                $scope.show_close = true;\n                $scope.show_close_button = false;\n                $scope.show_warning_html = false;\n\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.rebootGateway(\n                    function successCallback(response) {\n                        console.log(\"rebooted gateway: \" + response.data.status);\n                        $timeout(function(){\n                            modalInstance.dismiss('cancel');\n                        }, restart_welcome_latency_milliseconds - 1000);\n                    }, function errorCallback(response) {\n                        console.log(\"gateway reboot failed\");\n                        $scope.bar_after_message = \"Rebooting gateway failed! Please manually restart the gateway!\";\n                        $scope.show_last_error = true;\n                        $scope.show_last_normal = false;\n                    }, restart_welcome_latency_milliseconds);\n            }\n        });\n    };\n\n    $scope.informOSUpdateError = function(_error_message){\n        console.log(\"inform os update error\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.os.update.end.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.title_message = \"OS Update: Installation Error\";\n                $scope.description_message = \"\";\n                $scope.show_bar = true;\n                $scope.bar_before_message = \"Update Failed!\";\n                $scope.bar_after_message = _error_message;\n                $scope.show_last_error = true;\n                $scope.show_last_normal = false;\n                $scope.show_close = true;\n                $scope.show_close_button = false;\n                $scope.show_warning_html = false;\n\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.informOSUpdateNotAvailable = function(){\n        console.log(\"hub confirming os update #8490a\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.os.update.end.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.title_message = \"OS Update: No Update\";\n                $scope.description_message = \"\";\n                $scope.show_bar = true;\n                $scope.bar_before_message = \"Update Not Available!\";\n                $scope.bar_after_message = \"\";\n                $scope.show_last_error = false;\n                $scope.show_last_normal = true;\n                $scope.show_close = false;\n                $scope.show_close_button = true;\n                $scope.show_warning_html = false;\n\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.informOSUpdateDone = function(){\n        console.log(\"inform os update done\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.os.update.end.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n                $scope.title_message = \"OS Update: Installation Complete\";\n                $scope.description_message = \"\";\n                $scope.show_bar = true;\n                $scope.bar_before_message = \"Update Installed!\";\n                $scope.bar_after_message = \"\";\n                $scope.show_last_error = false;\n                $scope.show_last_normal = true;\n                $scope.show_close = false;\n                $scope.show_close_button = true;\n                $scope.show_warning_html = false;\n\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n            }\n\n        });\n    };\n\n    $scope.informOSUpdate_CancelWarning = function(){\n        // disable this for now\n\n        /*\n        console.log(\"inform os update cancel warning\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.inform.os.update.end.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n                $scope.title_message = \"OS Update: Update Cancelled\";\n                $scope.description_message = '';\n                $scope.show_bar = false;\n                $scope.bar_before_message = \"\";\n                $scope.bar_after_message = \"\";\n                $scope.show_last_error = false;\n                $scope.show_last_normal = false;\n                $scope.show_close = false;\n                $scope.show_close_button = true;\n                $scope.show_warning_html = true;\n\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n            }\n\n        });\n        */\n    };\n};","// These are general functions used in several states.\niotgatewayhub.expandHub_packages = function($scope,$state,$http,$rootScope,$uibModal,$timeout,workerProcessRestService) {\n\n    var PACKAGE_ACTIVITY_TYPE = {\n        INSTALL: \"INSTALL\",\n        UNINSTALL: \"UNINSTALL\",\n        UPDATE: \"UPDATE\",\n        UPDATE_ALL: \"UPDATE_ALL\",\n        SELF_UPDATE: \"SELF_UPDATE\"\n    };\n\n    var PACKAGE_STATE = {\n        INSTALLED: \"INSTALLED\",\n        UNINSTALLED: \"UNINSTALLED\",\n        UPDATED:\"UPDATED\",\n        UPDATE_FAILED:\"UPDATE_FAILED\"\n    };\n\n    // The Global State //\n    $scope.$on('packageActivityStart', function(opt, args){\n        var $s = opt.currentScope;\n        var _type = \"NA\";\n        var _name = \"NA\";\n        if(args){\n            _name = args[0] ?  args[0] : '';\n            _type= args[1] ?  args[1] : '';\n        }\n\n        $s.package_activity = true;\n\n        switch(_type){\n            case PACKAGE_ACTIVITY_TYPE.INSTALL:\n                $s.installing_package[_name] = true;\n                $s.installing_any_package     = true;\n                break;\n\n            case PACKAGE_ACTIVITY_TYPE.UNINSTALL:\n                $s.uninstalling_package[_name] = true;\n                break;\n\n            case PACKAGE_ACTIVITY_TYPE.UPDATE:\n                $s.updating_package[_name] = true;\n                break;\n\n            case PACKAGE_ACTIVITY_TYPE.SELF_UPDATE:\n                $s.selfUpgrading = true;\n                $s.updating_package[_name] = true;\n                break;\n\n            case PACKAGE_ACTIVITY_TYPE.UPDATE_ALL:\n                $s.installing_all_package_updates = true;\n                break;\n\n        }\n    });\n\n    $scope.$on('packageActivityStop', function(opt, args){\n        var $s = opt.currentScope;\n        var _type = \"NA\";\n        var _name = \"NA\";\n        if(args){\n            _name = args[0] ?  args[0] : '';\n            _type= args[1] ?  args[1] : '';\n        }\n        // manages package activity states, regardless of success/failure\n\n        $s.package_activity = false;\n\n        switch(_type){\n            case PACKAGE_ACTIVITY_TYPE.INSTALL:\n                $s.installing_package[_name] = false;\n                $s.installing_any_package     = false;\n                break;\n\n            case PACKAGE_ACTIVITY_TYPE.UNINSTALL:\n                $s.uninstalling_package[_name] = false;\n                break;\n\n            case PACKAGE_ACTIVITY_TYPE.UPDATE:\n                $s.updating_package[_name] = false;\n                break;\n\n            case PACKAGE_ACTIVITY_TYPE.SELF_UPDATE:\n                $s.selfUpgrading = false;\n                $s.updating_package[_name] = false;\n                break;\n\n            case PACKAGE_ACTIVITY_TYPE.UPDATE_ALL:\n                $s.installing_all_package_updates = false;\n        }\n    });\n\n    ///////////////////////////////////////\n    // Package functions - basic ops\n    //////////////////////////////////////\n\n    function basicInstallPackage(_name,_trust, successCallback, errorCallback) {\n        var _untrusted_query = \"&rpm=untrusted\";\n        tempURL = '/api/packages?package='+encodeURIComponent(_name)+(_trust?_untrusted_query:'');\n        workerProcessRestService.performGeneralExecution('POST', tempURL, false, false, null,\n            successCallback, errorCallback, rest_check_interval_milliseconds_m);\n    }\n\n    function basicUninstallPackage(_name, successCallback, errorCallback) {\n        tempURL = '/api/packages?package='+encodeURIComponent(_name);\n        workerProcessRestService.performGeneralExecution('DELETE', tempURL, false, false, null,\n            successCallback, errorCallback, rest_check_interval_milliseconds_m);\n    }\n\n    function basicUpdatePackage(_name, _trust, successCallback, errorCallback) {\n        var _untrusted_query = \"&rpm=untrusted\";\n        tempURL = '/api/packages?package='+encodeURIComponent(_name)+(_trust?_untrusted_query:'');\n        workerProcessRestService.performGeneralExecution('PUT', tempURL, false, false, null,\n            successCallback, errorCallback, rest_check_interval_milliseconds_m);\n    }\n\n    function basicUpdateAllPackages(_trust, successCallback, errorCallback) {\n        var _untrusted_query = \"&rpm=untrusted\";\n        tempURL = '/api/packages?package=all'+(_trust?_untrusted_query:'');\n        workerProcessRestService.performGeneralExecution('PUT', tempURL, false, false, null,\n            successCallback, errorCallback, rest_check_interval_milliseconds_l);\n    }\n\n    function basicSelfUpgrade(successCallback, errorCallback) {\n        tempURL = '/api/selfupgrade';\n        workerProcessRestService.performGeneralExecutionOnlySubmit('PUT', tempURL, true, false, null,\n            successCallback, errorCallback);\n    }\n\n    ///////////////////////////////////////\n    // Package functions\n    //////////////////////////////////////\n\n    $scope.checkForPackageActivity = function(){\n        return $scope.package_activity || $scope.installing_any_package; // true value means block IO\n    };\n\n    function changePackageState(_package, state, blockSetArr, message ){\n\n        // Modifies the models\n\n        switch(state){\n            case PACKAGE_STATE.INSTALLED:\n                _package.installed = true;\n                $scope.installed_package[_package.name] = true;\n                break;\n\n            case PACKAGE_STATE.UNINSTALLED:\n                _package.installed = false;\n                $scope.installed_package[_package.name]  = false;\n                _.remove($scope.installed, { 'name': _package.name });\n                if(!blockSetArr) $scope.setArrays(true);\n                break;\n\n            case PACKAGE_STATE.UPDATED:\n                $scope.updating_package[_package.name] = false;\n                _package.version        =_package.upgrade_version;\n                _package.upgrade_version= null;\n                $scope.updated_package[_package.name] = true;\n                if(!blockSetArr) $scope.setArrays(false);\n                break;\n\n            case PACKAGE_STATE.UPDATE_FAILED:\n                if (typeof message === \"undefined\") {\n                    update_message = '';\n                } else {\n                    update_message = message;\n                }\n                $scope.updating_package[_package.name] = false;\n                $scope.update_package_failed[_package.name] = true;\n                $scope.update_package_fail_message[_package.name] = update_message;\n                break;\n        }\n    }\n\n    $scope.showPackageInfo = function(_package){\n        tempURL = '/api/packageinfo?name='+_package.name;\n        workerProcessRestService.informGeneralChecking('GET', tempURL, false, false, null,\n            _package.name, '', 'Getting Package Information...',\n             function successCallback(data) {\n                var _details = data;\n                for (var attrname in _details) { _package[attrname] = _details[attrname]; }\n                $scope.openPackageInfoModal(_package);\n             }, rest_check_interval_milliseconds_m);\n    };\n\n    $scope.installPackage = function(_package,_success,_error,_trust){\n        var _name = _package.name;\n        $scope.message = '';\n\n        // Check for blockers\n        if(_package.installed){\n            console.log(\"hub control not installing package \"+_name+ \" because it is already installed #9033z\");\n            return;\n        }\n\n        if($scope.checkForPackageActivity()){\n            console.log(\"hub control not installing package \"+_name+ \" because package activity in progress #9033q\");\n            return;\n        }\n\n        // Start install\n        $rootScope.$broadcast('packageActivityStart', [_name, PACKAGE_ACTIVITY_TYPE.INSTALL]);\n        basicInstallPackage(_name, _trust,\n            function successCallback(data) {\n                $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.INSTALL]);\n                if (data.status===\"success\") {\n                    changePackageState(_package, PACKAGE_STATE.INSTALLED);\n\n                    try {\n                        var p_list = JSON.parse(data.p_list);\n                        if ($scope.connected){\n                            $scope.setPackages('True', p_list);\n                        }\n                        else{\n                            $scope.setPackages('False', p_list);\n                        }\n                    } catch(e) {\n                        // ignore error\n                    }\n\n                    $timeout(function(){\n                        $scope.setArrays(true);\n                        if(_.isFunction(_success)){ _success(); }\n                    },1500);\n                } else if (data.status==='untrusted' && !_trust){\n                    //$scope.openInstallUntrustedPackageModal(_package, data.error)\n                    _package.confirmUntrusted = true;\n                } else {\n                    $scope.openInstallPackageErrorModal('Package Install Error', _package, data.message);\n                    if(_.isFunction(_error)){_error();}\n                }\n            }, function errorCallback(errorMessage) {\n                $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.INSTALL]);\n                $scope.openInstallPackageErrorModal('Package Install Error', _package, errorMessage);\n                if(_.isFunction(_error)){_error();}\n            });\n    };\n\n    $scope.uninstallPackage = function(_package){\n        var _name = _package.name;\n        $scope.message = '';\n        if($scope.uninstalling_package[_package.name]){\n            return;\n        }\n\n        $rootScope.$broadcast('packageActivityStart', [_name, PACKAGE_ACTIVITY_TYPE.UNINSTALL]);\n\n        basicUninstallPackage(_package.name,\n            function successCallback(data) {\n                $scope.package_activity = false;\n                $scope.uninstalling_package[_package.name] = false;\n                changePackageState(_package, PACKAGE_STATE.UNINSTALLED);\n                $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.UNINSTALL]);\n\n                try {\n                    var p_list = JSON.parse(data.p_list);\n                    if ($scope.connected){\n                        $scope.setPackages('True', p_list);\n                    }\n                    else{\n                        $scope.setPackages('False', p_list);\n                    }\n                } catch(e) {\n                    // ignore error\n                }\n\n            }, function errorCallback(errorMessage) {\n                $scope.package_activity = false;\n                $scope.uninstalling_package[_package.name] = false;\n                $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.UNINSTALL]);\n                $scope.message = errorMessage;\n                $scope.openInstallPackageErrorModal('Package Uninstall Error', _package, errorMessage);\n            });\n    };\n\n    $scope.launchPackage = function(_name,_url){\n        console.log(\"launching package \"+_name+\" at url:\"+_url+\" #003v\");\n        //if($scope.checkForPackageActivity()){\n        //    return;\n        //}\n\n        var win = window.open(window.location.protocol + \"//\" + window.location.hostname + _url, '_blank');\n        win.focus();\n    };\n\n    $scope.updatePackage = function(_package,_success,_error,_trust){\n\n        var _name    = _package.name;\n        var _version = _package.upgrade_version;\n        if(_version===''){\n            console.log(\"hub control NOT updating package \"+_name+\" because upgrade_version is '' #30255z\");\n            return;\n        }\n\n        if(_package.name === 'iot-developer-hub'){\n            $scope.openUpdateDevHubPackageModal(_package);\n            return;\n        }\n\n        $rootScope.$broadcast('packageActivityStart', [_name, PACKAGE_ACTIVITY_TYPE.UPDATE]);\n\n        basicUpdatePackage(_name, _trust,\n            function successCallback(data) {\n                $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.UPDATE]);\n                if (data.status === \"success\") {\n\n                    if ('p_info' in data) {\n                        var _details = data.p_info;\n                        for (var attrname in _details) { _package[attrname] = _details[attrname]; }\n                    }\n\n                    try {\n                        var p_list = JSON.parse(data.p_list);\n                        if ($scope.connected){\n                            $scope.setPackages('True', p_list);\n                        }\n                        else{\n                            $scope.setPackages('False', p_list);\n                        }\n                    } catch(e) {\n                        // ignore error\n                    }\n\n                    changePackageState(_package,PACKAGE_STATE.UPDATED);\n                    if (_.isFunction(_success)) {_success();}\n                } else if (data.status === 'untrusted' && !_trust) {\n                    $scope.openUpdateUntrustedPackageModal(_package,data.error,_success);\n                    return;\n                } else {\n                    updateFailed(_package, data.message);\n                }\n            }, function errorCallback(errorMessage) {\n                updateFailed(_package, errorMessage);\n            });\n\n        function updateFailed(_package, errorMessage){\n            $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.UPDATE]);\n\n            if(_.isFunction(_error)){_error(errorMessage);}\n\n            changePackageState(_package, PACKAGE_STATE.UPDATE_FAILED, false, errorMessage);\n\n            // ui-related hacks\n            $scope.update_package_failed[_package.name] = true;\n            $scope.update_package_fail_message[_package.name] = errorMessage;\n            $timeout(function(){\n                $scope.update_package_failed[_package.name] = false;\n            }, linger_info_timeout_milliseconds);\n        }\n    };\n\n    $scope.updateDevHub = function(_package, _success, _error){\n\n        $rootScope.$broadcast('packageActivityStart', [_package.name, PACKAGE_ACTIVITY_TYPE.SELF_UPDATE]);\n\n        basicSelfUpgrade(\n            function successCallback(data) {\n                $rootScope.$broadcast('packageActivityStop', [_package.name, PACKAGE_ACTIVITY_TYPE.SELF_UPDATE]);\n                changePackageState(_package, PACKAGE_STATE.UPDATED);\n                if(_.isFunction(_success)){ _success();}\n            }, function errorCallback(errorMessage) {\n                $rootScope.$broadcast('packageActivityStop', [_package.name, PACKAGE_ACTIVITY_TYPE.SELF_UPDATE]);\n\n                if(_.isFunction(_error)){ _error(errorMessage);}\n\n                changePackageState(_package, PACKAGE_STATE.UPDATE_FAILED, false, errorMessage);\n\n                // ui-related hacks\n                $scope.update_package_failed[_package.name] = true;\n                $scope.update_package_fail_message[_package.name] = errorMessage;\n                $timeout(function(){\n                    $scope.update_package_failed[_package.name] = false;\n                }, linger_info_timeout_milliseconds);\n            });\n    };\n\n    $scope.updatePackagesIndividually = function(_trust){\n\n        console.log(\"updating packages individually\");\n\n        var selfUpgradeAvailable = null;\n\n        var packagesToUpdate = [];\n\n        $rootScope.$broadcast('packageActivityStart', [null,PACKAGE_ACTIVITY_TYPE.UPDATE_ALL]);\n\n        // Build list to update\n        _.forEach($scope.packages, function(_package){\n\n            if(!_package.upgrade_version) return;\n\n            if(_package.name === \"iot-developer-hub\"){\n                selfUpgradeAvailable = _package;\n            } else {\n                packagesToUpdate.push(_package);\n                //$scope.update_package_queue[_package.name] = true;\n            }\n\n        });\n\n        if(packagesToUpdate.length < 1){\n            if(selfUpgradeAvailable){\n                $scope.openUpdateDevHubPackageModal(selfUpgradeAvailable);\n            }\n            return;\n        }\n\n        var i=0;\n\n        function updateNextPackage(){\n            if(packagesToUpdate[i]){\n                console.log(\"updating packages individually: (\"+i+\")\"+ packagesToUpdate[i].name);\n                $scope.updatePackage(packagesToUpdate[i],\n                    function() {\n                        i+=1;\n                        updateNextPackage();\n                    }, function(errorMessage) {\n                        $rootScope.$broadcast('packageActivityStop', [null,PACKAGE_ACTIVITY_TYPE.UPDATE_ALL]);\n                        $scope.openInstallPackageErrorModal('Package Update Error', packagesToUpdate[i], errorMessage + ' Please refresh the web page to get updated packages information!');\n                    });\n                return;\n            }\n            if(selfUpgradeAvailable){\n                console.log(\"updating packages individually: 'iot-developer-hub', launching confirmation\");\n                $scope.openUpdateDevHubPackageModal(selfUpgradeAvailable);\n\n            }\n        }\n\n        updateNextPackage();\n    };\n\n    $scope.updatePackages = function(_trust){\n\n        var selfUpgradeAvailable = function(){\n            var devHubPackage = _.find($scope.packages, function(_p) { return _p.name === \"iot-developer-hub\"; });\n\n            if(devHubPackage && devHubPackage.upgrade_version){\n             return devHubPackage;\n            }else{\n                return null;\n            }\n        }();\n\n        if(selfUpgradeAvailable){\n            $scope.updatePackagesIndividually(_trust);\n            return;\n        }\n\n        if($scope.installing_all_package_updates || $scope.package_activity){\n            return;\n        }\n\n        $rootScope.$broadcast('packageActivityStart', [null, PACKAGE_ACTIVITY_TYPE.UPDATE_ALL]);\n\n        _.forEach($scope.packages, function(_package){\n\n            if(!_package.upgrade_version) return;\n\n            $scope.updating_package[_package.name] = true;\n        });\n\n        basicUpdateAllPackages(_trust,\n            function successCallback(data) {\n                $rootScope.$broadcast('packageActivityStop', [null,PACKAGE_ACTIVITY_TYPE.UPDATE_ALL]);\n                if (data.status === 'success') {\n                    for(var _p=0,_pl=$scope.packages.length;_p<_pl;_p++){\n                        changePackageState($scope.packages[_p], PACKAGE_STATE.UPDATED, true);\n                    }\n\n                    try {\n                        var p_list = JSON.parse(data.p_list);\n                        if ($scope.connected){\n                            $scope.setPackages('True', p_list);\n                        }\n                        else{\n                            $scope.setPackages('False', p_list);\n                        }\n                    } catch(e) {\n                        // ignore error\n                    }\n\n                    $scope.setArrays(false);\n                } else if (data.status === 'untrusted' && !_trust){\n                    $scope.openUpdateUntrustedPackagesModal(data.error);\n                    return;\n                } else {\n                    errorCallback(data.message);\n                }\n            }, errorCallback);\n\n        function errorCallback(errorMessage) {\n            $rootScope.$broadcast('packageActivityStop', [null,PACKAGE_ACTIVITY_TYPE.UPDATE_ALL]);\n            for(var _p=0,_pl=$scope.packages.length;_p<_pl;_p++){\n                var _packg = $scope.packages[_p];\n                changePackageState(_packg, PACKAGE_STATE.UPDATE_FAILED, true, errorMessage);\n            }\n\n            $timeout(function(){\n                for(var _p=0,_pl=$scope.packages.length;_p<_pl;_p++){\n                    var _packg = $scope.packages[_p];\n                    $scope.update_package_failed[_packg.name] = false;\n                }\n            }, linger_info_timeout_milliseconds);\n\n            var tempPackage = {};\n            tempPackage.name = 'Update Packages';\n            $scope.openInstallPackageErrorModal('Packages Update Error', tempPackage, errorMessage);\n        }\n    };\n\n    $scope.setPackages = function(update, package_list, passedSuccessCallback, passedErrorCallback){\n        console.log(\"hub controller: getting packages #005a\");\n\n        if ((typeof package_list === 'undefined') || (typeof package_list === 'string')) {\n            $http({\n                method : 'GET',\n                url    : '/api/packages?update=' + update + '&nocache=' + new Date().getTime()\n            }).then(\n                function successCallback(response) {\n                    $scope.packages = response.data;\n                    console.log(\"hub controller: found packages by API call 005b\");\n                    $scope.package_refresh = Number($scope.package_refresh) + 1;\n                    console.log(\"hub controller: setting package refresh flag 005c\");\n\n                    if(_.isFunction(passedSuccessCallback)){ passedSuccessCallback(response.data); }\n                },function errorCallback(response) {\n                    console.log(\"error getting packages 005E\");\n\n                    if(_.isFunction(passedErrorCallback)){ passedErrorCallback(response); }\n                });\n        } else {\n            $scope.packages = package_list;\n            $scope.package_refresh = Number($scope.package_refresh) + 1;\n        }\n    };\n\n    $scope.getPackagesInstalled = function(passedSuccessCallback, passedErrorCallback){\n        $http({\n            method : 'GET',\n            url    : '/api/packages?request=installed&nocache=' + new Date().getTime()\n        }).then(\n            function successCallback(response) {\n                if(_.isFunction(passedSuccessCallback)){ passedSuccessCallback(response.data); }\n            },function errorCallback(response) {\n                if(_.isFunction(passedErrorCallback)){ passedErrorCallback(response); }\n            });\n    };\n\n    ///////////////////////////////////////\n    // GUI Modals\n    //////////////////////////////////////\n\n    $scope.openPackageInfoModal = function(_package){\n\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.package.info.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.service_error = false;\n                $scope.displayed   = _package;\n\n                //$scope.statuses    = $scope.service_statuses;\n                $scope.running     = $scope.package_statuses[_package.name].running;\n\n                //var _state         = $scope.package_states[_package.name];\n                //console.log(\"hub control opening package info modal for \"+_package.name+\" with State \"+_state);\n\n                $scope.enabled     =  $scope.package_statuses[_package.name].autorun;\n                $scope.checkbox    = {enabled: $scope.enabled};\n                console.log(\"hub control opening package info modal for \"+_package.name+\" with State \"+$scope.enabled+\" \"+$scope.running);\n                $scope.hasupgrade  =  _package.upgrade_version;\n\n                $scope.closePackageInfo = function(){\n                    console.log(\"close packageinfo\");\n                    modalInstance.dismiss('cancel');\n                    $scope.installed_package = {};\n                };\n\n                $scope.toggleServiceState = function(_enable){\n                    if($scope.enabling_package[_package.name]){\n                        return;\n                    }\n                    $scope.enabling_package[_package.name] = true;\n\n                    var _len         = _package.service.length;\n                    var _action      = _enable ? \"enable\"    : \"disable\";\n                    console.log(\"hub service control toggling service state for \"+_package.name+\" to \"+_action+\" #5502a\");\n\n                    var _services = null;\n                    if(_package.service){\n                        _services = _package.service.join(\",\");\n                        if(_services){\n                            tempURL = '/api/sc?services=' + _services + \"&action=\" + _action;\n                            workerProcessRestService.performGeneralExecution('POST', tempURL, false, false, null,\n                                function successCallback(data) {\n                                    $scope.enabling_package[_package.name] = false;\n                                    if (data.status === 'success'){\n                                        if(_enable){\n                                            console.log(\"hub service control successfully changed service state for \"+_package.name+\" to \"+_action+\" #5502c1\");\n                                        }else{\n                                            console.log(\"hub service control successfully changed service state for \"+_package.name+\" to \"+_action+\" #5502c2\");\n                                        }\n                                        //$scope.package_statuses[_package.name].State = _enable? 'enabled' : 'disabled';\n                                        $scope.setArrays(true);\n                                    } else {\n                                        $scope.enabling_package[_package.name] = false;\n                                        $scope.service_error = true;\n                                        $scope.service_error_message = 'This action failed. Please try again! ' + data.message;\n                                        if (_enable) {\n                                            // enable failed.... uncheck checkbox\n                                            $scope.checkbox    = {enabled: false};\n                                        } else {\n                                            // disable failed.... check checkbox\n                                            $scope.checkbox    = {enabled: true};\n                                        }\n                                        console.log(\"hub service control failed to change service state for \"+_package.name+\" to \"+_action+\" #5502F\");\n\n                                        setTimeout(function(){\n                                            $scope.service_error = false;\n                                        }, linger_info_timeout_milliseconds);\n                                    }\n                                }, function errorCallback(errorMessage) {\n                                    $scope.enabling_package[_package.name] = false;\n                                    $scope.service_error = true;\n                                    $scope.service_error_message = errorMessage;\n                                    if (_enable) {\n                                        // enable failed.... uncheck checkbox\n                                        $scope.checkbox    = {enabled: false};\n                                    } else {\n                                        // disable failed.... check checkbox\n                                        $scope.checkbox    = {enabled: true};\n                                    }\n                                    console.log(\"errorCallback with \" + errorMessage);\n\n                                    setTimeout(function(){\n                                        $scope.service_error = false;\n                                    }, linger_info_timeout_milliseconds);\n                                }, rest_check_interval_milliseconds_s);\n                        }\n                    }\n                };\n\n                $scope.doUpdate = function(_displayed){\n                    $scope.updatePackage(_displayed, function(){\n                        $scope.setArrays(true);\n                        //refactor out\n                    }, function errorCallback(errorMessage){\n                        $scope.openInstallPackageErrorModal('Package Update Error', _displayed, errorMessage);\n                        $scope.setArrays(true);\n                        modalInstance.dismiss('cancel');\n                    });\n                };\n            }\n        });\n    };\n\n    $scope.openUpdateUntrustedPackagesModal = function(_message){\n        var modalInstance2 = $uibModal.open({\n            templateUrl: 'partials/hub.update.untrusted.packages.ng.html?version=' + gui_version,\n            animation:    true,\n            scope:        $scope,\n            size:        'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n                $scope.message      = _message;\n                $scope.closeModal = function(){\n                    modalInstance2.dismiss('cancel');\n                };\n                $scope.trustToUpdate = function(){\n                    modalInstance2.dismiss('cancel');\n                    $scope.updatePackages(true);\n                };\n            }\n        });\n    };\n\n    $scope.confirmUpdatePackages = function(){\n        console.log(\"hub confirming update packages #9190a\");\n        if($scope.package_activity){\n            console.log(\"suppressing action: current package activity\");\n            return;\n        }\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.confirm.update.packages.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.doUpdatePackages = function(){\n                    modalInstance.dismiss('cancel');\n                    $scope.updatePackages();\n                };\n            }\n        });\n    };\n\n    $scope.openUpdateDevHubPackageModal = function(_package){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.confirm.update.devhub.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope,$timeout, $window){\n                //$scope.selected_device   = null;\n\n                $rootScope.$broadcast('packageActivityStart');\n                $scope.selfUpgrading = false;\n\n                $scope.closeModal = function(){\n                    $rootScope.$broadcast('packageActivityStop');\n                    console.log(\"close confirm restart modal\");\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.doSelfUpdate =  function(){\n                    $scope.selfUpgrading = true;\n                    $scope.updateDevHub(_package,\n                        function successCallback(){\n                            // stop checking so that we won't throw no network error.\n                            // later on, when we load state.hub, we will reschedule it.\n                            $scope.stopCheckingNetwork();\n\n                            $timeout(function(){\n                                modalInstance.dismiss('cancel');\n                                $state.go(\"welcome.login\");\n\n                            }, 5000);\n\n                            // Refresh web page to download index.html\n                            setTimeout(function() {\n                                $window.location.reload();\n                            }, 7000);\n                        },\n                        function errorCallback(errorMessage){\n                            $timeout(function(){\n                                $scope.update_package_failed[_package.name] = false;\n                            }, linger_info_timeout_milliseconds);\n\n                            $scope.openInstallPackageErrorModal('Package Update Error', _package, errorMessage);\n\n                            // Assume success\n                            $timeout(function(){\n                                modalInstance.dismiss('cancel');\n                                $state.go(\"welcome.login\");\n\n                            }, 7000);\n\n                            // Refresh web page to download index.html\n                            setTimeout(function() {\n                                $window.location.reload();\n                            }, 9000);\n                        }\n                    );\n                };\n            }\n        });\n    };\n\n    $scope.startTrustedInstall = function (_package) {\n        _package.confirmUntrusted=false;\n        if($scope.checkForPackageActivity()){\n            return;\n        }\n        $scope.installPackage(_package, null, null, true);\n    };\n\n    $scope.openUpdateUntrustedPackageModal = function(_package,_message, _success){\n        var modalInstance2 = $uibModal.open({\n            templateUrl: 'partials/hub.update.untrusted.package.ng.html?version=' + gui_version,\n            animation:    true,\n            scope:        $scope,\n            size:        'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n                $scope.installed_package[_package.name] = false;\n                $scope.untrusted    = _package;\n                $scope.message      = _message;\n                $scope.closeModal = function(){\n                    modalInstance2.dismiss('cancel');\n                };\n                $scope.trustToUpdate = function(){\n                    modalInstance2.dismiss('cancel');\n                    $scope.updatePackage(_package,  _success, null, true);\n                };\n            }\n        });\n    };\n\n    $scope.openInstallUntrustedPackageModal = function(_package,_message){\n        var modalInstance2 = $uibModal.open({\n            templateUrl: 'partials/hub.install.untrusted.package.ng.html?version=' + gui_version,\n            animation:    true,\n            scope:        $scope,\n            size:        'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n                $scope.installed_package[_package.name] = false;\n                $scope.untrusted    = _package;\n                $scope.message      = _message;\n                $scope.closeModal = function(){\n                    modalInstance2.dismiss('cancel');\n                };\n                $scope.trustToInstall = function(){\n                    modalInstance2.dismiss('cancel');\n\n                    $scope.installPackage(\n                        _package,\n                        function(){\n                            //modalInstance2.dismiss('cancel');\n                        },\n                        function(){\n                            //modalInstance2.dismiss('cancel');\n                        },true);\n                };\n\n            }\n        });\n    };\n\n    $scope.openInstallPackageErrorModal = function(_title, _package, _message){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.install.package.error.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n                $scope.title = _title;\n                $scope.package = _package;\n                $scope.message = _message;\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openServiceActivityPackageErrorModal = function(_title, _message){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.service.package.error.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n                $scope.title = _title;\n                $scope.message = _message;\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openAddPackagesModal = function(){\n\n        if($scope.package_activity){\n            console.log(\"suppressing action: current package activity\");\n            return;\n        }\n\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.add.packages.ng.html?version=' + gui_version,\n            animation:    true,\n            scope: $scope,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.query = null;\n                $scope.sortType = 'name';\n                $scope.installed_package    = {};\n\n                $scope.closeAddPackages = function(){\n                    if($scope.installing_any_package) return;\n                    $scope.installed_package    = {};\n                    modalInstance.dismiss('cancel');\n\n                    console.log(\"closing add packages modal.\");\n                };\n\n            }\n        });\n\n    };\n};\n","// These are general functions used in several states.\niotgatewayhub.expandHub_pro_upgrade = function($scope,$http,$state,$uibModal,$timeout,workerProcessRestService,utilityFunctionsService) {\n\n    $scope.confirmOSUpgrade = function(callback){\n        console.log(\"hub confirming os upgrade #9033a\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.os.upgrade.1.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.onSuppress = function(shouldSuppress) {\n                    if(!shouldSuppress) return;\n                    utilityFunctionsService.setCookie(\"upgradeMessage\",false,license_duration_days);\n                };\n\n                $scope.closeModal = function(){\n                    console.log(\"hub canceling os upgrade #9033b\");\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.onNotNow = function(){\n                    console.log(\"hub canceling os upgrade via 'Not now' #9033b\");\n                    modalInstance.dismiss('cancel');\n                    if(angular.isFunction(callback))callback();\n                };\n\n                $scope.continueOSUpgrade = function(){\n                    console.log(\"hub opening os upgrade 2 #9033c\");\n                    console.log(\"admin tools mec status \"+$scope.mec.installed+\" #0812a\");\n                    if($scope.mec.enabled){\n                        $scope.openOSUpgradeModal1b();\n                        modalInstance.dismiss('cancel');\n                        return;\n                    }\n                    $scope.openOSUpgradeModal2();\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openOSUpgradeModal1b = function(){\n        console.log(\"hub confirming os upgrade #9033a\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.os.upgrade.1b.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.closeModal = function(){\n                    console.log(\"hub canceling os upgrade #9033b\");\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openOSUpgradeModal2 = function(){\n        console.log(\"hub opening os upgrade 2 #9034a\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.os.upgrade.2.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope,$timeout){\n\n                $scope.credentials   = {username: null, password: null};\n                $scope.error_message = null;\n\n                $scope.closeModal = function(){\n                    console.log(\"hub canceling os upgrade #9034b\");\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSUpgrade = function(){\n                    $scope.error_message = '';\n                    $scope.openOSUpgradeModal3($scope.credentials.username,$scope.credentials.password);\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openOSUpgradeModal3 = function(_username,_password){\n        console.log(\"hub opening os upgrade 3 #9035a\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.os.upgrade.3.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.in_pro_upgrade = true;\n                $scope.before_bar_message = 'Upgrade in Progress...';\n                $scope.button_title = 'Finish';\n\n                if ($scope.isQuark === true) {\n                    $scope.timeHours = 'up to one hour';\n                } else {\n                    $scope.timeHours = 'less than one hour';\n                }\n\n                $scope.closeModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n\n                data = {\"username\":_username,\"password\":_password};\n                workerProcessRestService.performGeneralExecution(\"POST\", \"/api/pro\", false, true, data,\n                    function successCallback(responseData) {\n                        $scope.in_pro_upgrade = false;\n                        $scope.before_bar_message = 'Upgrade Complete!';\n                        $scope.button_title = 'Finish';\n                        $scope.rebooting = false;\n                        $scope.rebooted  = false;\n\n                    }, function errorCallback(errorMessage) {\n                        $scope.in_pro_upgrade = false;\n                        $scope.before_bar_message = 'Upgrade Failed!';\n                        $scope.button_title = 'Close';\n                        $scope.error_message = errorMessage;\n                    }, rest_check_interval_milliseconds_l);\n            }\n\n        });\n    };\n};\n","// These are general functions used in several states.\niotgatewayhub.expandHub_proxy = function($scope,$uibModal,$http,$rootScope,$state,workerProcessRestService,utilityFunctionsService) {\n    $scope.settings = {proxy: null };\n\n    // this one is called when the user logs in or the user refreshes the page.\n    $scope.proceedToNetworkCheck = function(){\n        $rootScope.loggedin = true;\n\n        utilityFunctionsService.checkNetwork(function(response){\n\n                var goNextState = function(has_network, data) {\n\n                    var openErrorModal = function(_title, _message){\n                        // do not open it if it is already opened.\n                        if (isLoadingErrorModalShown) {\n                            return;\n                        }\n\n                        var modalInstance = $uibModal.open({\n                            templateUrl: 'partials/hub.loading.error.ng.html?version=' + gui_version,\n                            animation:    true,\n                            size: 'lg',\n                            backdrop: modal_light_dismiss_enabled,\n                            controller: function($scope,$state,$http,$rootScope,$timeout){\n                                $scope.title = _title;\n                                $scope.errorMessage = _message;\n                                $scope.closeModal = function(){\n                                    isLoadingErrorModalShown = false;\n                                    modalInstance.dismiss('cancel');\n                                };\n                            }\n                        });\n\n                        // https://github.com/angular-ui/bootstrap/tree/master/src/modal/docs\n                        modalInstance.opened.then(function() {\n                            isLoadingErrorModalShown = true;\n                        });\n                        modalInstance.result.then(function(selectedItems) {\n                                isLoadingErrorModalShown = false;\n                            }, function() {\n                                isLoadingErrorModalShown = false;\n                            });\n                    };\n\n                    if (has_network) {\n                        //network is up\n                        $scope.connected = true;\n\n                        // check to see if there is error when we set up the repos earlier during server start-up\n                        if (data.repo_status === 'failure') {\n                            openErrorModal('Repositories Information Update Error', response.data.repo_error);\n                        }\n\n                        if($rootScope.redirectState){\n                            $state.go($rootScope.redirectState);\n                        }\n                        else{\n                            $state.go('hub.dashboard.' + $scope.device.default_tab);\n                        }\n                    } else {\n                        //network is down\n                        $scope.connected = false;\n\n                        // check to see if there is error when we set up the repos earlier during server start-up\n                        if (data.repo_status === 'failure') {\n                            openErrorModal('Repositories Information Update Error', response.data.repo_error);\n                        }\n\n                        $state.go(\"hub.nonetwork\",{});\n                    }\n                };\n\n                // setting up periodic network checking\n                $scope.startCheckingNetwork();\n\n                var _https_conn = response.data.https_conn; //should this match the window-level protocol? The spec says this value\n                var _ok = _https_conn==\"True\";\n\n                goNextState(_ok, response.data);\n            }, function(response){\n                //should not occur (network being down is handled in success call with status in json)\n                console.log(\"error callback for test proxy settings\");\n            });\n    };\n\n    // setting up periodic network checking\n    $scope.startCheckingNetwork = function(){\n        if (periodicCheckNetworkFunc !== null) {\n            clearInterval(periodicCheckNetworkFunc);\n        }\n        periodicCheckNetworkFunc = setInterval(function(){\n            utilityFunctionsService.checkNetwork(\n                function(response){\n                    var _https_conn = response.data.https_conn; //should this match the window-level protocol? The spec says this value\n                    var _ok         = _https_conn===\"True\";\n                    var _fail       =  simulate_network_failure && network_index++ % 2 === 0;\n                    if(_ok && !_fail){\n                        console.log(\"hub controller: check network found https network connection is UP #9200b1\");\n                        $scope.connected = true;\n                    }else{\n                        //network is down\n                        console.log(\"hub controller: check network found https network connection is DOWN #9200b2\");\n                        $scope.connected = false;\n                    }\n\n                    // set pro status\n                    if (response.data.pro_status.result === 'NA') {\n                        // cannot get the current pro status, skip.\n                    } else {\n                        $scope.pro = (response.data.pro_status.result === 'True') ;\n                    }\n\n                    // update package list\n                    if (response.data.package_list === 'NA') {\n                        // no package_list update\n                    } else {\n                        // cast string of array to array\n                        $scope.packages = JSON.parse(response.data.package_list);\n                        $scope.package_refresh = Number($scope.package_refresh) + 1;\n                    }\n\n                    // update repo list\n                    if (response.data.repo_list === 'NA') {\n                        // no repo_list update\n                    } else {\n                        // only update when repo_list has an array..\n                        // empty array is still an array.\n                        if (response.data.repo_list) {\n                            $scope.repositories = response.data.repo_list;\n                        }\n                    }\n                },\n                function(response){\n                    console.log(\"hub ERROR checking network at interval #9200E \" + response.status);\n                    // Do not update status if we cannot get any information.\n                    // $scope.connected = false;\n                });\n        },network_check_interval_milliseconds);\n    };\n\n    $scope.stopCheckingNetwork = function() {\n        if (periodicCheckNetworkFunc !== null) {\n            clearInterval(periodicCheckNetworkFunc);\n        }\n    };\n\n    $scope.getProxySettings = function(resultHandler){\n        var tempUrl = '/api/proxy?request=list';\n        workerProcessRestService.informGeneralChecking('GET', tempUrl, false, false, null,\n            'Network Settings', '', 'Retrieving Settings...',\n            function(data){\n                // success call back\n                $scope.proxy = data;\n                $scope.settings.proxy = $scope.proxy;\n                $scope.settings.proxy.single_url = \"\";\n                $scope.settings.proxy.single_port = \"\";\n\n                resultHandler();\n            }, rest_check_interval_milliseconds);\n    };\n\n    $scope.testProxySettings = function(successCallback, failCallback){\n        //returns success or failure. does not send settings in form. uses the ones in database.\n        //Nick says button should be enabled only when form is clean.\n        console.log(\"testing proxy settings\");\n        $scope.networkSettingsTest = {running:true};\n        utilityFunctionsService.checkNetwork(\n            function(response){\n                var _https_conn = response.data.https_conn;\n                var _ok         = _https_conn==\"True\";\n\n                if(_ok){\n                    successCallback();\n                    // $scope.networkSettingsTest = {running:true,status:'success'};\n                    //network is up\n                    //$state.go(\"hub.dashboard.sensors\",{});\n                }else{\n                    failCallback({success:false, message:\"Proxy settings invalid [\"+_https_conn+\"]\"});\n                    //$scope.networkSettingsTest = {running:true,status:'fail'};\n                    //network is down\n                    //$state.go(\"hub.nonetwork\",{});\n                }\n                console.log(\"Proxy test returned: \"+_https_conn);\n            },\n            function(response){\n                failCallback();\n                //should not occur (network being down is handled in success call with status in json)\n                console.log(\"error callback for test proxy settings\");\n            }\n        );\n    };\n\n    $scope.applyProxySettings = function(successCallback, failCallback){\n        //save proxy settings to backend\n\n        var _single_url  = $scope.settings.proxy.single_url;\n        var _single_port = $scope.settings.proxy.single_port;\n\n        var _http_url    = $scope.settings.proxy.http_url;\n        var _http_port   = $scope.settings.proxy.http_port;\n\n        var _https_url   = $scope.settings.proxy.https_url;\n        var _https_port  = $scope.settings.proxy.https_port;\n\n        var _ftp_url     = $scope.settings.proxy.ftp_url;\n        var _ftp_port    = $scope.settings.proxy.ftp_port;\n\n        var _socks_url   = $scope.settings.proxy.socks_url;\n        var _socks_port  = $scope.settings.proxy.socks_port;\n\n        var _no_proxy    = $scope.settings.proxy.no_proxy;\n\n        var tempURL = '/api/proxy'+\n            \"?http_url=\"+encodeURIComponent(_http_url)+\n            \"&http_port=\"+encodeURIComponent(_http_port)+\n            \"&https_url=\"+encodeURIComponent(_https_url)+\n            \"&https_port=\"+encodeURIComponent(_https_port)+\n            \"&ftp_url=\"+encodeURIComponent(_ftp_url)+\n            \"&ftp_port=\"+encodeURIComponent(_ftp_port)+\n            \"&socks_url=\"+encodeURIComponent(_socks_url)+\n            \"&socks_port=\"+encodeURIComponent(_socks_port)+\n            \"&no_proxy=\"+encodeURIComponent(_no_proxy);\n\n        workerProcessRestService.performGeneralExecution('POST', tempURL, false, false, null,\n            function(data) {\n                var _https_conn = data.https_conn;\n                if (_https_conn===\"True\") {\n                    $scope.connected = true;\n                    successCallback({success: true, message: \"Applied proxy settings\"});\n                } else {\n                    $scope.connected = false;\n                    failCallback({success: false,   message: \"Applied proxy settings, but https connection does not work under the settings. Some features will be disabled.\"});\n                }\n            }, function(errorMessage) {\n                failCallback({success: false, message: errorMessage});\n            }, rest_check_interval_milliseconds_m);\n    };\n};\n","// These are general functions used in several states.\niotgatewayhub.expandHub_repositories = function($scope,$http,$state,$uibModal,workerProcessRestService) {\n\n    $scope.openCreateRepositoryModal = function(){\n        if($scope.package_activity){\n            console.log(\"suppressing action: current package activity\");\n            return;\n        }\n\n        tempURL = '/api/repository';\n        workerProcessRestService.informGeneralChecking('GET', tempURL, true, false, null,\n            'Manage Repositories', '', 'Getting repositories list...',\n            function successCallback(data) {\n                $scope.repositories = data.list;\n                $scope.openCreateRepositoryModal_2();\n            }, rest_check_interval_milliseconds);\n    };\n\n    $scope.openCreateRepositoryModal_2 = function(){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.manage.repositories.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http){\n\n                // Network\n                $scope.hideCancel=true;\n                $scope.saveText = \"Save settings\";\n                $scope.updated_repositories  = false;\n                $scope.updating_repositories = false;\n\n                $scope.removeRepository = function(_name){\n                    $scope.repositories = $scope.repositories.filter(function(_repo){  return _repo.name !== _name; });\n                };\n\n                $scope.findRepository = function(_name){\n                    var source = $scope.repositories;\n                    for (var i = 0; i < source.length; i++) {\n                        if (source[i].name === _name) {\n                            return source[i];\n                        }\n                    }\n                };\n\n                $scope.updateRepos = function(){\n                    if($scope.deleting_any_repository || $scope.updating_repositories || $scope.updated_repositories || $scope.adding_repository){\n                        return;\n                    }\n                    $scope.response_message      = null;\n                    $scope.error_message         = null;\n                    $scope.updating_repositories = true;\n                    $scope.error_message_add         = null;\n                    $scope.response_message_add      = null;\n\n                    tempURL = '/api/repository';\n                    workerProcessRestService.performGeneralExecution('PUT', tempURL, true, false, null,\n                        function successCallback(data) {\n                            $scope.updating_repositories = false;\n                            $scope.$emit(\"hub.unlockModal\");\n                            $scope.updated_repositories = true;\n\n                            try {\n                                var p_list = JSON.parse(data.p_list);\n                                if ($scope.connected){\n                                    $scope.setPackages('True', p_list);\n                                }\n                                else{\n                                    $scope.setPackages('False', p_list);\n                                }\n                            } catch(err) {\n                                // ignore error\n                                console.log(err.message);\n                            }\n\n                            $scope.reponse_message = \"The repositories were successfully updated.\";\n                        }, function errorCallback(errorMessage) {\n                            $scope.$emit(\"hub.unlockModal\");\n                            $scope.error_message = errorMessage;\n                            $scope.updating_repositories = false;\n                        }, rest_check_interval_milliseconds_m);\n\n                    $scope.$emit(\"hub.lockModal\", [$scope]);\n                };\n\n                $scope.addRepo = function(){\n                    if($scope.deleting_any_repository || $scope.adding_repository || $scope.updating_repositories){\n                        return;\n                    }\n\n                    $scope.adding_repository     = true;\n                    $scope.error_message         = null;\n                    $scope.error_message_add     = null;\n                    $scope.response_message      = null;\n                    $scope.response_message_add  = null;\n                    var _repository_name      = $scope.newRepository.name;\n                    var _repository_url       = $scope.newRepository.url;\n                    var _repository_username  = $scope.newRepository.username;\n                    var _repository_password  = $scope.newRepository.password;\n\n                    var _existing = $scope.findRepository(_repository_name);\n\n                    if(!_repository_name){\n                        $scope.error_message_add         =  \"The repository name must be specified.\";\n                        $scope.adding_repository     = false;\n                        return;\n                    }\n                    if(!_repository_url){\n                        $scope.error_message_add         =  \"The repository url must be specified.\";\n                        $scope.adding_repository     = false;\n                        return;\n                    }\n                    if(_existing){\n                        $scope.error_message_add         =  \"The repository \"+_repository_name+\" already exists.\";\n                        $scope.adding_repository     = false;\n                        return;\n                    }\n\n                    if(!_repository_username){\n                        _repository_username = \"None\"; //see API document. This is exactly what is specified.\n                    }\n                    if(!_repository_password){\n                        _repository_password = \"None\"; //see API document. This is exactly what is specified\n                    }\n\n                    //form validation---for now just checking name,url have values, and that name is unique\n                    //according to Nick at Intel the auth credentials (userName and password) are to be optional here\n\n                    if(_repository_name && _repository_url) {\n                        //console.log(\"adding repository\");\n                        $scope.response_message_add = \"Adding repository \"+_repository_name+\". Package list will be updated. This may take a few minutes...\";\n\n                        tempURL = '/api/repository'+\n                                  \"?name=\"+encodeURIComponent(_repository_name)+\n                                  \"&url=\"+encodeURIComponent(_repository_url)+\n                                  \"&username=\"+encodeURIComponent(_repository_username)+\n                                  \"&password=\"+encodeURIComponent(_repository_password);\n                        workerProcessRestService.performGeneralExecution('POST', tempURL, false, false, null,\n                            function successCallback(data) {\n                                $scope.adding_repository  = false;\n                                $scope.response_message_add = '';\n                                $scope.response_message_add = \"The repository \"+_repository_name+\" was successfully added. Package list was updated.\";\n                                //clear the form values and add the repo to the list\n                                $scope.newRepository.name = '';\n                                $scope.newRepository.url  = '';\n                                try {\n                                    $scope.repositories.push(_repository_name);\n                                } catch (err) {\n                                    console.log(err.message);\n                                }\n\n                                try {\n                                    var p_list = JSON.parse(data.p_list);\n                                    if ($scope.connected){\n                                        $scope.setPackages('True', p_list);\n                                    }\n                                    else{\n                                        $scope.setPackages('False', p_list);\n                                    }\n                                } catch(err) {\n                                    // ignore error\n                                    console.log(err.message);\n                                }\n\n                                $scope.$emit(\"hub.unlockModal\", [$scope]);\n                                console.log(\"added repository \"+_repository_name);\n                            }, function errorCallback(errorMessage) {\n                                $scope.adding_repository  = false;\n                                $scope.response_message_add = '';\n                                $scope.error_message_add = errorMessage;\n\n                                $scope.$emit(\"hub.unlockModal\", [$scope]);\n                            }, rest_check_interval_milliseconds_m);\n\n                        $scope.$emit(\"hub.lockModal\", [$scope]);\n                    }\n\n                };\n\n                $scope.closeModal = function(){\n                    if($scope.adding_repository || $scope.updating_repositories){\n                        return;\n                    }\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.deleteRepo = function(_repository){\n                    console.log(\"hub deleting repository \"+_repository+\" #4084a\");\n                    if($scope.deleting_any_repository || $scope.adding_repository || $scope.updating_repositories){\n                        return;\n                    }\n                    $scope.error_message                          = '';\n                    $scope.error_message_add         = null;\n                    $scope.response_message_add      = null;\n                    $scope.response_message          = null;\n                    $scope.deleting_repository[_repository]  = true;\n                    $scope.deleting_any_repository           = true;\n\n                    tempURL = '/api/repository'+\"?name=\"+encodeURIComponent(_repository);\n                    workerProcessRestService.performGeneralExecution('DELETE', tempURL, false, false, null,\n                        function successCallback(data){\n                            $scope.deleting_repository[_repository]  = false;\n                            $scope.deleting_any_repository           = false;\n\n                            try {\n                                var _index = $scope.repositories.indexOf(_repository);\n                                if (_index >= 0) {\n                                    $scope.repositories.splice(_index, 1);\n                                    // console.log($scope.repositories);\n                                }\n\n                            } catch(err) {\n                                console.log(err.message);\n                            }\n\n                            try {\n                                var p_list = JSON.parse(data.p_list);\n                                if ($scope.connected){\n                                    $scope.setPackages('True', p_list);\n                                }\n                                else{\n                                    $scope.setPackages('False', p_list);\n                                }\n                            } catch(err) {\n                                // ignore error\n                                console.log(err.message);\n                            }\n\n                            $scope.response_message   = \"The repository \"+_repository+\" was successfully deleted.\";\n                        }, function errorCallback(errorMessage) {\n                            $scope.deleting_repository[_repository]  = false;\n                            $scope.deleting_any_repository           = false;\n                            $scope.error_message = errorMessage;\n                        }, rest_check_interval_milliseconds_m);\n                };\n            }\n        });\n    };\n};\n","// These are general functions used in several states.\niotgatewayhub.expandHub_save_image = function($scope,$http,$uibModal,workerProcessRestService) {\n    ///////////////////////////////////////\n    // Save Image Functions\n    //////////////////////////////////////\n\n    $scope.getDefaultConfigurationForSaveImage = function(passedSuccessCallback, passedErrorCallback){\n        $http({\n            method : 'GET',\n            url    : '/api/sa?type=save_image_custom&nocache=' + new Date().getTime()\n        }).then(\n            function successCallback(response) {\n                if(_.isFunction(passedSuccessCallback)){ passedSuccessCallback(response.data); }\n            },function errorCallback(response) {\n                if(_.isFunction(passedErrorCallback)){ passedErrorCallback(response); }\n            });\n    };\n\n    ///////////////////////////////////////\n    // GUI Modals\n    //////////////////////////////////////\n\n    $scope.openOSImageModal0 = function(){\n        if(!$scope.mec){\n            console.log(\"hub control NOT opening OS IMAGE modal because no MEC available #038X\");\n            return;\n        }\n        console.log(\"hub control opening OS IMAGE modal #038a\");\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.0.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                console.log(\"hub control opening OS image modal 0 #038b\");\n                $scope.closeOSImageModal = function(){\n                    console.log(\"hub control closing os image modal 0 #038c\");\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSImage1 = function(){\n                    console.log(\"continuing to os image modal 1 #038dx\");\n                    $scope.openOSImageModal1();\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openOSImageModal1 = function(){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.1.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                //$scope.scanUSBDevices();\n                $scope.selected_device   = null;\n                $scope.closeOSImageModal = function(){\n                    modalInstance.dismiss('cancel');\n                };\n                $scope.setSelectedDevice = function(_device){\n                    console.log(\"setting usb device as \"+_device.Name);\n                    $scope.selected_device   = _device;\n                };\n                $scope.continueOSImage2 = function(){\n                    if($scope.selected_device!==null){\n                        $scope.openOSImageModal2($scope.selected_device);\n                        modalInstance.dismiss('cancel');\n                    }\n                };\n            }\n        });\n    };\n\n    $scope.openOSImageModal2 = function(_usb_device){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.2.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.selected_device   = _usb_device;\n                $scope.closeOSImageModal2 = function(){\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSImage3 = function(){\n                    $scope.openOSImageModal3(_usb_device, false);\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openOSImageModal3 = function(_usb_device, from_custom){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.3.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                var update_params = {\n                    'harden_type'                : 'standard',\n                    'usb_device'                 : _usb_device,\n                    'packages_removed'           : [],\n                    'updaters'                   : [],\n                    'users'                      : [],\n                    'stig'                       : [],\n                    'new_admin_password'         : null,\n                    'confirm_admin_password'     : null,\n                    'new_mec_admin_password'     : null,\n                    'confirm_mec_admin_password' : null,\n                    'enable_mec_whitelist'       : true,\n\n                };\n\n                $scope.parseVersion = function(){\n                    var sysVersionSplit = $scope.device.system_version.split(\".\");\n                    var rcplVersion = sysVersionSplit[3];\n                    console.log(rcplVersion);\n                    if (rcplVersion < 18) {\n                        console.log(\"VERSION < 18\");\n                        $scope.rcplLessThanEighteen = true;\n                    }\n                    else {\n                        console.log(\"VERSION >= 18\");\n                        $scope.rcplLessThanEighteen = false;\n                    }\n                    return $scope.rcplLessThanEighteen;\n                };\n\n                $scope.selection = {\n                    type: 'standard'\n                };\n                if (from_custom) {\n                    $scope.selection.type = 'custom';\n                }\n                $scope.closeOSImageModal3 = function(){\n                    modalInstance.dismiss('cancel');\n                };\n                $scope.continueOSImage3 = function(){\n                    if ($scope.selection.type === 'standard') {\n                        $scope.openOSImageModal3_Standard(update_params);\n                    } else {\n                        var my_data = {\n                            config_data: {},\n                            install_list: [],\n                            updaters_list: null,\n                            users_list: null,\n                            stig_list: null\n                        };\n                        $scope.openOSImageModal3_Custom_Packages(update_params, my_data);\n                    }\n                    modalInstance.dismiss('cancel');\n                };\n            }\n\n        });\n    };\n\n    $scope.openOSImageModal3_Standard = function(_update_params){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.3.standard.pw.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.selected_device   = _update_params.usb_device;\n                $scope.error_message     = null;\n                $scope.hasMEC            = function(){\n                    return $scope.mec.status==='success';\n                };\n                $scope.update_params = _update_params;\n                $scope.update_params.harden_type = 'standard';\n                $scope.closeOSImageModal3_Standard = function(){\n                    modalInstance.dismiss('cancel');\n                };\n                $scope.continueOSImage4_FromStandard = function(){\n                    $scope.error_message     = null;\n                    console.log(\"hub osimage4 attempting os image with password set [\"+$scope.update_params.new_admin_password+\",\"+$scope.update_params.confirm_admin_password+\";\"+$scope.update_params.new_mec_admin_password+\",\"+$scope.update_params.confirm_mec_admin_password+\"]\");\n                    if(!$scope.update_params.new_admin_password || $scope.update_params.new_admin_password.length < min_password_length){\n                        $scope.error_message     = \"The admin password must be at least \"+min_password_length+\" characters long.\";\n                        return;\n                    }\n                    if($scope.update_params.new_admin_password !==  $scope.update_params.confirm_admin_password){\n                        console.log(\"new admin params do not match\");\n                        $scope.error_message     = \"The admin passwords do not match\";\n                        return;\n                    }\n                    if(!$scope.update_params.new_mec_admin_password || $scope.update_params.new_mec_admin_password.length < min_password_length){\n                        $scope.error_message     = \"The MEC admin password must be at least \"+min_password_length+\" characters long.\";\n                        return;\n                    }\n                    if($scope.update_params.new_mec_admin_password !==  $scope.update_params.confirm_mec_admin_password){\n                        console.log(\"new MEC admin params do not match\");\n                        $scope.error_message     = \"The MEC admin passwords do not match\";\n                        return;\n                    }\n                    $scope.openOSImageModal4($scope.update_params);\n                    modalInstance.dismiss('cancel');\n                };\n            }\n\n        });\n    };\n\n    $scope.openOSImageModal3_Custom_Packages = function(_update_params, _data){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.3.custom.packages.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.sortType = 'name';\n                $scope.save_image_has_error = false;\n                $scope.save_image_error_message = '';\n                $scope.gettingPackages = true;\n                $scope.custom_configuration_data = _data.config_data;\n\n                // filter for ng-repeat to show to-be-removed entry\n                $scope.search_removed = {'remove': true};\n                // filter for ng-repeat to show selected packages\n                $scope.search_packages = {'name': null};\n\n                // watch for search condition and reset the scroll bar to top when the search condition changes.\n                $scope.$watch('search_packages', function(){\n                    var container = document.getElementById('my_scroll_bar');\n                    container.scrollTop = 0;\n                }, true);\n\n                // create my array for packages\n                $scope.custom_installed_list = _data.install_list;\n                // if the list is empty, init the list\n                if ($scope.custom_installed_list.length === 0) {\n                    $scope.getDefaultConfigurationForSaveImage(\n                        function successCallback(data){\n                            $scope.custom_configuration_data = data;\n                            $scope.getPackagesInstalled(\n                                 function successCallback(data){\n                                    if (data) {\n                                        $scope.processData(data);\n                                    } else {\n                                        $scope.showError('The server is still processing the packages list. Please try again later.');\n                                    }\n                                 }, function errorCallback(response){\n                                    $scope.showError('Failed to get installed packages list! HTTP status is ' + response.status);\n                                 });\n                        }, function errorCallback(response) {\n                            $scope.showError('Failed to get default configuration! HTTP status is ' + response.status);\n                        });\n                } else {\n                    $scope.gettingPackages = false;\n                }\n\n                // for each installed package, if it is in the list of default to-be-removed list,\n                //      mark it as to-be-removed in $scope.custom_installed_list.\n                // $scope.custom_installed_list is bind to angular html\n                $scope.processData = function(data) {\n                    $scope.gettingPackages = false;\n                    for (var key in data) {\n                        var bEnforce = false;\n                        var bRemove = false;\n                        var lowerName = key.toLowerCase();\n                        var remove_dict = {};\n                        if (typeof $scope.custom_configuration_data.packages_removed != 'undefined') {\n                            remove_dict = $scope.custom_configuration_data.packages_removed;\n                        }\n\n                        for (var key2 in remove_dict) {\n                            var value2 = remove_dict[key2];\n                            if (lowerName === key2.toLowerCase()) {\n                                bRemove = true;\n                                bEnforce = value2;\n                            }\n                        }\n\n                        $scope.custom_installed_list.push({\n                            \"name\": key,\n                            \"remove\": bRemove,\n                            \"enforce\": bEnforce\n                        });\n                    }\n                };\n\n                $scope.showError = function(err_message) {\n                    $scope.gettingPackages = false;\n                    $scope.save_image_has_error = true;\n                    $scope.save_image_error_message = err_message;\n                };\n\n                $scope.clearSearchOSImageModal3_Custom = function(){\n                    $scope.search_packages.name = null;\n                    //The following is already being handled by the search_packages watcher.\n                    //var container = document.getElementById('my_scroll_bar');\n                    //container.scrollTop = 0;\n                };\n\n                $scope.closeOSImageModal3_Custom = function(){\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.backOSImageModal3_Custom = function(){\n                    $scope.openOSImageModal3(_update_params.usb_device, true);\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSImage3_Custom = function(){\n                    // update _update_params.packages_removed and harden_type\n                    _update_params.harden_type = 'custom';\n                    // gety array of objects\n                    var temp_removed_packages = $scope.custom_installed_list.filter(function (el) {\n                        return el.remove === true;\n                    });\n                    // get array:  this map only works starting from IE 9 (2011).\n                    _update_params.packages_removed = temp_removed_packages.map(function(a) {return a.name;});\n\n                    // update _data\n                    _data.config_data = $scope.custom_configuration_data;\n                    _data.install_list = $scope.custom_installed_list;\n                    _data.updaters_list = null;\n\n                    $scope.openOSImageModal3_Custom_MEC(_update_params, _data);\n                    modalInstance.dismiss('cancel');\n                };\n            }\n\n        });\n    };\n\n    $scope.openOSImageModal3_Custom_MEC = function(_update_params, _data){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.3.custom.mec.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.sortType = 'name';\n                $scope.updater_path = null;\n                $scope.checkingFile = false;\n                $scope.save_image_has_error = false;\n                $scope.save_image_error_message = '';\n\n                // filter for ng-repeat to show not deleted entry\n                $scope.search_not_deleted = {'delete': false};\n\n                // if the _data.updaters_list is null, we create one from default configuration data.\n                // else, we use the passed list\n                if (!_data.updaters_list) {\n                    var updaters_list = [];\n                    if (typeof _data.config_data.mec_updater != 'undefined') {\n                        updaters_list = _data.config_data.mec_updater;\n                    }\n                    $scope.custom_updaters_list = [];\n                    for (i = 0; i < updaters_list.length; i++) {\n                        $scope.custom_updaters_list.push({\n                            'name': updaters_list[i],\n                            'delete': false\n                        });\n                    }\n                } else {\n                    $scope.custom_updaters_list = _data.updaters_list;\n                }\n\n                $scope.addSearchOSImageModal3_Custom = function(){\n                    $scope.checkingFile = true;\n\n                    $scope.verifyFileExisted($scope.updater_path,\n                        function successCallback(data){\n                            if (data.status === 'success') {\n                                $scope.checkingFile = false;\n                                $scope.save_image_has_error = false;\n                                $scope.save_image_error_message = '';\n                                // add entry\n                                // if the entry exists, update it.\n                                var doesExist = false;\n                                for (i = 0; i < $scope.custom_updaters_list.length; i++) {\n                                    if ($scope.custom_updaters_list[i].name === $scope.updater_path) {\n                                        if ($scope.custom_updaters_list[i].delete) {\n                                            $scope.custom_updaters_list[i].delete = false;\n                                        } else {\n                                            $scope.showError('The file is already in the list.');\n                                        }\n                                        doesExist = true;\n                                        break;\n                                    }\n                                }\n                                if (!doesExist) {\n                                    // if the entry does not exist, add it.\n                                    $scope.custom_updaters_list.push({\n                                        'name': $scope.updater_path,\n                                        'delete': false\n                                    });\n                                }\n                            } else {\n                                 $scope.showError(data.message);\n                            }\n                        }, function errorCallback(response) {\n                            $scope.showError('Failed to verify file! HTTP status is ' + response.status + '.');\n                        });\n                };\n\n                $scope.showError = function(err_message){\n                    $scope.checkingFile = false;\n                    $scope.save_image_has_error = true;\n                    $scope.save_image_error_message = err_message;\n\n                    // add time out to clear error\n                    setTimeout(function(){\n                        $scope.save_image_has_error = false;\n                        $scope.save_image_error_message = '';\n                        $scope.$apply();\n                    }, 2500);\n                };\n\n                $scope.clearSearchOSImageModal3_Custom = function(){\n                    $scope.updater_path = null;\n                };\n\n                $scope.closeOSImageModal3_Custom = function(){\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.backOSImageModal3_Custom = function(){\n                    $scope.openOSImageModal3_Custom_Packages(_update_params, _data);\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSImage3_Custom = function(){\n                    // update _update_params.updaters and harden_type\n                    _update_params.harden_type = 'custom';\n                    // gety array of objects\n                    var temp_updaters = $scope.custom_updaters_list.filter(function (el) {\n                        return el.delete === false;\n                    });\n                    // get array:  this map only works starting from IE 9 (2011).\n                    _update_params.updaters = temp_updaters.map(function(a) {return a.name;});\n\n                    // update _data\n                    _data.updaters_list = $scope.custom_updaters_list;\n                    _data.users_list = null;\n\n                    $scope.openOSImageModal3_Custom_User(_update_params, _data);\n\n                    modalInstance.dismiss('cancel');\n                };\n            }\n\n        });\n    };\n\n    $scope.openOSImageModal3_Custom_User = function(_update_params, _data){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.3.custom.users.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.sortType = 'sort_number';\n                $scope.gettingAccount = false;\n                $scope.save_image_has_error = false;\n                $scope.save_image_error_message = '';\n                $scope.custom_users_list = [];\n\n                // create my array for users\n                if (!_data.users_list) {\n                    // if the list is null, we create our own\n                    $scope.gettingAccount = true;\n                    $scope.getAccounts(\n                        function successCallback(data){\n                            if (data.status === 'success') {\n                                $scope.processData(data);\n                            } else {\n                                $scope.showError('Failed to get accounts list! Error is ' + data.message, false);\n                            }\n                        }, function errorCallback(response){\n                            $scope.showError('Failed to get accounts list! HTTP status is ' + response.status, false);\n                        });\n                } else {\n                    // not null, use the passed one.\n                    $scope.custom_users_list = _data.users_list;\n                }\n\n                $scope.processData = function(data) {\n                    $scope.gettingAccount = false;\n\n                    // insert the MEC first\n                    $scope.custom_users_list.push({\n                        'name': 'McAfee® Embedded Control',\n                        'sort_number':  0,\n                        'access': true,\n                        'expanded': false,\n                        'disable_toggle': true,\n                        'new_password': '',\n                        'confirm_password': ''\n                    });\n\n                    for (i = 0; i < data.accounts.length; i++) {\n                        var sort_number = 4;\n                        var allow_access = false;\n                        if (data.accounts[i] === 'root') {\n                            sort_number = 1;\n                            allow_access = true;\n                        } else if (data.accounts[i] === 'wra') {\n                            sort_number = 2;\n                            allow_access = true;\n                        } else if (data.accounts[i] === 'gwuser') {\n                            sort_number = 3;\n                            allow_access = true;\n                        } else {\n                            sort_number = 4;\n                            allow_access = false;\n                        }\n                        $scope.custom_users_list.push({\n                            'name': data.accounts[i],\n                            'sort_number':  sort_number,\n                            'access': allow_access,\n                            'expanded': false,\n                            'disable_toggle': false,\n                            'new_password': '',\n                            'confirm_password': ''\n                        });\n                    }\n                };\n\n                $scope.showError = function(err_message, do_time_out) {\n                    $scope.gettingAccount = false;\n                    $scope.save_image_has_error = true;\n                    $scope.save_image_error_message = err_message;\n\n                    if (do_time_out) {\n                        // add time out to clear error\n                        setTimeout(function(){\n                            $scope.save_image_has_error = false;\n                            $scope.save_image_error_message = '';\n                            $scope.$apply();\n                        }, 2500);\n                    }\n                };\n\n                $scope.closeOSImageModal3_Custom = function(){\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.backOSImageModal3_Custom = function(){\n                    $scope.openOSImageModal3_Custom_MEC(_update_params, _data);\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSImage3_Custom = function(){\n                    // verify password first\n                    var hasError = false;\n                    var checkErrorMessage = '';\n                    for (i = 0; i < $scope.custom_users_list.length; i++) {\n                        if ($scope.custom_users_list[i].access) {\n                            if(!$scope.custom_users_list[i].new_password || $scope.custom_users_list[i].new_password.length < min_password_length){\n                                checkErrorMessage = \"For account \" + $scope.custom_users_list[i].name + \", the password must be at least \"+min_password_length+\" characters long.\";\n                                hasError = true;\n                                break;\n                            }\n                            if($scope.custom_users_list[i].new_password !==  $scope.custom_users_list[i].confirm_password){\n                                checkErrorMessage = \"For account \" + $scope.custom_users_list[i].name + \", the passwords do not match.\";\n                                hasError = true;\n                                break;\n                            }\n                        }\n                    }\n                    if (hasError) {\n                        $scope.showError(checkErrorMessage, true);\n                    } else {\n                        // update _update_params.users and harden_type\n                        _update_params.harden_type = 'custom';\n\n                        // get array of objects\n                        var temp_users = $scope.custom_users_list.filter(function (el) {\n                            return el.access === true;\n                        });\n                        // get array:  this map only works starting from IE 9 (2011).\n                        _update_params.users = temp_users.map(function(a) {return {'name': a.name, 'pw': a.confirm_password};});\n\n                        // update _data\n                        _data.users_list = $scope.custom_users_list;\n\n                        // STIG is diabled for now\n                        $scope.openOSImageModal4(_update_params);\n                        //$scope.openOSImageModal3_Custom_stig(_update_params, _data);\n\n                        modalInstance.dismiss('cancel');\n                    }\n                };\n            }\n\n        });\n    };\n\n    $scope.openOSImageModal3_Custom_stig = function(_update_params, _data){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.3.custom.stig.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n                $scope.sortType = 'ID';\n                $scope.custom_stig_list = [];\n\n                // create my array for stig\n                if (!_data.stig_list) {\n                    if (\"stig_all\" in _data.config_data) {\n                         // jQuery map to change JSON object to array of JSON\n                        var temp_array = $.map(_data.config_data.stig_all, function(el, k) {\n                            var el_return = el;\n                            el_return.ID = k;\n                            return el_return;\n                        });\n\n                        // if the list is null, we create our own\n                        for (i = 0; i < temp_array.length; i++) {\n                            var toInclude = true;\n\n                            // check if this item is to be included by default\n                            if (\"stig\" in _data.config_data) {\n                                try {\n                                    // works starting from IE 9.0\n                                    if (_data.config_data.stig.indexOf(temp_array[i].ID) != -1) {\n                                        toInclude = true;\n                                    } else {\n                                        toInclude = false;\n                                    }\n                                } catch(err) {\n                                }\n                            }\n\n                            $scope.custom_stig_list.push({\n                                'ID': temp_array[i].ID,\n                                'Severity': temp_array[i].Severity,\n                                'Title': temp_array[i].Title,\n                                'URL': temp_array[i].URL,\n                                'included': toInclude\n                            });\n                        }\n                    }\n                } else {\n                    // not null, use the passed one.\n                    $scope.custom_stig_list = _data.stig_list;\n                }\n\n                $scope.closeOSImageModal3_Custom = function(){\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.backOSImageModal3_Custom = function(){\n                    $scope.openOSImageModal3_Custom_User(_update_params, _data);\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSImage3_Custom = function(){\n                    // update _update_params.stig and harden_type\n                    _update_params.harden_type = 'custom';\n\n                    // get array of objects\n                    var temp_stig = $scope.custom_stig_list.filter(function (el) {\n                        return el.included === true;\n                    });\n                    // get array:  this map only works starting from IE 9 (2011).\n                    _update_params.stig = temp_stig.map(function(a) {return a.ID;});\n\n                    $scope.openOSImageModal4(_update_params);\n                    modalInstance.dismiss('cancel');\n\n                };\n            }\n\n        });\n    };\n\n    $scope.openOSImageModal4 = function(_update_params){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.4.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.closeOSImageModal4 = function(){\n                    console.log(\"close os image modal 4\");\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSImage5 = function(){\n                    $scope.openOSImageModal5(_update_params);\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openOSImageModal5 = function(_update_params){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.5.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.closeSaveImage = function(){\n                    console.log(\"closing window saving of os image\");\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.savedImage = false;\n\n                $scope.saveImage = function(){\n                    console.log(\"hub sending saving os image with data \"+ JSON.stringify(_update_params));\n\n                    tempURL = '/api/sa' ;\n                    content_body = {harden_type: _update_params.harden_type,\n                                    usb_device: _update_params.usb_device.Device,\n                                    packages_removed: _update_params.packages_removed,\n                                    updaters: _update_params.updaters,\n                                    users: _update_params.users,\n                                    stig: _update_params.stig,\n                                    admin_password: _update_params.new_admin_password,\n                                    mec_password: _update_params.new_mec_admin_password\n                                    };\n\n                    workerProcessRestService.performGeneralExecution('POST', tempURL, false, true, content_body,\n                        function successCallback(data) {\n                            console.log(\"SAVED OS IMAGE\");\n                            $scope.savedImage = true;\n                            $scope.openOSImageModal6();\n                            modalInstance.dismiss('cancel');\n                        }, function errorCallback(errorMessage) {\n                            console.log(\"SAVE OS IMAGE FAILED\");\n                            $scope.openOSImageModal6e(errorMessage);\n                            modalInstance.dismiss('cancel');\n                        }, rest_check_interval_milliseconds_ll);\n                };\n\n                $scope.continueOSImage6 = function(){\n\n                    $scope.openOSImageModal6();\n                    modalInstance.dismiss('cancel');\n\n                };\n                $scope.saveImage();\n            }\n        });\n    };\n\n    $scope.openOSImageModal6 = function(){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.6.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.closeModal = function(){\n                    console.log(\"closing window\");\n                    modalInstance.dismiss('cancel');\n                };\n\n                $scope.continueOSImage7 = function(){\n                    $scope.openOSImageModal7();\n                    modalInstance.dismiss('cancel');\n                };\n            }\n        });\n    };\n\n    $scope.openOSImageModal6e = function(_message){\n        var modalInstance = $uibModal.open({\n            templateUrl: 'partials/hub.osimage.6e.ng.html?version=' + gui_version,\n            animation:    true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function($scope,$state,$http,$rootScope){\n\n                $scope.message    = _message;\n                $scope.closeModal = function(){\n                    console.log(\"closing window\");\n                    modalInstance.dismiss('cancel');\n                };\n\n            }\n\n        });\n    };\n\n    $scope.openOSImageModal7 = function(){\n        console.log(\"Is this Quark? \" + $scope.isQuark);\n        var html_page = 'partials/hub.osimage.7.ng.html?version=' + gui_version;\n        if ($scope.isQuark) {\n            html_page = 'partials/hub.osimage.7.quark.ng.html?version=' + gui_version;\n        }\n\n        var modalInstance = $uibModal.open({\n            templateUrl: html_page,\n            animation: true,\n            size: 'lg',\n            backdrop: modal_light_dismiss_enabled,\n            scope: $scope,\n            controller: function ($scope, $state, $http, $rootScope) {\n\n                $scope.closeModal = function () {\n                    console.log(\"closing window\");\n                    modalInstance.dismiss('cancel');\n                };\n                $scope.openSaveDeployTutorial = function () {\n                    var url = $state.href('tutorial.savedeploy', { parameter: \"parameter\" });\n                    window.open(url, '_blank');\n                    console.log(\"openSaveDeployTutorial\");\n                };\n                $scope.openDocumentation = function () {\n                    modalInstance.dismiss('cancel');\n                    $state.go(\"hub.dashboard.documentation\");\n                    console.log(\"openDocumentation\");\n                };\n            }\n        });\n    };\n\n};\n"]}